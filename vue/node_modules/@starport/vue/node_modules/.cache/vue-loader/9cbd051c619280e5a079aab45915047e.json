{"remainingRequest":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/src/components/SpNFTSend/SpNFTSend.vue?vue&type=template&id=c04d5bc8&ts=true","dependencies":[{"path":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/src/components/SpNFTSend/SpNFTSend.vue","mtime":1651680035310},{"path":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/node_modules/babel-loader/lib/index.js","mtime":1650206516231},{"path":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/node_modules/ts-loader/index.js","mtime":1650206520101},{"path":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/node_modules/vue-loader/dist/templateLoader.js","mtime":1650206520131},{"path":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/node_modules/cache-loader/dist/cjs.js","mtime":1650206516391},{"path":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/node_modules/vue-loader/dist/index.js","mtime":1650206520131}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiB2LWlmPSJkZXBzTG9hZGVkIj4KICAgIDxkaXYgY2xhc3M9InNwLXRva2VuLXNlbmRfX2hvbGRlciI+CiAgICAgIDxkaXYgY2xhc3M9InNwLWNvbXBvbmVudCBzcC10b2tlbi1zZW5kIj4KICAgICAgICA8ZGl2IGNsYXNzPSJzcC10b2tlbi1zZW5kX19oZWFkZXIgc3AtY29tcG9uZW50LXRpdGxlIj4KICAgICAgICAgIDxoMz5ORlTljaHliLjovazotKY8L2gzPgogICAgICAgICAgPHNwYW4+fDwvc3Bhbj4KICAgICAgICAgIDxzcGFuPuWPr+S4gOasoei9rOWPkeWkmuenjeWNoeWIuDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzcC10b2tlbi1zZW5kX19tYWluIHNwLWJveCBzcC1zaGFkb3ciPgogICAgICAgICAgPGZvcm0gY2xhc3M9InNwLXRva2VuLXNlbmRfX21haW5fX2Zvcm0iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC10b2tlbi1zZW5kX19tYWluX19yY3B0X19oZWFkZXIgc3AtYm94LWhlYWRlciI+6L2s6LSm57uZPC9kaXY+CiAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iY2hhbm5lbCIgdi1tb2RlbD0idHJhbnNmZXIuY2hhbm5lbCIgdi1pZj0iYXZhaWxhYmxlQ2hhbm5lbHMubGVuZ3RoID4gMCI+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj5UaGlzIGNoYWluPC9vcHRpb24+CiAgICAgICAgICAgICAgPG9wdGlvbgogICAgICAgICAgICAgICAgdi1mb3I9ImNoYW5uZWwgaW4gYXZhaWxhYmxlQ2hhbm5lbHMiCiAgICAgICAgICAgICAgICB2LWJpbmQ6a2V5PSJjaGFubmVsLnNyYy5jaGFubmVsSWQiCiAgICAgICAgICAgICAgICA6dmFsdWU9ImNoYW5uZWwuc3JjLmNoYW5uZWxJZCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICB7eyBjaGFubmVsLmNoYWluSWRCIH19CiAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC10b2tlbi1zZW5kX19tYWluX19yY3B0X193cmFwcGVyIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC10b2tlbi1zZW5kX19tYWluX19yY3B0X19pY29uIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzcC1pY29uIHNwLWljb24tVXBBcnJvdyIgLz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC10b2tlbi1zZW5kX19tYWluX19yY3B0X19pbnB1dCBzcC1mb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICBjbGFzcz0ic3AtaW5wdXQiCiAgICAgICAgICAgICAgICAgIG5hbWU9InJjcHQiCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InRyYW5zZmVyLnJlY2lwaWVudCIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IuaOpeaUtuWcsOWdgC4uLiIKICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPSIhYWRkcmVzcyIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9InNwLXRva2VuLXNlbmRfX21haW5fX3JjcHRfX21lbW9fX2J0biIKICAgICAgICAgICAgICAgIHYtb246Y2xpY2s9Im1lbW9PcGVuID0gdHJ1ZSIKICAgICAgICAgICAgICAgIHYtaWY9IiFtZW1vT3BlbiAmJiBhZGRyZXNzIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICvmt7vliqDlpIfms6gKICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwLXRva2VuLXNlbmRfX21haW5fX3JjcHRfX21lbW9fX2hlYWRlciBzcC1ib3gtaGVhZGVyIiB2LWlmPSJtZW1vT3BlbiI+CiAgICAgICAgICAgICAg5aSH5rOoCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNwLWljb24gc3AtaWNvbi1DbG9zZSIgdi1vbjpjbGljaz0ibWVtb09wZW4gPSBmYWxzZSI+PC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3AtdG9rZW4tc2VuZF9fbWFpbl9fcmNwdF9fbWVtbyIgdi1pZj0ibWVtb09wZW4iPgogICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0ic3AtdG9rZW4tc2VuZF9fbWFpbl9fcmNwdF9fbWVtb19fY29udGVudCBzcC10ZXh0YXJlYSIgdi1tb2RlbD0idHJhbnNmZXIubWVtbyIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwLXRva2VuLXNlbmRfX21haW5fX2FtdF9faGVhZGVyIHNwLWJveC1oZWFkZXIiPuaVsOmHjzwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC10b2tlbi1zZW5kX19tYWluX19hbXRfX3dyYXBwZXIiIHYtaWY9IiFiYWxhbmNlcyAmJiBhZGRyZXNzIj4KICAgICAgICAgICAgICA8U3BORlRBbW91bnRTZWxlY3QKICAgICAgICAgICAgICAgIHYtZm9yPSIoYW1vdW50LCBpbmRleCkgaW4gdHJhbnNmZXIuYW1vdW50IgogICAgICAgICAgICAgICAgOmluZGV4PSJpbmRleCIKICAgICAgICAgICAgICAgIDpsYXN0PSJ0cmFuc2Zlci5hbW91bnQubGVuZ3RoID09IDEiCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJ0cmFuc2Zlci5hbW91bnRbaW5kZXhdIgogICAgICAgICAgICAgICAgOmF2YWlsYWJsZT0iYmFsYW5jZXMiCiAgICAgICAgICAgICAgICA6c2VsZWN0ZWQ9InNlbGVjdGVkRGVub21zIgogICAgICAgICAgICAgICAgdi1iaW5kOmtleT0iJ2Ftb3VudCcgKyBpbmRleCIKICAgICAgICAgICAgICAgIHYtb246c2VsZi1yZW1vdmU9InRyYW5zZmVyLmFtb3VudC5zcGxpY2UoaW5kZXgsIDEpIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9InNwLXRva2VuLXNlbmRfX21haW5fX2FtdF9fYWRkIgogICAgICAgICAgICAgICAgdi1pZj0idHJhbnNmZXIuY2hhbm5lbCA9PSAnJyAmJiBuZXh0VG9BZGQgIT0gbnVsbCIKICAgICAgICAgICAgICAgIHYtb246Y2xpY2s9ImFkZFRva2VuIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICsg5re75Yqg5Y2h5Yi4CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC10b2tlbi1zZW5kX19tYWluX19hbXRfX3dyYXBwZXIiIHYtaWY9IiFhZGRyZXNzIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC1hbW91bnQtc2VsZWN0IHNwLWFtb3VudC1zZWxlY3RfX2R1bW15Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwLWZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC1hbW91bnQtc2VsZWN0X19kZW5vbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3AtYW1vdW50LXNlbGVjdF9fZGVub21fX3NlbGVjdGVkIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwLWFtb3VudC1zZWxlY3RfX2Rlbm9tX19uYW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3AtZGVub20tbWFya2VyIiBzdHlsZT0iYmFja2dyb3VuZDogIzgwOWNmZiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3AtZHVtbXktZmlsbCIgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJzcC1pbnB1dCBzcC1pbnB1dC1sYXJnZSIgdmFsdWU9IjAiIG5hbWU9InJjcHQiIGRpc2FibGVkPSJ0cnVlIiAvPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJzcC10b2tlbi1zZW5kX19tYWluX19mb290ZXIiCiAgICAgICAgICAgICAgOmNsYXNzPSJ7ICdzcC10b2tlbi1zZW5kX19tYWluX19mb290ZXJfX29wZW4nOiBmZWVzT3BlbiB9IgogICAgICAgICAgICAgIHYtaWY9ImFkZHJlc3MiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC10b2tlbi1zZW5kX19tYWluX19mZWVzX19oZWFkZXIgc3AtYm94LWhlYWRlciI+CiAgICAgICAgICAgICAgICDmiYvnu63otLkgPHNwYW4gY2xhc3M9InNwLWNpcmNsZSI+Pzwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9ImZlZXNPcGVuIiB2LW9uOmNsaWNrPSJmZWVzT3BlbiA9IGZhbHNlIiBjbGFzcz0ic3AtaWNvbiBzcC1pY29uLVVwQ2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC10b2tlbi1zZW5kX19tYWluX19mZWVzX19jb250ZW50Ij4KICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPSJmZWVzT3BlbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwLXRva2VuLXNlbmRfX21haW5fX2FtdF9fd3JhcHBlciIgdi1pZj0iIWJhbGFuY2VzIj4KICAgICAgICAgICAgICAgICAgICA8U3BBbW91bnRTZWxlY3QKICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoYW1vdW50LCBpbmRleCkgaW4gdHJhbnNmZXIuZmVlcyIKICAgICAgICAgICAgICAgICAgICAgIDppbmRleD0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgICA6bGFzdD0idHJhbnNmZXIuZmVlcy5sZW5ndGggPT0gMSIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InRyYW5zZmVyLmZlZXNbaW5kZXhdIgogICAgICAgICAgICAgICAgICAgICAgOmF2YWlsYWJsZT0iYmFsYW5jZXMiCiAgICAgICAgICAgICAgICAgICAgICA6c2VsZWN0ZWQ9InNlbGVjdGVkRmVlRGVub21zIgogICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOmtleT0iJ2ZlZScgKyBpbmRleCIKICAgICAgICAgICAgICAgICAgICAgIHYtb246c2VsZi1yZW1vdmU9InRyYW5zZmVyLmZlZXMuc3BsaWNlKGluZGV4LCAxKSIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwLXRva2VuLXNlbmRfX21haW5fX2FtdF9fYWRkIiB2LWlmPSJuZXh0RmVlVG9BZGQgIT0gbnVsbCIgdi1vbjpjbGljaz0iYWRkRmVlVG9rZW4iPgogICAgICAgICAgICAgICAgICAgICAgKyDmt7vliqDmiYvnu63otLkKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC1saW5lIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3AtdG9rZW4tc2VuZF9fbWFpbl9fZmVlc19fc21hbGwiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtZm9yPSIoZmVlLCBpbmRleCkgaW4gdHJhbnNmZXIuZmVlcyIgdi1iaW5kOmtleT0iJ2ZlZV9zbWFsbCcgKyBpbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPnt7IGZlZS5hbW91bnQgfX08L3N0cm9uZz4KCiAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj0iZmVlLmRlbm9tLmluZGV4T2YoJ2liYy8nKSA9PSAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgSUJDL3t7IGRlbm9tVHJhY2VzW2ZlZS5kZW5vbS5zcGxpdCgnLycpWzFdXT8uZGVub21fdHJhY2UucGF0aC50b1VwcGVyQ2FzZSgpID8/ICcnIH19L3t7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVub21UcmFjZXNbZmVlLmRlbm9tLnNwbGl0KCcvJylbMV1dPy5kZW5vbV90cmFjZS5iYXNlX2Rlbm9tLnRvVXBwZXJDYXNlKCkgPz8gJ1VOS05PV04nCiAgICAgICAgICAgICAgICAgICAgICAgIH19LAogICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+IHt7IGZlZS5kZW5vbS50b1VwcGVyQ2FzZSgpIH19LCA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LW9uOmNsaWNrPSJmZWVzT3BlbiA9IHRydWUiIGNsYXNzPSJzcC1pY29uIHNwLWljb24tRG93bkNhcmV0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC10b2tlbi1zZW5kX19tYWluX19idG5zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwLXRva2VuLXNlbmRfX21haW5fX2J0bnNfX3Jlc2V0X19mZWVzIiB2LW9uOmNsaWNrPSJyZXNldEZlZXMiIHYtaWY9ImZlZXNPcGVuIj4KICAgICAgICAgICAgICAgICAg6YeN6K6+5omL57ut6LS5CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwLXRva2VuLXNlbmRfX21haW5fX2J0bnNfX3R4Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3AtdG9rZW4tc2VuZF9fbWFpbl9fYnRuc19fcmVzZXQiIHYtb246Y2xpY2s9InJlc2V0VHJhbnNhY3Rpb24iPumHjeiuvjwvZGl2PgogICAgICAgICAgICAgICAgICA8U3BCdXR0b24gdi1vbjpjbGljaz0ic2VuZFRyYW5zYWN0aW9uIiB0eXBlPSJwcmltYXIiIDpkaXNhYmxlZD0iIXZhbGlkRm9ybSIgOmJ1c3k9ImluRmxpZ2h0IgogICAgICAgICAgICAgICAgICAgID7noa7orqTovazotKY8L1NwQnV0dG9uCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3AtdG9rZW4tc2VuZF9fbWFpbl9fZm9vdGVyIiB2LWVsc2U+CiAgICAgICAgICAgICAgPGgzIHN0eWxlPSJjb2xvcjpyZWQiPuivt+WFiOeZu+W9lemSseWMhTwvaDM+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3AtdG9rZW4tc2VuZF9fbWFpbl9fZmVlc19fY29udGVudCI+PC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3AtdG9rZW4tc2VuZF9fbWFpbl9fYnRucyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC10b2tlbi1zZW5kX19tYWluX19idG5zX19yZXNldF9fZmVlcyIgdi1vbjpjbGljaz0icmVzZXRGZWVzIiB2LWlmPSJmZWVzT3BlbiI+CiAgICAgICAgICAgICAgICAgIOmHjeiuvuaJi+e7rei0uQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC10b2tlbi1zZW5kX19tYWluX19idG5zX190eCI+CiAgICAgICAgICAgICAgICAgIDxTcEJ1dHRvbiB2LW9uOmNsaWNrPSJzZW5kVHJhbnNhY3Rpb24iIHR5cGU9InByaW1hcnkiIDpkaXNhYmxlZD0iIXZhbGlkRm9ybSIKICAgICAgICAgICAgICAgICAgICA+56Gu6K6k6L2s6LSmPC9TcEJ1dHRvbgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJzcC1jb21wb25lbnQgc3AtYXNzZXRzX193cmFwcGVyIj4KICAgICAgICA8U3BORlRBc3NldHMgOmFkZHJlc3M9ImFkZHJlc3MiIHYtc2hvdz0iYWRkcmVzcyIvPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo="},{"version":3,"sources":["/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/src/components/SpNFTSend/SpNFTSend.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAChC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC/C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;cACnF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACnC,CAAC,CAAC,CAAC,CAAC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AC;YACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAClG,CAAC,CAAC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACnE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;gBAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;cACpD,CAAC;cACD,CAAC,CAAC,CAAC;gBACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACtB;gBACE,EAAE,CAAC,CAAC,CAAC;cACP,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC5D,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnD,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kBACxB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAClC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;sBAC5C,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACxC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;wBAC1D,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;sBAC9B,CAAC,CAAC,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC,CAAC,CAAC;kBACP,CAAC,CAAC,CAAC,CAAC,CAAC;kBACL,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAChF,CAAC,CAAC,CAAC,CAAC,CAAC;cACP,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC,CAAC,CAAC;;YAEL,CAAC,CAAC,CAAC;cACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;cACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACf;cACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1D,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC5F,CAAC,CAAC,CAAC,CAAC,CAAC;cACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kBACvB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;sBACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;sBACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;sBACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;sBAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;sBAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;sBACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;sBAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;sBACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;oBAClD,CAAC;oBACD,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;sBAC7F,EAAE,CAAC,CAAC,CAAC,CAAC;oBACR,CAAC,CAAC,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kBAC5B,CAAC,CAAC,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kBACd,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;sBAC1E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;sBAEhC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;wBAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;0BACpF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACxF,CAAC,CAAC;sBACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;sBACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACN,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kBAC7E,CAAC,CAAC,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACZ,CAAC,CAAC,CAAC,CAAC,CAAC;cACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kBACxF,CAAC,CAAC,CAAC,CAAC;gBACN,CAAC,CAAC,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kBACxC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kBACnF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACzF,CAAC,CAA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","file":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/src/components/SpNFTSend/SpNFTSend.vue","sourceRoot":"","sourcesContent":["<template>\n  <div v-if=\"depsLoaded\">\n    <div class=\"sp-token-send__holder\">\n      <div class=\"sp-component sp-token-send\">\n        <div class=\"sp-token-send__header sp-component-title\">\n          <h3>NFT卡券转账</h3>\n          <span>|</span>\n          <span>可一次转发多种卡券</span>\n        </div>\n        <div class=\"sp-token-send__main sp-box sp-shadow\">\n          <form class=\"sp-token-send__main__form\">\n            <div class=\"sp-token-send__main__rcpt__header sp-box-header\">转账给</div>\n            <select name=\"channel\" v-model=\"transfer.channel\" v-if=\"availableChannels.length > 0\">\n              <option value=\"\">This chain</option>\n              <option\n                v-for=\"channel in availableChannels\"\n                v-bind:key=\"channel.src.channelId\"\n                :value=\"channel.src.channelId\"\n              >\n                {{ channel.chainIdB }}\n              </option>\n            </select>\n            <div class=\"sp-token-send__main__rcpt__wrapper\">\n              <div class=\"sp-token-send__main__rcpt__icon\">\n                <span class=\"sp-icon sp-icon-UpArrow\" />\n              </div>\n              <div class=\"sp-token-send__main__rcpt__input sp-form-group\">\n                <input\n                  class=\"sp-input\"\n                  name=\"rcpt\"\n                  v-model=\"transfer.recipient\"\n                  placeholder=\"接收地址...\"\n                  :disabled=\"!address\"\n                />\n              </div>\n              <div\n                class=\"sp-token-send__main__rcpt__memo__btn\"\n                v-on:click=\"memoOpen = true\"\n                v-if=\"!memoOpen && address\"\n              >\n                +添加备注\n              </div>\n            </div>\n            <div class=\"sp-token-send__main__rcpt__memo__header sp-box-header\" v-if=\"memoOpen\">\n              备注\n              <span class=\"sp-icon sp-icon-Close\" v-on:click=\"memoOpen = false\"></span>\n            </div>\n            <div class=\"sp-token-send__main__rcpt__memo\" v-if=\"memoOpen\">\n              <textarea class=\"sp-token-send__main__rcpt__memo__content sp-textarea\" v-model=\"transfer.memo\" />\n            </div>\n            <div class=\"sp-token-send__main__amt__header sp-box-header\">数量</div>\n            <div class=\"sp-token-send__main__amt__wrapper\" v-if=\"!balances && address\">\n              <SpNFTAmountSelect\n                v-for=\"(amount, index) in transfer.amount\"\n                :index=\"index\"\n                :last=\"transfer.amount.length == 1\"\n                v-model=\"transfer.amount[index]\"\n                :available=\"balances\"\n                :selected=\"selectedDenoms\"\n                v-bind:key=\"'amount' + index\"\n                v-on:self-remove=\"transfer.amount.splice(index, 1)\"\n              />\n              <div\n                class=\"sp-token-send__main__amt__add\"\n                v-if=\"transfer.channel == '' && nextToAdd != null\"\n                v-on:click=\"addToken\"\n              >\n                + 添加卡券\n              </div>\n            </div>\n            <div class=\"sp-token-send__main__amt__wrapper\" v-if=\"!address\">\n              <div class=\"sp-amount-select sp-amount-select__dummy\">\n                <div class=\"sp-form-group\">\n                  <div class=\"sp-amount-select__denom\">\n                    <div class=\"sp-amount-select__denom__selected\">\n                      <div class=\"sp-amount-select__denom__name\">\n                        <div class=\"sp-denom-marker\" style=\"background: #809cff\" />\n                        <div class=\"sp-dummy-fill\" />\n                      </div>\n                    </div>\n                  </div>\n                  <input class=\"sp-input sp-input-large\" value=\"0\" name=\"rcpt\" disabled=\"true\" />\n                </div>\n              </div>\n            </div>\n\n            <div\n              class=\"sp-token-send__main__footer\"\n              :class=\"{ 'sp-token-send__main__footer__open': feesOpen }\"\n              v-if=\"address\"\n            >\n              <div class=\"sp-token-send__main__fees__header sp-box-header\">\n                手续费 <span class=\"sp-circle\">?</span>\n                <span v-if=\"feesOpen\" v-on:click=\"feesOpen = false\" class=\"sp-icon sp-icon-UpCaret\"></span>\n              </div>\n              <div class=\"sp-token-send__main__fees__content\">\n                <template v-if=\"feesOpen\">\n                  <div class=\"sp-token-send__main__amt__wrapper\" v-if=\"!balances\">\n                    <SpAmountSelect\n                      v-for=\"(amount, index) in transfer.fees\"\n                      :index=\"index\"\n                      :last=\"transfer.fees.length == 1\"\n                      v-model=\"transfer.fees[index]\"\n                      :available=\"balances\"\n                      :selected=\"selectedFeeDenoms\"\n                      v-bind:key=\"'fee' + index\"\n                      v-on:self-remove=\"transfer.fees.splice(index, 1)\"\n                    />\n                    <div class=\"sp-token-send__main__amt__add\" v-if=\"nextFeeToAdd != null\" v-on:click=\"addFeeToken\">\n                      + 添加手续费\n                    </div>\n                    <div class=\"sp-line\"></div>\n                  </div>\n                </template>\n                <template v-else>\n                  <div class=\"sp-token-send__main__fees__small\">\n                    <span v-for=\"(fee, index) in transfer.fees\" v-bind:key=\"'fee_small' + index\">\n                      <strong>{{ fee.amount }}</strong>\n\n                      <template v-if=\"fee.denom.indexOf('ibc/') == 0\">\n                        IBC/{{ denomTraces[fee.denom.split('/')[1]]?.denom_trace.path.toUpperCase() ?? '' }}/{{\n                          denomTraces[fee.denom.split('/')[1]]?.denom_trace.base_denom.toUpperCase() ?? 'UNKNOWN'\n                        }},\n                      </template>\n                      <template v-else> {{ fee.denom.toUpperCase() }}, </template>\n                    </span>\n                    <span v-on:click=\"feesOpen = true\" class=\"sp-icon sp-icon-DownCaret\"></span>\n                  </div>\n                </template>\n              </div>\n              <div class=\"sp-token-send__main__btns\">\n                <div class=\"sp-token-send__main__btns__reset__fees\" v-on:click=\"resetFees\" v-if=\"feesOpen\">\n                  重设手续费\n                </div>\n                <div class=\"sp-token-send__main__btns__tx\">\n                  <div class=\"sp-token-send__main__btns__reset\" v-on:click=\"resetTransaction\">重设</div>\n                  <SpButton v-on:click=\"sendTransaction\" type=\"primar\" :disabled=\"!validForm\" :busy=\"inFlight\"\n                    >确认转账</SpButton\n                  >\n                </div>\n              </div>\n            </div>\n            <div class=\"sp-token-send__main__footer\" v-else>\n              <h3 style=\"color:red\">请先登录钱包</h3>\n              <div class=\"sp-token-send__main__fees__content\"></div>\n              <div class=\"sp-token-send__main__btns\">\n                <div class=\"sp-token-send__main__btns__reset__fees\" v-on:click=\"resetFees\" v-if=\"feesOpen\">\n                  重设手续费\n                </div>\n                <div class=\"sp-token-send__main__btns__tx\">\n                  <SpButton v-on:click=\"sendTransaction\" type=\"primary\" :disabled=\"!validForm\"\n                    >确认转账</SpButton\n                  >\n                </div>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n      <div class=\"sp-component sp-assets__wrapper\">\n        <SpNFTAssets :address=\"address\" v-show=\"address\"/>\n      </div>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, PropType } from 'vue'\nimport SpButton from '../SpButton'\nimport SpNFTAssets from '../SpNFTAssets'\nimport SpNFTAmountSelect from '../SpNFTAmountSelect'\nimport { Bech32 } from '@cosmjs/encoding'\nimport { Amount, DenomTraces, Relayer} from '../../utils/interfaces'\nimport long from 'long';\n\nexport interface TransferData {\n  recipient: string\n  channel: string\n  amount: Array<Amount>\n  memo: string\n  fees: Array<Amount>\n}\n\nexport interface SpNFTSendState {\n  transfer: TransferData\n  feesOpen: boolean\n  memoOpen: boolean\n  inFlight: boolean\n  bankAddress: string\n  staking: Record<string, unknown>\n  denomTraces: DenomTraces\n}\n\n\nexport default defineComponent({\n  name: 'SpNFTSend',\n  components: {\n    SpButton,\n    SpNFTAmountSelect,\n    SpNFTAssets\n  },\n  props: {\n    address: {\n      type: String as PropType<string>,\n    },\n    refresh: {\n      type: Boolean as PropType<boolean>,\n    },\n  },\n  data: function (): SpNFTSendState {\n    return {\n      transfer: {\n        recipient: '',\n        channel: '',\n        amount: [],\n        memo: '',\n        fees: [],\n      } as TransferData,\n      feesOpen: false,\n      memoOpen: false,\n      inFlight: false,\n      bankAddress: '',\n      staking: {},\n      denomTraces: {} as DenomTraces,\n    }\n  },\n  beforeCreate: function (): void {\n    const vuexModule = ['irismod.nft']\n    for (let i = 1; i <= vuexModule.length; i++) {\n      const submod = vuexModule.slice(0, i)\n      if (!this.$store.hasModule(submod)) {\n        console.log('Module `irismod.nft` has not been registered!')\n        this._depsLoaded = false\n        break\n      }\n    }\n  },\n  mounted: function (): void {\n    this.bankAddress = this.address ?? ''\n    //this.staking = this.$store.getters['cosmos.staking.v1beta1/getParams']()\n    if (this._depsLoaded) {\n      if (this.bankAddress != '') {\n//         this.$store.dispatch('irismod.nft/QueryOwner', {\n              // params: {},\n              // query: { owner: this.address }, \n//  //         options: { all: true, subscribe: this.refresh },\n//         })\n      }\n    }\n  },\n  watch: {\n    balances: function (newBal: any, oldBal: any): void {\n      if (newBal != oldBal && newBal[0]?.denom && oldBal.length == 0) {\n        this.transfer.amount = [{ amount: '1', denom: newBal?.id_collections[0]?.token_ids[0] }]\n        this.transfer.fees = [{ amount: '1', denom: \"metab\" }]\n      }\n    },\n    address: function (newAddr: string, oldAddr: string): void {\n      if (this._depsLoaded) {\n        if (newAddr != oldAddr) {\n          this.bankAddress = newAddr\n          if (this.bankAddress != '') {\n            // this.$store.dispatch('irismod.nft/QueryOwner', {\n            //   query: { owner: this.bankAddress, denomId:\"gws\" },\n //             options: { all: true, subscribe: this.refresh },\n            // })\n          }\n        }\n      }\n    },\n  },\n  computed: {\n    validForm: function (): boolean {\n      if (\n        this.transfer.amount.every(\n          (x) => !isNaN(this.parseAmount(x.amount)) && x.amount != '' && this.parseAmount(x.amount) != 0,\n        ) &&\n        this.transfer.fees.every((x) => !isNaN(this.parseAmount(x.amount))) &&\n        this.validAddress &&\n        this.address\n      ) {\n        return true\n      } else {\n        return false\n      }\n    },\n    balances: function (): any {\n      if (this._depsLoaded &&  this.bankAddress != '') {\n        this.$store.getters['irismod.nft/getOwner']({\n              params: {},\n              query: { owner: this.address }, \n              })?.owner?.id_collections; \n       } else {\n        return []\n       }\n    },\n    nextToAdd: function (): Amount | null {\n      // const i = this.balances.findIndex((x) => !this.selectedDenoms.includes(x.denom))\n      // if (i == -1) {\n        return null\n      // } else {\n      //   return this.balances[i]\n      // }\n    },\n    nextFeeToAdd: function (): Amount | null {\n      // const i = this.balances.findIndex((x) => !this.selectedFeeDenoms.includes(x.denom))\n      // if (i == -1) {\n        return null\n      // } else {\n      //   return this.balances[i]\n      // }\n    },\n    selectedDenoms: function (): Array<string> {\n      return this.transfer.amount.map((x) => x.denom)\n    },\n    selectedFeeDenoms: function (): Array<string> {\n      return this.transfer.fees.map((x) => x.denom)\n    },\n    fullBalances: function (): any {\n      // return this.balances.map((x) => {\n      //   this.addMapping(x)\n      //   return x\n      // })\n      return null\n    },\n    relayers: function (): Array<Relayer> {\n      return this.$store.hasModule(['common', 'relayers']) ? this.$store.getters['common/relayers/getRelayers'] : []\n    },\n    availableChannels: function (): Array<Relayer> {\n      return this.relayers?.filter((x) => x.status == 'connected') ?? []\n    },\n    depsLoaded: function (): boolean {\n      return this._depsLoaded\n    },\n    validAddress: function (): boolean {\n      let toAddress\n      try {\n        toAddress = !!Bech32.decode(this.transfer.recipient)\n      } catch {\n        toAddress = false\n      }\n      return toAddress\n    },\n  },\n  methods: {\n    parseAmount(amount: string): number {\n      return amount == '' ? 0 : parseInt(amount)\n    },\n    addMapping: async function (balance: Amount): Promise<void> {\n      if (balance.denom.indexOf('ibc/') == 0) {\n        const denom = balance.denom.split('/')\n        const hash = denom[1]\n        this.denomTraces[hash] = await this.$store.dispatch('ibc.applications.transfer.v1/QueryDenomTrace', {\n          options: { subscribe: false, all: false },\n          params: { hash },\n        })\n      }\n    },\n    resetTransaction: function (): void {\n      this.transfer.amount = [{ amount: '', denom: this.balances[0].denom }]\n      this.transfer.recipient = ''\n      this.transfer.memo = ''\n      this.transfer.channel = ''\n      this.transfer.fees = [{ amount: '', denom: this.balances[0].denom }]\n      this.feesOpen = false\n      this.memoOpen = false\n    },\n    resetFees: function (): void {\n      this.transfer.fees = [{ amount: '', denom: this.balances[0].denom }]\n    },\n    addToken: function (): void {\n      this.transfer.amount.push({\n        amount: '',\n        denom: this.nextToAdd?.denom ?? '',\n      })\n    },\n    addFeeToken: function (): void {\n      this.transfer.fees.push({\n        amount: '',\n        denom: this.nextFeeToAdd?.denom ?? '',\n      })\n    },\n    \n    sendTransaction: async function (): Promise<void> {\n      if (this._depsLoaded && this.address) {\n        if (this.validForm && !this.inFlight) {\n          if (this.transfer.channel == '') {\n            const value = {\n              amount: this.transfer.amount,\n              toAddress: this.transfer.recipient,\n              fromAddress: this.bankAddress,\n            }\n\n            this.inFlight = true\n            this.transfer.fees.forEach((x) => {\n              if (x.amount == '') {\n                x.amount = '0'\n              }\n            })\n            try {\n              const txResult = await this.$store.dispatch('irismod.nft/sendMsgTransfernft', {\n                value,\n                fee: this.transfer.fees,\n                memo: this.transfer.memo,\n              })\n              if (txResult && !txResult.code) {\n                this.resetTransaction()\n              }\n            } catch (e) {\n              console.error(e)\n            } finally {\n              this.inFlight = false\n            }\n            await this.$store.dispatch('irismod.nft/QueryOwner', {\n              query: { owner: this.bankAddress, denomId:\"gws\" },\n //             options: { all: true, subscribe: false },\n            })\n          } else {\n            this.inFlight = true\n            this.transfer.fees.forEach((x) => {\n              if (x.amount == '') {\n                x.amount = '0'\n              }\n            })\n            try {\n              const txResult = await this.$store.dispatch('ibc.applications.transfer.v1/sendMsgTransfer', {\n                value: {\n                  sourcePort: 'transfer',\n                  sourceChannel: this.transfer.channel,\n                  sender: this.bankAddress,\n                  receiver: this.transfer.recipient,\n                  timeoutHeight: 0,\n                  timeoutTimestamp: long.fromNumber(new Date().getTime() + 60000 ).multiply(1000000),\n                  token: this.transfer.amount[0],\n                },\n                fee: this.transfer.fees,\n                memo: this.transfer.memo,\n              })\n              if (txResult && !txResult.code) {\n                this.resetTransaction()\n              }\n            } catch (e) {\n              console.error(e)\n            } finally {\n              this.inFlight = false\n            }\n            await this.$store.dispatch('irismod.nft/QueryOwner', {\n              query: { owner: this.bankAddress, denomId:\"gws\" },\n//              options: { all: true, subscribe: false },\n            })\n          }\n        }\n      }\n    },\n  },\n})\n</script>\n"]}]}