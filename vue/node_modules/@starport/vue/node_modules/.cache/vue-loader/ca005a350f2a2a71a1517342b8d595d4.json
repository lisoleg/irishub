{"remainingRequest":"/home/lisoleg/checkers/vue/node_modules/@starport/vue/node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!/home/lisoleg/checkers/vue/node_modules/@starport/vue/src/components/SpTransferList/SpTransferList.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/lisoleg/checkers/vue/node_modules/@starport/vue/src/components/SpTransferList/SpTransferList.vue","mtime":1642435938477},{"path":"/home/lisoleg/checkers/vue/node_modules/@starport/vue/node_modules/cache-loader/dist/cjs.js","mtime":1642436200407},{"path":"/home/lisoleg/checkers/vue/node_modules/@starport/vue/node_modules/thread-loader/dist/cjs.js","mtime":1642436200217},{"path":"/home/lisoleg/checkers/vue/node_modules/@starport/vue/node_modules/babel-loader/lib/index.js","mtime":1642436202647},{"path":"/home/lisoleg/checkers/vue/node_modules/@starport/vue/node_modules/ts-loader/index.js","mtime":1642436203297},{"path":"/home/lisoleg/checkers/vue/node_modules/@starport/vue/node_modules/cache-loader/dist/cjs.js","mtime":1642436200407},{"path":"/home/lisoleg/checkers/vue/node_modules/@starport/vue/node_modules/vue-loader/dist/index.js","mtime":1642436202547}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZScKaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJwppbXBvcnQgeyBkZWNvZGUgfSBmcm9tICdqcy1iYXNlNjQnCmltcG9ydCB7IFRyYW5zYWN0aW9ucywgVHJhbnNhY3Rpb24sIFR4RGVjb2RlZFBhY2tldCB9IGZyb20gJy4uLy4uL3V0aWxzL2ludGVyZmFjZXMnCgpleHBvcnQgaW50ZXJmYWNlIFNwVHJhbnNmZXJMaXN0U3RhdGUgewogIGJhbmtBZGRyZXNzOiBzdHJpbmcKfQpleHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoewogIG5hbWU6ICdTcFRyYW5zZmVyTGlzdCcsCiAgcHJvcHM6IHsgYWRkcmVzczogU3RyaW5nLCByZWZyZXNoOiBCb29sZWFuIH0sCiAgZGF0YTogZnVuY3Rpb24gKCk6IFNwVHJhbnNmZXJMaXN0U3RhdGUgewogICAgcmV0dXJuIHsKICAgICAgYmFua0FkZHJlc3M6ICcnLAogICAgfSBhcyBTcFRyYW5zZmVyTGlzdFN0YXRlCiAgfSwKICBjb21wdXRlZDogewogICAgZGVwc0xvYWRlZDogZnVuY3Rpb24gKCk6IGJvb2xlYW4gewogICAgICByZXR1cm4gdGhpcy5fZGVwc0xvYWRlZAogICAgfSwKICAgIHNlbnRUcmFuc2FjdGlvbnM6IGZ1bmN0aW9uICgpOiBUcmFuc2FjdGlvbnMgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1snY29tbW9uL3RyYW5zZmVycy9nZXRHZXRUeHNFdmVudCddKHsKICAgICAgICBldmVudDogJ3RyYW5zZmVyLnNlbmRlciUzRCUyNycgKyB0aGlzLmJhbmtBZGRyZXNzICsgJyUyNycsCiAgICAgIH0pCiAgICB9LAogICAgcmVjZWl2ZWRUcmFuc2FjdGlvbnM6IGZ1bmN0aW9uICgpOiBUcmFuc2FjdGlvbnMgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1snY29tbW9uL3RyYW5zZmVycy9nZXRHZXRUeHNFdmVudCddKHsKICAgICAgICBldmVudDogJ3RyYW5zZmVyLnJlY2lwaWVudCUzRCUyNycgKyB0aGlzLmJhbmtBZGRyZXNzICsgJyUyNycsCiAgICAgIH0pCiAgICB9LAogICAgdHJhbnNhY3Rpb25zOiBmdW5jdGlvbiAoKTogQXJyYXk8VHJhbnNhY3Rpb24+IHsKICAgICAgY29uc3Qgc2VudDogQXJyYXk8VHJhbnNhY3Rpb24+ID0KICAgICAgICB0aGlzLnNlbnRUcmFuc2FjdGlvbnMudHhzPy5tYXAoKHR4OiBUcmFuc2FjdGlvbiwgaW5kZXg6IG51bWJlcikgPT4gewogICAgICAgICAgdHgucmVzcG9uc2UgPSB0aGlzLnNlbnRUcmFuc2FjdGlvbnMudHhfcmVzcG9uc2VzW2luZGV4XQogICAgICAgICAgcmV0dXJuIHR4CiAgICAgICAgfSkgPz8gW10KICAgICAgY29uc3QgcmVjZWl2ZWQ6IEFycmF5PFRyYW5zYWN0aW9uPiA9CiAgICAgICAgdGhpcy5yZWNlaXZlZFRyYW5zYWN0aW9ucy50eHM/Lm1hcCgodHg6IFRyYW5zYWN0aW9uLCBpbmRleDogbnVtYmVyKSA9PiB7CiAgICAgICAgICB0eC5yZXNwb25zZSA9IHRoaXMucmVjZWl2ZWRUcmFuc2FjdGlvbnMudHhfcmVzcG9uc2VzW2luZGV4XQogICAgICAgICAgcmV0dXJuIHR4CiAgICAgICAgfSkgPz8gW10KICAgICAgcmV0dXJuIFsuLi5zZW50LCAuLi5yZWNlaXZlZF0uc29ydCgoYTogVHJhbnNhY3Rpb24sIGI6IFRyYW5zYWN0aW9uKSA9PiBiLnJlc3BvbnNlLmhlaWdodCAtIGEucmVzcG9uc2UuaGVpZ2h0KQogICAgfSwKICB9LAogIGJlZm9yZUNyZWF0ZTogZnVuY3Rpb24gKCk6IHZvaWQgewogICAgY29uc3QgdnVleE1vZHVsZSA9IFsnY29tbW9uJywgJ3RyYW5zZmVycyddCiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSB2dWV4TW9kdWxlLmxlbmd0aDsgaSsrKSB7CiAgICAgIGNvbnN0IHN1Ym1vZCA9IHZ1ZXhNb2R1bGUuc2xpY2UoMCwgaSkKICAgICAgaWYgKCF0aGlzLiRzdG9yZS5oYXNNb2R1bGUoc3VibW9kKSkgewogICAgICAgIGNvbnNvbGUubG9nKCdNb2R1bGUgYGNvbW1vbi50cmFuc2ZlcnNgIGhhcyBub3QgYmVlbiByZWdpc3RlcmVkIScpCiAgICAgICAgdGhpcy5fZGVwc0xvYWRlZCA9IGZhbHNlCiAgICAgICAgYnJlYWsKICAgICAgfQogICAgfQogIH0sCiAgY3JlYXRlZDogYXN5bmMgZnVuY3Rpb24gKCk6IFByb21pc2U8dm9pZD4gewogICAgaWYgKHRoaXMuX2RlcHNMb2FkZWQpIHsKICAgICAgdGhpcy5iYW5rQWRkcmVzcyA9IHRoaXMuYWRkcmVzcyA/PyAnJwogICAgICBpZiAodGhpcy5iYW5rQWRkcmVzcyAhPSAnJykgewogICAgICAgIGF3YWl0IHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdjb21tb24vdHJhbnNmZXJzL1NlcnZpY2VHZXRUeHNFdmVudCcsIHsKICAgICAgICAgIHN1YnNjcmliZTogdHJ1ZSwKICAgICAgICAgIGV2ZW50OiAndHJhbnNmZXIuc2VuZGVyJTNEJTI3JyArIHRoaXMuYmFua0FkZHJlc3MgKyAnJTI3JywKICAgICAgICB9KQogICAgICAgIGF3YWl0IHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdjb21tb24vdHJhbnNmZXJzL1NlcnZpY2VHZXRUeHNFdmVudCcsIHsKICAgICAgICAgIHN1YnNjcmliZTogdHJ1ZSwKICAgICAgICAgIGV2ZW50OiAndHJhbnNmZXIucmVjaXBpZW50JTNEJTI3JyArIHRoaXMuYmFua0FkZHJlc3MgKyAnJTI3JywKICAgICAgICB9KQogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRBbW91bnRzOiBmdW5jdGlvbiAodHg6IFRyYW5zYWN0aW9uKSB7CiAgICAgIHJldHVybiB0eC5ib2R5Lm1lc3NhZ2VzWzBdPy5hbW91bnQgPz8gW10KICAgIH0sCiAgICBnZXRGbXRUaW1lOiBmdW5jdGlvbiAodGltZTogc3RyaW5nIHwgdW5kZWZpbmVkKTogc3RyaW5nIHsKICAgICAgY29uc3QgbW9tZW50VGltZSA9IGRheWpzKHRpbWUpCiAgICAgIHJldHVybiBtb21lbnRUaW1lLmZvcm1hdCgnRCBNTU0sIFlZWVknKQogICAgfSwKICAgIGdldERlY29kZWQ6IGZ1bmN0aW9uIChwYWNrZXQ6IHN0cmluZyk6IFR4RGVjb2RlZFBhY2tldCB7CiAgICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlKHBhY2tldCkpCiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICByZXR1cm4ge30KICAgICAgfQogICAgfSwKICAgIGdldFR4VGV4dDogZnVuY3Rpb24gKHR4OiBUcmFuc2FjdGlvbik6IHN0cmluZyB7CiAgICAgIGxldCB0ZXh0ID0gJycKICAgICAgaWYgKHR4LnJlc3BvbnNlLmNvZGUgIT0gMCkgewogICAgICAgIHRleHQgPSAnKOWksei0pSkgJwogICAgICB9CiAgICAgIGlmICh0eD8uYm9keS5tZXNzYWdlcy5sZW5ndGggPiAxKSB7CiAgICAgICAgdGV4dCA9IHRleHQgKyAn5aSa5Liq5raI5oGvJwogICAgICB9IGVsc2UgewogICAgICAgIGlmICgKICAgICAgICAgIHR4LmJvZHkubWVzc2FnZXNbMF1bJ0B0eXBlJ10gPT0gJy9jb3Ntb3MuYmFuay52MWJldGExLk1zZ1NlbmQnIHx8CiAgICAgICAgICB0eC5ib2R5Lm1lc3NhZ2VzWzBdWydAdHlwZSddID09ICcvaWJjLmFwcGxpY2F0aW9ucy50cmFuc2Zlci52MS5Nc2dUcmFuc2ZlcicKICAgICAgICApIHsKICAgICAgICAgIGlmICh0eC5ib2R5Lm1lc3NhZ2VzWzBdLmZyb21fYWRkcmVzcyA9PSB0aGlzLmJhbmtBZGRyZXNzKSB7CiAgICAgICAgICAgIHRleHQgPSB0ZXh0ICsgJ+i9rOe7mScKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eC5ib2R5Lm1lc3NhZ2VzWzBdLnRvX2FkZHJlc3MgPT0gdGhpcy5iYW5rQWRkcmVzcykgewogICAgICAgICAgICB0ZXh0ID0gdGV4dCArICfmlLbliLAnCiAgICAgICAgICB9CiAgICAgICAgICBpZiAodHguYm9keS5tZXNzYWdlc1swXS5zZW5kZXIgPT0gdGhpcy5iYW5rQWRkcmVzcykgewogICAgICAgICAgICB0ZXh0ID0gdGV4dCArICdJQkPovaznu5knCiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGxldCBwYWNrZXQ6IFR4RGVjb2RlZFBhY2tldCA9IHsgc2VuZGVyOiAnJywgcmVjZWl2ZXI6ICcnIH0KICAgICAgICAgIHN3aXRjaCAodHguYm9keS5tZXNzYWdlc1swXVsnQHR5cGUnXSkgewogICAgICAgICAgICBjYXNlICcvaWJjLmNvcmUuY2hhbm5lbC52MS5Nc2dDaGFubmVsT3BlbkFjayc6CiAgICAgICAgICAgICAgdGV4dCA9IHRleHQgKyAnSUJDIENoYW5uZWwgT3BlbiBBY2snCiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAnL2liYy5jb3JlLmNoYW5uZWwudjEuTXNnQ2hhbm5lbE9wZW5Db25maXJtJzoKICAgICAgICAgICAgICB0ZXh0ID0gdGV4dCArICdJQkMgQ2hhbm5lbCBPcGVuIENvbmZpcm0nCiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAnL2liYy5jb3JlLmNoYW5uZWwudjEuTXNnQ2hhbm5lbE9wZW5UcnknOgogICAgICAgICAgICAgIHRleHQgPSB0ZXh0ICsgJ0lCQyBDaGFubmVsIE9wZW4gVHJ5JwogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJy9pYmMuY29yZS5jaGFubmVsLnYxLk1zZ1JlY3ZQYWNrZXQnOgogICAgICAgICAgICAgIHBhY2tldCA9IHRoaXMuZ2V0RGVjb2RlZCh0eC5ib2R5Lm1lc3NhZ2VzWzBdLnBhY2tldD8uZGF0YSA/PyAnJykKCiAgICAgICAgICAgICAgaWYgKHBhY2tldC5yZWNlaXZlciA9PSB0aGlzLmJhbmtBZGRyZXNzKSB7CiAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dCArICdJQkPmlLbliLAnCiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0ICsgJ0lCQyBSZWN2IFBhY2tldCcKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJy9pYmMuY29yZS5jaGFubmVsLnYxLk1zZ0Fja25vd2xlZGdlbWVudCc6CiAgICAgICAgICAgICAgdGV4dCA9IHRleHQgKyAnSUJDIEFjayBQYWNrZXQnCiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAnL2liYy5jb3JlLmNoYW5uZWwudjEuTXNnVGltZW91dCc6CiAgICAgICAgICAgICAgdGV4dCA9IHRleHQgKyAnSUJDIFRpbWVvdXQgUGFja2V0JwogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJy9pYmMuY29yZS5jaGFubmVsLnYxLk1zZ0NoYW5uZWxPcGVuSW5pdCc6CiAgICAgICAgICAgICAgdGV4dCA9IHRleHQgKyAnSUJDIENoYW5uZWwgT3BlbiBJbml0JwogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJy9pYmMuY29yZS5jbGllbnQudjEuTXNnQ3JlYXRlQ2xpZW50JzoKICAgICAgICAgICAgICB0ZXh0ID0gdGV4dCArICdJQkMgQ2xpZW50IENyZWF0ZScKICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjYXNlICcvaWJjLmNvcmUuY2xpZW50LnYxLk1zZ1VwZGF0ZUNsaWVudCc6CiAgICAgICAgICAgICAgdGV4dCA9IHRleHQgKyAnSUJDIENsaWVudCBVcGRhdGUnCiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAnL2liYy5jb3JlLmNvbm5lY3Rpb24udjEuTXNnQ29ubmVjdGlvbk9wZW5BY2snOgogICAgICAgICAgICAgIHRleHQgPSB0ZXh0ICsgJ0lCQyBDb25uZWN0aW9uIE9wZW4gQWNrJwogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJy9pYmMuY29yZS5jb25uZWN0aW9uLnYxLk1zZ0Nvbm5lY3Rpb25PcGVuSW5pdCc6CiAgICAgICAgICAgICAgdGV4dCA9IHRleHQgKyAnSUJDIENvbm5lY3Rpb24gT3BlbiBJbml0JwogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJy9pYmMuY29yZS5jb25uZWN0aW9uLnYxLk1zZ0Nvbm5lY3Rpb25PcGVuQ29uZmlybSc6CiAgICAgICAgICAgICAgdGV4dCA9IHRleHQgKyAnSUJDIENvbm5lY3Rpb24gT3BlbiBDb25maXJtJwogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJy9pYmMuY29yZS5jb25uZWN0aW9uLnYxLk1zZ0Nvbm5lY3Rpb25PcGVuVHJ5JzoKICAgICAgICAgICAgICB0ZXh0ID0gdGV4dCArICdJQkMgQ29ubmVjdGlvbiBPcGVuIFRyeScKICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHRleHQgPSB0ZXh0ICsgJ+a2iOaBrycKICAgICAgICAgICAgICBicmVhawogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdGV4dAogICAgfSwKICAgIGdldFR4RGV0YWlsczogZnVuY3Rpb24gKHR4OiBUcmFuc2FjdGlvbik6IHN0cmluZyB7CiAgICAgIGxldCB0ZXh0ID0gJycKICAgICAgaWYgKHR4LmJvZHkubWVzc2FnZXMubGVuZ3RoID4gMSkgewogICAgICAgIHRleHQgPSB0ZXh0ICsgJy0nCiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKAogICAgICAgICAgdHguYm9keS5tZXNzYWdlc1swXVsnQHR5cGUnXSA9PSAnL2Nvc21vcy5iYW5rLnYxYmV0YTEuTXNnU2VuZCcgfHwKICAgICAgICAgIHR4LmJvZHkubWVzc2FnZXNbMF1bJ0B0eXBlJ10gPT0gJy9pYmMuYXBwbGljYXRpb25zLnRyYW5zZmVyLnYxLk1zZ1RyYW5zZmVyJwogICAgICAgICkgewogICAgICAgICAgaWYgKHR4LmJvZHkubWVzc2FnZXNbMF0uZnJvbV9hZGRyZXNzID09IHRoaXMuYmFua0FkZHJlc3MpIHsKICAgICAgICAgICAgdGV4dCA9IHRleHQgKyB0eC5ib2R5Lm1lc3NhZ2VzWzBdLnRvX2FkZHJlc3MKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eC5ib2R5Lm1lc3NhZ2VzWzBdLnRvX2FkZHJlc3MgPT0gdGhpcy5iYW5rQWRkcmVzcykgewogICAgICAgICAgICB0ZXh0ID0gdGV4dCArIHR4LmJvZHkubWVzc2FnZXNbMF0uZnJvbV9hZGRyZXNzCiAgICAgICAgICB9CiAgICAgICAgICBpZiAodHguYm9keS5tZXNzYWdlc1swXS5zZW5kZXIgPT0gdGhpcy5iYW5rQWRkcmVzcykgewogICAgICAgICAgICBjb25zdCBjaGFpbiA9IHRoaXMuJHN0b3JlLmdldHRlcnNbJ2NvbW1vbi9yZWxheWVycy9jaGFpbkZyb21DaGFubmVsJ10odHguYm9keS5tZXNzYWdlc1swXS5zb3VyY2VfY2hhbm5lbCkKICAgICAgICAgICAgdGV4dCA9IHRleHQgKyBjaGFpbiArICc6JyArIHR4LmJvZHkubWVzc2FnZXNbMF0ucmVjZWl2ZXIKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eC5ib2R5Lm1lc3NhZ2VzWzBdLnJlY2VpdmVyID09IHRoaXMuYmFua0FkZHJlc3MpIHsKICAgICAgICAgICAgY29uc3QgY2hhaW4gPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWydjb21tb24vcmVsYXllcnMvY2hhaW5Ub0NoYW5uZWwnXSh0eC5ib2R5Lm1lc3NhZ2VzWzBdLnNvdXJjZV9jaGFubmVsKQogICAgICAgICAgICB0ZXh0ID0gdGV4dCArIGNoYWluICsgJzonICsgdHguYm9keS5tZXNzYWdlc1swXS5yZWNlaXZlcgogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBsZXQgcGFja2V0CiAgICAgICAgICBzd2l0Y2ggKHR4LmJvZHkubWVzc2FnZXNbMF1bJ0B0eXBlJ10pIHsKICAgICAgICAgICAgY2FzZSAnL2liYy5jb3JlLmNoYW5uZWwudjEuTXNnQ2hhbm5lbE9wZW5BY2snOgogICAgICAgICAgICAgIHRleHQgPSB0ZXh0ICsgdHguYm9keS5tZXNzYWdlc1swXS5wb3J0X2lkICsgJyAvICcgKyB0eC5ib2R5Lm1lc3NhZ2VzWzBdLmNoYW5uZWxfaWQKICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjYXNlICcvaWJjLmNvcmUuY2hhbm5lbC52MS5Nc2dDaGFubmVsT3BlbkNvbmZpcm0nOgogICAgICAgICAgICAgIHRleHQgPSB0ZXh0ICsgdHguYm9keS5tZXNzYWdlc1swXS5wb3J0X2lkICsgJyAvICcgKyB0eC5ib2R5Lm1lc3NhZ2VzWzBdLmNoYW5uZWxfaWQKICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjYXNlICcvaWJjLmNvcmUuY2hhbm5lbC52MS5Nc2dDaGFubmVsT3BlblRyeSc6CiAgICAgICAgICAgICAgdGV4dCA9CiAgICAgICAgICAgICAgICB0ZXh0ICsKICAgICAgICAgICAgICAgIHR4LmJvZHkubWVzc2FnZXNbMF0ucG9ydF9pZCArCiAgICAgICAgICAgICAgICAnIC8gJyArCiAgICAgICAgICAgICAgICB0eC5ib2R5Lm1lc3NhZ2VzWzBdLnByZXZpb3VzX2NoYW5uZWxfaWQgKwogICAgICAgICAgICAgICAgJyAvICcgKwogICAgICAgICAgICAgICAgdHguYm9keS5tZXNzYWdlc1swXS5jb3VudGVycGFydHlfdmVyc2lvbgogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJy9pYmMuY29yZS5jaGFubmVsLnYxLk1zZ1JlY3ZQYWNrZXQnOgogICAgICAgICAgICAgIHBhY2tldCA9IHRoaXMuZ2V0RGVjb2RlZCh0eC5ib2R5Lm1lc3NhZ2VzWzBdLnBhY2tldD8uZGF0YSA/PyAnJykKICAgICAgICAgICAgICBpZiAocGFja2V0LnNlbmRlciA9PSB0aGlzLmJhbmtBZGRyZXNzKSB7CiAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dCArICdJQkM6JyArIHBhY2tldC5yZWNlaXZlcgogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAocGFja2V0LnJlY2VpdmVyID09IHRoaXMuYmFua0FkZHJlc3MpIHsKICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQgKyAnSUJDOicgKyBwYWNrZXQuc2VuZGVyCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dCArICdJQkMgUmVjdiBQYWNrZXQnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJy9pYmMuY29yZS5jaGFubmVsLnYxLk1zZ0Fja25vd2xlZGdlbWVudCc6CiAgICAgICAgICAgICAgdGV4dCA9CiAgICAgICAgICAgICAgICB0ZXh0ICsKICAgICAgICAgICAgICAgIHR4LmJvZHkubWVzc2FnZXNbMF0ucGFja2V0Py5zb3VyY2VfcG9ydCArCiAgICAgICAgICAgICAgICAnOicgKwogICAgICAgICAgICAgICAgdHguYm9keS5tZXNzYWdlc1swXS5wYWNrZXQ/LnNvdXJjZV9jaGFubmVsICsKICAgICAgICAgICAgICAgICcgPC0+ICcgKwogICAgICAgICAgICAgICAgdHguYm9keS5tZXNzYWdlc1swXS5wYWNrZXQ/LmRlc3RpbmF0aW9uX3BvcnQgKwogICAgICAgICAgICAgICAgJzonICsKICAgICAgICAgICAgICAgIHR4LmJvZHkubWVzc2FnZXNbMF0ucGFja2V0Py5kZXN0aW5hdGlvbl9jaGFubmVsCiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAnL2liYy5jb3JlLmNoYW5uZWwudjEuTXNnVGltZW91dCc6CiAgICAgICAgICAgICAgdGV4dCA9IHRleHQgKyAnSUJDIFRpbWVvdXQgUGFja2V0JwogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJy9pYmMuY29yZS5jaGFubmVsLnYxLk1zZ0NoYW5uZWxPcGVuSW5pdCc6CiAgICAgICAgICAgICAgdGV4dCA9IHRleHQgKyB0eC5ib2R5Lm1lc3NhZ2VzWzBdLnBvcnRfaWQKICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjYXNlICcvaWJjLmNvcmUuY2xpZW50LnYxLk1zZ0NyZWF0ZUNsaWVudCc6CiAgICAgICAgICAgICAgdGV4dCA9IHRleHQgKyB0eC5ib2R5Lm1lc3NhZ2VzWzBdLnNpZ25lcgogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJy9pYmMuY29yZS5jbGllbnQudjEuTXNnVXBkYXRlQ2xpZW50JzoKICAgICAgICAgICAgICB0ZXh0ID0gdGV4dCArIHR4LmJvZHkubWVzc2FnZXNbMF0uY2xpZW50X2lkCiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAnL2liYy5jb3JlLmNvbm5lY3Rpb24udjEuTXNnQ29ubmVjdGlvbk9wZW5BY2snOgogICAgICAgICAgICAgIHRleHQgPSB0ZXh0ICsgdHguYm9keS5tZXNzYWdlc1swXS5jb25uZWN0aW9uX2lkICsgJyAvICcgKyB0eC5ib2R5Lm1lc3NhZ2VzWzBdLmNvdW50ZXJwYXJ0eV9jb25uZWN0aW9uX2lkCiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAnL2liYy5jb3JlLmNvbm5lY3Rpb24udjEuTXNnQ29ubmVjdGlvbk9wZW5Jbml0JzoKICAgICAgICAgICAgICB0ZXh0ID0gdGV4dCArIHR4LmJvZHkubWVzc2FnZXNbMF0uY2xpZW50X2lkCiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAnL2liYy5jb3JlLmNvbm5lY3Rpb24udjEuTXNnQ29ubmVjdGlvbk9wZW5Db25maXJtJzoKICAgICAgICAgICAgICB0ZXh0ID0gdGV4dCArIHR4LmJvZHkubWVzc2FnZXNbMF0uY29ubmVjdGlvbl9pZAogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJy9pYmMuY29yZS5jb25uZWN0aW9uLnYxLk1zZ0Nvbm5lY3Rpb25PcGVuVHJ5JzoKICAgICAgICAgICAgICB0ZXh0ID0gdGV4dCArIHR4LmJvZHkubWVzc2FnZXNbMF0uY2xpZW50X2lkICsgJyAvICcgKyB0eC5ib2R5Lm1lc3NhZ2VzWzBdLnByZXZpb3VzX2Nvbm5lY3Rpb25faWQKICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHRleHQgPSB0ZXh0ICsgJ01lc3NhZ2UnCiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHRleHQKICAgIH0sCiAgfSwKICB3YXRjaDogewogICAgYWRkcmVzczogZnVuY3Rpb24gKG5ld0FkZHIsIG9sZEFkZHIpOiB2b2lkIHsKICAgICAgaWYgKG5ld0FkZHIgIT0gb2xkQWRkciAmJiB0aGlzLl9kZXBzTG9hZGVkKSB7CiAgICAgICAgdGhpcy5iYW5rQWRkcmVzcyA9IG5ld0FkZHIKICAgICAgICBpZiAodGhpcy5iYW5rQWRkcmVzcyAhPSAnJykgewogICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2NvbW1vbi90cmFuc2ZlcnMvU2VydmljZUdldFR4c0V2ZW50JywgewogICAgICAgICAgICBzdWJzY3JpYmU6IHRydWUsCiAgICAgICAgICAgIGV2ZW50OiAndHJhbnNmZXIuc2VuZGVyJTNEJTI3JyArIHRoaXMuYmFua0FkZHJlc3MgKyAnJTI3JywKICAgICAgICAgIH0pCiAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnY29tbW9uL3RyYW5zZmVycy9TZXJ2aWNlR2V0VHhzRXZlbnQnLCB7CiAgICAgICAgICAgIHN1YnNjcmliZTogdHJ1ZSwKICAgICAgICAgICAgZXZlbnQ6ICd0cmFuc2Zlci5yZWNpcGllbnQlM0QlMjcnICsgdGhpcy5iYW5rQWRkcmVzcyArICclMjcnLAogICAgICAgICAgfSkKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgfSwKfSkK"},{"version":3,"sources":["/home/lisoleg/checkers/vue/node_modules/@starport/vue/src/components/SpTransferList/SpTransferList.vue"],"names":[],"mappings":"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C,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAC3D,CAAC;IACH,CAAC;IACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9D,CAAC;IACH,CAAC;IACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MAC5C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;UACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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AC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACrC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IACzC,CAAC;IACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACtD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC;IACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CA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D,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACpC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC3C,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;cACnC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC/C,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACvC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC3C,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;cACnC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACvC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;cAE/D,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBACvC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACtB,EAAE,CAAC,CAAC,CAAC,EAAE;gBACL,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAChC;;cAEA,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC5C,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC7B,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACpC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACjC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC5C,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;cACpC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACxC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAChC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACxC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAChC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACjD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;cACtC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAClD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;cACvC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACrD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC1C,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACjD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;cACtC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACL,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;cACjB,CAAC,CAAC,CAAC,CAAC;UACR;QACF;MACF;MACA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACZ,CAAC;IACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MAC/C,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;QAC/B,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MAClB,EAAE,CAAC,CAAC,CAAC,EAAE;QACL,CAAC,EAAE;UACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;UAChxD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC7C;UACA,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACtD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC/C;UACA,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YAClxG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACzD;UACA,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACptG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACzD;QACF,EAAE,CAAC,CAAC,CAAC,EAAE;UACL,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;UACT,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACpC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC3C,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACjF,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC/C,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACjF,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC3C,CAAC,CAAC,CAAC,EAAE;gBACH,CAAC,CAAC,CAAC,EAAE;gBACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC5B,EAAE,EAAE,EAAE;gBACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBACxC,EAAE,EAAE,EAAE;gBACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACzC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACvC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;cAC/D,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBACrC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC5C,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACxC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACxC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACvC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACxC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC1C,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACjD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACvG,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAClD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC1C,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACrD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC9C,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACjD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC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","file":"/home/lisoleg/checkers/vue/node_modules/@starport/vue/src/components/SpTransferList/SpTransferList.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"sp-component sp-transfer-list\" v-if=\"depsLoaded\">\n    <div class=\"sp-transfer-list__header sp-component-title\">\n      <h3>交易列表</h3>\n      <span>|</span>\n      <span>最近交易</span>\n    </div>\n    <table class=\"sp-transfer-list__table sp-box sp-shadow\" v-if=\"address && transactions.length > 0\">\n      <thead>\n        <tr>\n          <th class=\"sp-transfer-list__status\">种类</th>\n          <th class=\"sp-transfer-list__table__address\">地址/详情</th>\n          <th class=\"sp-transfer-list__table__amount\">数量</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"tx in transactions\" v-bind:key=\"tx.response.hash\">\n          <td class=\"sp-transfer-list__status\">\n            <div class=\"sp-transfer-list__status__wrapper\">\n              <div\n                class=\"sp-transfer-list__status__icon\"\n                :class=\"{\n                  'sp-transfer-list__status__icon__failed': tx.response.code != 0,\n                  'sp-transfer-list__status__icon__sent':\n                    tx.response.code == 0 &&\n                    (tx.body.messages[0].from_address == bankAddress || tx.body.messages[0].sender == bankAddress),\n                  'sp-transfer-list__status__icon__received':\n                    tx.response.code == 0 &&\n                    (tx.body.messages[0].to_address == bankAddress ||\n                      (tx.body.messages[0]['@type'] == '/ibc.core.channel.v1.MsgRecvPacket' &&\n                        getDecoded(tx.body.messages[0].packet?.data ?? '')?.receiver == bankAddress)),\n                  'sp-transfer-list__status__icon__success':\n                    tx.response.code == 0 &&\n                    tx.body.messages[0].to_address != bankAddress &&\n                    tx.body.messages[0].from_address != bankAddress &&\n                    tx.body.messages[0].sender != bankAddress &&\n                    !(\n                      tx.body.messages[0]['@type'] == '/ibc.core.channel.v1.MsgRecvPacket' &&\n                      getDecoded(tx.body.messages[0].packet?.data ?? '')?.receiver == bankAddress\n                    ),\n                }\"\n              >\n                <span\n                  class=\"sp-icon\"\n                  :class=\"{\n                    'sp-icon-Close': tx.response.code != 0,\n                    'sp-icon-UpArrow':\n                      tx.response.code == 0 &&\n                      (tx.body.messages[0].from_address == bankAddress || tx.body.messages[0].sender == bankAddress),\n                    'sp-icon-DownArrow':\n                      tx.response.code == 0 &&\n                      (tx.body.messages[0].to_address == bankAddress ||\n                        (tx.body.messages[0]['@type'] == '/ibc.core.channel.v1.MsgRecvPacket' &&\n                          getDecoded(tx.body.messages[0].packet?.data ?? '')?.receiver == bankAddress)),\n                    'sp-icon-Docs':\n                      tx.response.code == 0 &&\n                      tx.body.messages[0].to_address != bankAddress &&\n                      tx.body.messages[0].from_address != bankAddress &&\n                      tx.body.messages[0].sender != bankAddress &&\n                      !(\n                        tx.body.messages[0]['@type'] == '/ibc.core.channel.v1.MsgRecvPacket' &&\n                        getDecoded(tx.body.messages[0].packet?.data ?? '')?.receiver == bankAddress\n                      ),\n                  }\"\n                />\n              </div>\n              <div class=\"sp-transfer-list__status__action\">\n                <div class=\"sp-transfer-list__status__action__text\">\n                  {{ getTxText(tx) }}\n                </div>\n                <div class=\"sp-transfer-list__status__action__date\">\n                  {{ getFmtTime(tx.response.timestamp) }}\n                </div>\n              </div>\n            </div>\n          </td>\n          <td class=\"sp-transfer-list__table__address\">\n            {{ getTxDetails(tx) }}\n          </td>\n          <td\n            class=\"sp-transfer-list__table__amount\"\n            v-if=\"tx.body.messages[0]['@type'] == '/cosmos.bank.v1beta1.MsgSend'\"\n          >\n            <div v-for=\"(token, index) in getAmounts(tx)\" v-bind:key=\"'am' + index\">\n              {{\n                tx.body.messages[0].from_address == bankAddress\n                  ? '-' + token.amount + ' ' + token.denom.toUpperCase()\n                  : '+' + token.amount + ' ' + token.denom.toUpperCase()\n              }}\n            </div>\n          </td>\n          <td\n            class=\"sp-transfer-list__table__amount\"\n            v-else-if=\"tx.body.messages[0]['@type'] == '/ibc.applications.transfer.v1.MsgTransfer'\"\n          >\n            <div>\n              {{\n                tx.body.messages[0].sender == bankAddress\n                  ? '-' + tx.body.messages[0].token?.amount + ' ' + tx.body.messages[0].token?.denom.toUpperCase()\n                  : '+' + tx.body.messages[0].token?.amount + ' ' + tx.body.messages[0].token?.denom.toUpperCase()\n              }}\n            </div>\n          </td>\n          <td\n            class=\"sp-transfer-list__table__amount\"\n            v-else-if=\"tx.body.messages[0]['@type'] == '/ibc.core.channel.v1.MsgRecvPacket'\"\n          >\n            <div>\n              {{\n                getDecoded(tx.body.messages[0].packet?.data ?? '').receiver == bankAddress\n                  ? '+' +\n                    getDecoded(tx.body.messages[0].packet?.data ?? '').amount +\n                    ' IBC/' +\n                    tx.body.messages[0].packet?.destination_port.toUpperCase() +\n                    '/' +\n                    tx.body.messages[0].packet?.destination_channel.toUpperCase() +\n                    '/' +\n                    getDecoded(tx.body.messages[0].packet?.data ?? '')?.denom?.toUpperCase()\n                  : '-' +\n                    getDecoded(tx.body.messages[0].packet?.data ?? '').amount +\n                    ' IBC/' +\n                    tx.body.messages[0].packet?.destination_port.toUpperCase() +\n                    '/' +\n                    tx.body.messages[0].packet?.destination_channel.toUpperCase() +\n                    '/' +\n                    getDecoded(tx.body.messages[0].packet?.data ?? '')?.denom?.toUpperCase()\n              }}\n            </div>\n          </td>\n          <td class=\"sp-transfer-list__table__amount\" v-else></td>\n        </tr>\n      </tbody>\n    </table>\n\n    <table class=\"sp-transfer-list__table sp-box sp-shadow\" v-else>\n      <tbody>\n        <tr>\n          <td class=\"sp-transfer-list__status\">\n            <div class=\"sp-transfer-list__status__wrapper\">\n              <div class=\"sp-transfer-list__status__icon sp-transfer-list__status__icon__empty\">\n                <span class=\"sp-icon sp-icon-Transactions\" />\n              </div>\n              <div class=\"sp-transfer-list__status__action\">\n                <div class=\"sp-transfer-list__status__action__text\">尚未有过交易</div>\n                <div class=\"sp-transfer-list__status__action__date\" v-if=\"!address\">\n                  Add or unlock a wallet to see recent transactions\n                </div>\n              </div>\n            </div>\n          </td>\n          <td class=\"sp-transfer-list__table__address\"></td>\n          <td class=\"sp-transfer-list__table__amount\"></td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport dayjs from 'dayjs'\nimport { decode } from 'js-base64'\nimport { Transactions, Transaction, TxDecodedPacket } from '../../utils/interfaces'\n\nexport interface SpTransferListState {\n  bankAddress: string\n}\nexport default defineComponent({\n  name: 'SpTransferList',\n  props: { address: String, refresh: Boolean },\n  data: function (): SpTransferListState {\n    return {\n      bankAddress: '',\n    } as SpTransferListState\n  },\n  computed: {\n    depsLoaded: function (): boolean {\n      return this._depsLoaded\n    },\n    sentTransactions: function (): Transactions {\n      return this.$store.getters['common/transfers/getGetTxsEvent']({\n        event: 'transfer.sender%3D%27' + this.bankAddress + '%27',\n      })\n    },\n    receivedTransactions: function (): Transactions {\n      return this.$store.getters['common/transfers/getGetTxsEvent']({\n        event: 'transfer.recipient%3D%27' + this.bankAddress + '%27',\n      })\n    },\n    transactions: function (): Array<Transaction> {\n      const sent: Array<Transaction> =\n        this.sentTransactions.txs?.map((tx: Transaction, index: number) => {\n          tx.response = this.sentTransactions.tx_responses[index]\n          return tx\n        }) ?? []\n      const received: Array<Transaction> =\n        this.receivedTransactions.txs?.map((tx: Transaction, index: number) => {\n          tx.response = this.receivedTransactions.tx_responses[index]\n          return tx\n        }) ?? []\n      return [...sent, ...received].sort((a: Transaction, b: Transaction) => b.response.height - a.response.height)\n    },\n  },\n  beforeCreate: function (): void {\n    const vuexModule = ['common', 'transfers']\n    for (let i = 1; i <= vuexModule.length; i++) {\n      const submod = vuexModule.slice(0, i)\n      if (!this.$store.hasModule(submod)) {\n        console.log('Module `common.transfers` has not been registered!')\n        this._depsLoaded = false\n        break\n      }\n    }\n  },\n  created: async function (): Promise<void> {\n    if (this._depsLoaded) {\n      this.bankAddress = this.address ?? ''\n      if (this.bankAddress != '') {\n        await this.$store.dispatch('common/transfers/ServiceGetTxsEvent', {\n          subscribe: true,\n          event: 'transfer.sender%3D%27' + this.bankAddress + '%27',\n        })\n        await this.$store.dispatch('common/transfers/ServiceGetTxsEvent', {\n          subscribe: true,\n          event: 'transfer.recipient%3D%27' + this.bankAddress + '%27',\n        })\n      }\n    }\n  },\n  methods: {\n    getAmounts: function (tx: Transaction) {\n      return tx.body.messages[0]?.amount ?? []\n    },\n    getFmtTime: function (time: string | undefined): string {\n      const momentTime = dayjs(time)\n      return momentTime.format('D MMM, YYYY')\n    },\n    getDecoded: function (packet: string): TxDecodedPacket {\n      try {\n        return JSON.parse(decode(packet))\n      } catch (e) {\n        return {}\n      }\n    },\n    getTxText: function (tx: Transaction): string {\n      let text = ''\n      if (tx.response.code != 0) {\n        text = '(失败) '\n      }\n      if (tx?.body.messages.length > 1) {\n        text = text + '多个消息'\n      } else {\n        if (\n          tx.body.messages[0]['@type'] == '/cosmos.bank.v1beta1.MsgSend' ||\n          tx.body.messages[0]['@type'] == '/ibc.applications.transfer.v1.MsgTransfer'\n        ) {\n          if (tx.body.messages[0].from_address == this.bankAddress) {\n            text = text + '转给'\n          }\n          if (tx.body.messages[0].to_address == this.bankAddress) {\n            text = text + '收到'\n          }\n          if (tx.body.messages[0].sender == this.bankAddress) {\n            text = text + 'IBC转给'\n          }\n        } else {\n          let packet: TxDecodedPacket = { sender: '', receiver: '' }\n          switch (tx.body.messages[0]['@type']) {\n            case '/ibc.core.channel.v1.MsgChannelOpenAck':\n              text = text + 'IBC Channel Open Ack'\n              break\n            case '/ibc.core.channel.v1.MsgChannelOpenConfirm':\n              text = text + 'IBC Channel Open Confirm'\n              break\n            case '/ibc.core.channel.v1.MsgChannelOpenTry':\n              text = text + 'IBC Channel Open Try'\n              break\n            case '/ibc.core.channel.v1.MsgRecvPacket':\n              packet = this.getDecoded(tx.body.messages[0].packet?.data ?? '')\n\n              if (packet.receiver == this.bankAddress) {\n                text = text + 'IBC收到'\n              } else {\n                text = text + 'IBC Recv Packet'\n              }\n\n              break\n            case '/ibc.core.channel.v1.MsgAcknowledgement':\n              text = text + 'IBC Ack Packet'\n              break\n            case '/ibc.core.channel.v1.MsgTimeout':\n              text = text + 'IBC Timeout Packet'\n              break\n            case '/ibc.core.channel.v1.MsgChannelOpenInit':\n              text = text + 'IBC Channel Open Init'\n              break\n            case '/ibc.core.client.v1.MsgCreateClient':\n              text = text + 'IBC Client Create'\n              break\n            case '/ibc.core.client.v1.MsgUpdateClient':\n              text = text + 'IBC Client Update'\n              break\n            case '/ibc.core.connection.v1.MsgConnectionOpenAck':\n              text = text + 'IBC Connection Open Ack'\n              break\n            case '/ibc.core.connection.v1.MsgConnectionOpenInit':\n              text = text + 'IBC Connection Open Init'\n              break\n            case '/ibc.core.connection.v1.MsgConnectionOpenConfirm':\n              text = text + 'IBC Connection Open Confirm'\n              break\n            case '/ibc.core.connection.v1.MsgConnectionOpenTry':\n              text = text + 'IBC Connection Open Try'\n              break\n            default:\n              text = text + '消息'\n              break\n          }\n        }\n      }\n      return text\n    },\n    getTxDetails: function (tx: Transaction): string {\n      let text = ''\n      if (tx.body.messages.length > 1) {\n        text = text + '-'\n      } else {\n        if (\n          tx.body.messages[0]['@type'] == '/cosmos.bank.v1beta1.MsgSend' ||\n          tx.body.messages[0]['@type'] == '/ibc.applications.transfer.v1.MsgTransfer'\n        ) {\n          if (tx.body.messages[0].from_address == this.bankAddress) {\n            text = text + tx.body.messages[0].to_address\n          }\n          if (tx.body.messages[0].to_address == this.bankAddress) {\n            text = text + tx.body.messages[0].from_address\n          }\n          if (tx.body.messages[0].sender == this.bankAddress) {\n            const chain = this.$store.getters['common/relayers/chainFromChannel'](tx.body.messages[0].source_channel)\n            text = text + chain + ':' + tx.body.messages[0].receiver\n          }\n          if (tx.body.messages[0].receiver == this.bankAddress) {\n            const chain = this.$store.getters['common/relayers/chainToChannel'](tx.body.messages[0].source_channel)\n            text = text + chain + ':' + tx.body.messages[0].receiver\n          }\n        } else {\n          let packet\n          switch (tx.body.messages[0]['@type']) {\n            case '/ibc.core.channel.v1.MsgChannelOpenAck':\n              text = text + tx.body.messages[0].port_id + ' / ' + tx.body.messages[0].channel_id\n              break\n            case '/ibc.core.channel.v1.MsgChannelOpenConfirm':\n              text = text + tx.body.messages[0].port_id + ' / ' + tx.body.messages[0].channel_id\n              break\n            case '/ibc.core.channel.v1.MsgChannelOpenTry':\n              text =\n                text +\n                tx.body.messages[0].port_id +\n                ' / ' +\n                tx.body.messages[0].previous_channel_id +\n                ' / ' +\n                tx.body.messages[0].counterparty_version\n              break\n            case '/ibc.core.channel.v1.MsgRecvPacket':\n              packet = this.getDecoded(tx.body.messages[0].packet?.data ?? '')\n              if (packet.sender == this.bankAddress) {\n                text = text + 'IBC:' + packet.receiver\n              } else {\n                if (packet.receiver == this.bankAddress) {\n                  text = text + 'IBC:' + packet.sender\n                } else {\n                  text = text + 'IBC Recv Packet'\n                }\n              }\n              break\n            case '/ibc.core.channel.v1.MsgAcknowledgement':\n              text =\n                text +\n                tx.body.messages[0].packet?.source_port +\n                ':' +\n                tx.body.messages[0].packet?.source_channel +\n                ' <-> ' +\n                tx.body.messages[0].packet?.destination_port +\n                ':' +\n                tx.body.messages[0].packet?.destination_channel\n              break\n            case '/ibc.core.channel.v1.MsgTimeout':\n              text = text + 'IBC Timeout Packet'\n              break\n            case '/ibc.core.channel.v1.MsgChannelOpenInit':\n              text = text + tx.body.messages[0].port_id\n              break\n            case '/ibc.core.client.v1.MsgCreateClient':\n              text = text + tx.body.messages[0].signer\n              break\n            case '/ibc.core.client.v1.MsgUpdateClient':\n              text = text + tx.body.messages[0].client_id\n              break\n            case '/ibc.core.connection.v1.MsgConnectionOpenAck':\n              text = text + tx.body.messages[0].connection_id + ' / ' + tx.body.messages[0].counterparty_connection_id\n              break\n            case '/ibc.core.connection.v1.MsgConnectionOpenInit':\n              text = text + tx.body.messages[0].client_id\n              break\n            case '/ibc.core.connection.v1.MsgConnectionOpenConfirm':\n              text = text + tx.body.messages[0].connection_id\n              break\n            case '/ibc.core.connection.v1.MsgConnectionOpenTry':\n              text = text + tx.body.messages[0].client_id + ' / ' + tx.body.messages[0].previous_connection_id\n              break\n            default:\n              text = text + 'Message'\n              break\n          }\n        }\n      }\n      return text\n    },\n  },\n  watch: {\n    address: function (newAddr, oldAddr): void {\n      if (newAddr != oldAddr && this._depsLoaded) {\n        this.bankAddress = newAddr\n        if (this.bankAddress != '') {\n          this.$store.dispatch('common/transfers/ServiceGetTxsEvent', {\n            subscribe: true,\n            event: 'transfer.sender%3D%27' + this.bankAddress + '%27',\n          })\n          this.$store.dispatch('common/transfers/ServiceGetTxsEvent', {\n            subscribe: true,\n            event: 'transfer.recipient%3D%27' + this.bankAddress + '%27',\n          })\n        }\n      }\n    },\n  },\n})\n</script>\n"]}]}