{"remainingRequest":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/src/components/SpNFTAssets/SpNFTAssets.vue?vue&type=template&id=a82d604a&ts=true","dependencies":[{"path":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/src/components/SpNFTAssets/SpNFTAssets.vue","mtime":1651684735260},{"path":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/node_modules/babel-loader/lib/index.js","mtime":1650206516231},{"path":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/node_modules/ts-loader/index.js","mtime":1650206520101},{"path":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/node_modules/vue-loader/dist/templateLoader.js","mtime":1650206520131},{"path":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/node_modules/cache-loader/dist/cjs.js","mtime":1650206516391},{"path":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/node_modules/vue-loader/dist/index.js","mtime":1650206520131}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0ic3AtYXNzZXRzIj4KICAgIDxkaXYgY2xhc3M9InNwLWFzc2V0c19faGVhZGVyIHNwLWNvbXBvbmVudC10aXRsZSI+CiAgICAgIDxoMz7miJHnmoRORlTljaHliLg8L2gzPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJzcC1hc3NldHNfX21haW4gc3AtYm94IHNwLXNoYWRvdyI+CiAgICAgIDxkaXYgY2xhc3M9InNwLWFzc2V0c19fbWFpbl9faXRlbSIgdi1mb3I9ImRlbm9tIGluIGZ1bGxORlRva2VucyIgPgogICAgICAgIDxkaXYgY2xhc3M9InNwLWFzc2V0c19fbWFpbl9faXRlbSIgdi1mb3I9InRva2VuIGluIGRlbm9tPy50b2tlbl9pZHMiID4KICAgICAgICAgIDxkaXYgY2xhc3M9InNwLWFzc2V0c19fbWFpbl9fZGVub21fX25hbWUiPgogICAgICAgICAgICAgIHt7dG9rZW59fSh7eyBkZW5vbT8uZGVub21faWQgfX0pIAogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJzcC1hc3NldHNfX21haW5fX2Rlbm9tX19iYWxhbmNlIj4KICAgICAgICAgICAgICA8aW1nIDpzcmM9ImltZ1VybChkZW5vbT8uZGVub21faWQsIHRva2VuKSIgd2lkdGg9IjgwIiBoZWlnaHQ9IjgwIiAvPiAKICAgICAgICAgIDwvZGl2PgogICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4K"},{"version":3,"sources":["/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/src/components/SpNFTAssets/SpNFTAssets.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC3C,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QAC/D,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;UACnE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;UACnC,CAAC,CAAC,CAAC,CAAC,CAAC;UACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACxC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;UACvE,CAAC,CAAC,CAAC,CAAC,CAAC;SACN,CAAC,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,CAAC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/lisoleg/cosmos/irisnet/irishub/vue/node_modules/@starport/vue/src/components/SpNFTAssets/SpNFTAssets.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"sp-assets\">\n    <div class=\"sp-assets__header sp-component-title\">\n      <h3>我的NFT卡券</h3>\n    </div>\n    <div class=\"sp-assets__main sp-box sp-shadow\">\n      <div class=\"sp-assets__main__item\" v-for=\"denom in fullNFTokens\" >\n        <div class=\"sp-assets__main__item\" v-for=\"token in denom?.token_ids\" >\n          <div class=\"sp-assets__main__denom__name\">\n              {{token}}({{ denom?.denom_id }}) \n          </div>\n          <div class=\"sp-assets__main__denom__balance\">\n              <img :src=\"imgUrl(denom?.denom_id, token)\" width=\"80\" height=\"80\" /> \n          </div>\n         </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, PropType } from 'vue'\nimport { str2rgba } from '../../utils/helpers'\nimport { queryNftOwnerResponse,idCollection } from '../../utils/nft'\n\nvar _this:any;\nexport default defineComponent({\n  name: 'SpNFTAssets',\n  props: {     \n    address: {\n      type: String as PropType<string>,\n    } \n  },\n  data() {\n    return {\n      imgUrl: function (denomId:string, tokenId:string) {//}: Promise<string> {\n      var res = _this.$store.getters['irismod.nft/getNft']({\n            params: { denom_id: denomId, token_id:tokenId },\n          })?.nft?.uri;\n      //console.log(res)\n      return res\n    },\n    }\n  },\n  computed: {\n    fullNFTokens: function (): idCollection[] {\n      if (this.address != '') {\n        var res = this.$store.getters['irismod.nft/getOwner']({\n              params: {},\n              query: { owner: this.address }, \n              })?.owner?.id_collections; \n        for (let idCollection of res){\n          for (let tokenId of idCollection?.token_ids){\n            this.$store.dispatch('irismod.nft/QueryNft', {\n              params: { denom_id: idCollection?.denom_id, token_id: tokenId } \n            })\n          }\n        }\n        return res\n      } \n      return []\n    },\n  },\n  methods: {\n    \n  },\n  created() {\n    _this=this\n  },\n  mounted: function (): void {\n    if (this.address != '') {\n      this.$store.dispatch('irismod.nft/QueryOwner', {\n        query: { owner: this.address }\n      })\n    }\n  },\n\n  watch: {\n    address: function (newAddr, oldAddr): void {\n      if (newAddr != oldAddr && newAddr  != '') {\n        this.$store.dispatch('irismod.nft/QueryOwner', {\n          query: { owner: newAddr }\n        })\n      }\n    },\n  },\n})\n</script>\n"]}]}