{"version":3,"sources":["../../../../src/modules/common/wallet/wallet.js"],"names":["namespaced","state","wallets","JSON","parse","window","localStorage","getItem","activeWallet","activeClient","selectedAddress","authorized","gasPrice","getters","client","wallet","address","getMnemonic","mnemonic","getPath","HDpath","accounts","find","x","pathIncrement","relayers","nameAvailable","name","findIndex","lastWallet","loggedIn","signer","walletName","privKey","privkey","mutations","SET_ACTIVE_WALLET","setItem","SET_ACTIVE_CLIENT","ADD_WALLET","password","push","CryptoJS","AES","encrypt","stringify","toString","PATH_INCREMENT","ADD_ACCOUNT","account","SET_RELAYERS","SET_SELECTED_ADDRESS","SET_BACKUP_STATE","backupState","ADD_MESSAGE_TYPE","typeUrl","type","registry","register","SIGN_OUT","actions","signOut","commit","connectWithKeplr","accountSigner","dispatch","rootGetters","root","prefix","getAccounts","console","log","unlockWallet","encryptedWallet","decrypt","enc","Utf8","length","getOfflineSigner","DirectSecp256k1HdWallet","fromMnemonic","hdPaths","updateRelayers","switchAccount","accountIndex","acc","addAccount","parseInt","storeWallets","signInWithPrivateKey","pKey","trim","DirectSecp256k1Wallet","fromKey","firstAccount","restoreWallet","encrypted","newName","incr","createWalletWithMnemonic","sendTransaction","message","memo","denom","fee","amount","gas","add","msg","signAndBroadcast","result"],"mappings":"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","sourcesContent":["import { DirectSecp256k1HdWallet, DirectSecp256k1Wallet } from '@cosmjs/proto-signing'\n\nimport { assertIsBroadcastTxSuccess } from '@cosmjs/stargate'\nimport { stringToPath } from '@cosmjs/crypto'\nimport CryptoJS from 'crypto-js'\nimport { keyFromWif, keyToWif } from '../../../helpers/keys'\n\n/* START TODO: Integrate closure below for additional security \nfunction getDecryptor(password) {\n\tlet secret = password\n\treturn async function (encryptedMnemonic, HDpath) {\n\t\tconst mnemonic = CryptoJS.AES.decrypt(encryptedMnemonic, secret).toString(\n\t\t\tCryptoJS.enc.Utf8\n\t\t)\n\t\treturn await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, HDpath)\n\t}\n}\nEND TODO */\nexport default {\n\tnamespaced: true,\n\tstate() {\n\t\treturn {\n\t\t\twallets: JSON.parse(window.localStorage.getItem('wallets')) || [],\n\t\t\tactiveWallet: null,\n\t\t\tactiveClient: null,\n\t\t\tselectedAddress: '',\n\t\t\tauthorized: false,\n\t\t\tgasPrice: '0.0000025token',\n\t\t}\n\t},\n\tgetters: {\n\t\tclient: (state) => state.activeClient,\n\t\tgasPrice: (state) => state.gasPrice,\n\t\twallet: (state) => state.activeWallet,\n\t\taddress: (state) => state.selectedAddress,\n\t\tgetMnemonic: (state) => state.activeWallet.mnemonic,\n\t\tgetPath: (state) =>\n\t\t\tstate.activeWallet?.HDpath +\n\t\t\tstate.activeWallet?.accounts.find((x) => x.address == state.selectedAddress).pathIncrement,\n\t\trelayers: (state) => {\n\t\t\treturn state.activeWallet?.accounts.find((x) => x.address == state.selectedAddress).relayers ?? []\n\t\t},\n\t\tnameAvailable: (state) => (name) => {\n\t\t\treturn state.wallets.findIndex((x) => x.name == name) == -1\n\t\t},\n\t\tlastWallet: (state) => {\n\t\t\tif (state.activeWallet) {\n\t\t\t\treturn state.activeWallet.name\n\t\t\t} else {\n\t\t\t\treturn window.localStorage.getItem('lastWallet')\n\t\t\t}\n\t\t},\n\t\tloggedIn: (state) => state.activeClient !== null,\n\t\tsigner: (state) => {\n\t\t\tif (state.activeClient) {\n\t\t\t\treturn state.activeClient.signer\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t},\n\t\twalletName: (state) => (state.activeWallet ? state.activeWallet.name : null),\n\t\tprivKey: (state) => {\n\t\t\tif (state.activeClient) {\n\t\t\t\treturn keyToWif(state.activeClient.signer.privkey)\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t},\n\t},\n\tmutations: {\n\t\tSET_ACTIVE_WALLET(state, wallet) {\n\t\t\tstate.activeWallet = wallet\n\t\t\twindow.localStorage.setItem('lastWallet', wallet.name)\n\t\t},\n\t\tSET_ACTIVE_CLIENT(state, client) {\n\t\t\tstate.activeClient = client\n\t\t\tstate.authorized = true\n\t\t},\n\t\tADD_WALLET(state, wallet) {\n\t\t\tstate.activeWallet = wallet\n\t\t\twindow.localStorage.setItem('lastWallet', wallet.name)\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\n\t\t\t\tstate.wallets.push({\n\t\t\t\t\tname: state.activeWallet.name,\n\t\t\t\t\twallet: CryptoJS.AES.encrypt(JSON.stringify(state.activeWallet), state.activeWallet.password).toString(),\n\t\t\t\t})\n\t\t\t}\n\t\t\tif (state.activeWallet.name == 'Keplr Integration' && !state.activeWallet.password) {\n\t\t\t\tstate.wallets.push({\n\t\t\t\t\tname: state.activeWallet.name,\n\t\t\t\t\twallet: JSON.stringify(state.activeWallet),\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tPATH_INCREMENT(state) {\n\t\t\tstate.activeWallet.pathIncrement = state.activeWallet.pathIncrement + 1\n\t\t},\n\t\tADD_ACCOUNT(state, account) {\n\t\t\tstate.activeWallet.accounts.push(account)\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\n\t\t\t\tstate.wallets[state.wallets.findIndex((x) => x.name === state.activeWallet.name)].wallet = CryptoJS.AES.encrypt(\n\t\t\t\t\tJSON.stringify(state.activeWallet),\n\t\t\t\t\tstate.activeWallet.password,\n\t\t\t\t).toString()\n\t\t\t}\n\t\t},\n\t\tSET_RELAYERS(state, relayers) {\n\t\t\tstate.activeWallet.accounts.find((x) => x.address == state.selectedAddress).relayers = relayers\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\n\t\t\t\tstate.wallets[state.wallets.findIndex((x) => x.name === state.activeWallet.name)].wallet = CryptoJS.AES.encrypt(\n\t\t\t\t\tJSON.stringify(state.activeWallet),\n\t\t\t\t\tstate.activeWallet.password,\n\t\t\t\t).toString()\n\t\t\t}\n\t\t},\n\t\tSET_SELECTED_ADDRESS(state, address) {\n\t\t\tstate.selectedAddress = address\n\t\t},\n\t\tSET_BACKUP_STATE(state, backupState) {\n\t\t\tstate.backupState = backupState\n\t\t},\n\t\tADD_MESSAGE_TYPE(state, { typeUrl, type }) {\n\t\t\tstate.activeClient.registry.register(typeUrl, type)\n\t\t},\n\t\tSIGN_OUT(state) {\n\t\t\tstate.selectedAddress = ''\n\t\t\tstate.activeClient = null\n\t\t\tstate.activeWallet = null\n\t\t\tstate.authorized = false\n\t\t},\n\t},\n\tactions: {\n\t\tsignOut({ commit }) {\n\t\t\tcommit('SIGN_OUT')\n\t\t},\n\t\tasync connectWithKeplr({ commit, dispatch, rootGetters }, accountSigner) {\n\t\t\tawait dispatch('common/env/signIn', accountSigner, {\n\t\t\t\troot: true,\n\t\t\t})\n\n\t\t\tconst wallet = {\n\t\t\t\tname: 'Keplr Integration',\n\t\t\t\tmnemonic: null,\n\t\t\t\tHDpath: null,\n\t\t\t\tpassword: null,\n\t\t\t\tprefix: rootGetters['common/env/addrPrefix'],\n\t\t\t\tpathIncrement: null,\n\t\t\t\taccounts: [],\n\t\t\t}\n\t\t\tconst [account] = await accountSigner.getAccounts()\n\t\t\twallet.accounts.push({ address: account.address, pathIncrement: null })\n\t\t\tcommit('ADD_WALLET', wallet)\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync unlockWallet({ commit, state, dispatch, rootGetters }, { name, password }) {\n\t\t\tconst encryptedWallet = state.wallets[state.wallets.findIndex((x) => x.name === name)].wallet\n\t\t\tlet wallet\n\t\t\tif (name == 'Keplr Integration') {\n\t\t\t\twallet = JSON.parse(encryptedWallet)\n\t\t\t} else {\n\t\t\t\twallet = JSON.parse(CryptoJS.AES.decrypt(encryptedWallet, password).toString(CryptoJS.enc.Utf8))\n\t\t\t}\n\t\t\tcommit('SET_ACTIVE_WALLET', wallet)\n\t\t\tif (wallet.accounts.length > 0) {\n\t\t\t\tlet accountSigner\n\t\t\t\tif (wallet.name == 'Keplr Integration') {\n\t\t\t\t\taccountSigner = window.getOfflineSigner(rootGetters['common/env/chainId'])\n\t\t\t\t} else {\n\t\t\t\t\taccountSigner = await DirectSecp256k1HdWallet.fromMnemonic(wallet.mnemonic, {\n\t\t\t\t\t\thdPaths: [stringToPath(wallet.HDpath + wallet.accounts[0].pathIncrement)],\n\t\t\t\t\t\tprefix: wallet.prefix,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tawait dispatch('common/env/signIn', accountSigner, {\n\t\t\t\t\t\troot: true,\n\t\t\t\t\t})\n\t\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\t\tconst [account] = await accountSigner.getAccounts()\n\t\t\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tasync updateRelayers({ commit, dispatch }, relayers) {\n\t\t\tcommit('SET_RELAYERS', relayers)\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync switchAccount({ commit, state, rootGetters, dispatch }, address) {\n\t\t\tconst accountIndex = state.activeWallet.accounts.findIndex((acc) => acc.address == address)\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(state.activeWallet.mnemonic, {\n\t\t\t\thdPaths: [stringToPath(state.activeWallet.HDpath + state.activeWallet.accounts[accountIndex].pathIncrement)],\n\t\t\t\tprefix: state.activeWallet.prefix,\n\t\t\t})\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tconst [account] = await accountSigner.getAccounts()\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t},\n\t\tasync addAccount({ commit, state, dispatch }, pathIncrement) {\n\t\t\tif (!pathIncrement) {\n\t\t\t\tpathIncrement = state.activeWallet.pathIncrement + 1\n\t\t\t\tcommit('PATH_INCREMENT')\n\t\t\t}\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(state.activeWallet.mnemonic, {\n\t\t\t\thdPaths: [stringToPath(state.activeWallet.HDpath + pathIncrement)],\n\t\t\t\tprefix: state.activeWallet.prefix,\n\t\t\t})\n\t\t\tconst [acc] = await accountSigner.getAccounts()\n\t\t\tconst account = {\n\t\t\t\taddress: acc.address,\n\t\t\t\tpathIncrement: parseInt(pathIncrement),\n\t\t\t}\n\t\t\tif (state.activeWallet.accounts.findIndex((acc) => acc.address == account.address) == -1) {\n\t\t\t\tcommit('ADD_ACCOUNT', account)\n\t\t\t\tdispatch('storeWallets')\n\t\t\t} else {\n\t\t\t\tthrow 'Account already in store.'\n\t\t\t}\n\t\t},\n\t\tstoreWallets({ commit, state }) {\n\t\t\twindow.localStorage.setItem('wallets', JSON.stringify(state.wallets))\n\t\t\tcommit('SET_BACKUP_STATE', false)\n\t\t},\n\t\tasync signInWithPrivateKey({ commit, rootGetters, dispatch }, { prefix = 'cosmos', privKey }) {\n\t\t\tconst pKey = keyFromWif(privKey.trim())\n\t\t\tconst accountSigner = await DirectSecp256k1Wallet.fromKey(pKey, { prefix })\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t},\n\t\tasync restoreWallet({ commit, dispatch, rootGetters, state }, { encrypted, password }) {\n\t\t\tconst wallet = JSON.parse(CryptoJS.AES.decrypt(encrypted, password).toString(CryptoJS.enc.Utf8))\n\t\t\tlet newName = wallet.name\n\t\t\tlet incr = 1\n\t\t\twhile (state.wallets.findIndex((x) => x.name == newName) != -1) {\n\t\t\t\tnewName = wallet.name + '_' + incr\n\t\t\t\tincr++\n\t\t\t}\n\t\t\twallet.name = newName\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(wallet.mnemonic, {\n\t\t\t\thdPaths: [stringToPath(wallet.HDpath + '0')],\n\t\t\t\tprefix: wallet.prefix,\n\t\t\t})\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\n\t\t\tcommit('ADD_WALLET', wallet)\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync createWalletWithMnemonic(\n\t\t\t{ commit, dispatch, rootGetters },\n\t\t\t{ name = null, mnemonic, HDpath = \"m/44'/118'/0'/0/\", prefix = 'cosmos', password = null },\n\t\t) {\n\t\t\tconst wallet = {\n\t\t\t\tname,\n\t\t\t\tmnemonic,\n\t\t\t\tHDpath,\n\t\t\t\tpassword,\n\t\t\t\tprefix,\n\t\t\t\tpathIncrement: 0,\n\t\t\t\taccounts: [],\n\t\t\t}\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n\t\t\t\thdPaths: [stringToPath(HDpath + '0')],\n\t\t\t\tprefix,\n\t\t\t})\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\n\t\t\tconst account = { address: firstAccount.address, pathIncrement: 0 }\n\t\t\twallet.accounts.push(account)\n\t\t\tcommit('ADD_WALLET', wallet)\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync sendTransaction({ state }, { message, memo, denom }) {\n\t\t\tconst fee = {\n\t\t\t\tamount: [{ amount: '0', denom }],\n\t\t\t\tgas: '200000',\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconsole.log({\n\t\t\t\t\tadd: state.selectedAddress,\n\t\t\t\t\tmsg: [message],\n\t\t\t\t\tfee,\n\t\t\t\t\tmemo,\n\t\t\t\t})\n\t\t\t\tconst result = await state.activeClient.signAndBroadcast(state.selectedAddress, [message], fee, memo)\n\t\t\t\tassertIsBroadcastTxSuccess(result)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t\tthrow 'Failed to broadcast transaction.' + e\n\t\t\t}\n\t\t},\n\t},\n}\n"],"file":"wallet.js"}