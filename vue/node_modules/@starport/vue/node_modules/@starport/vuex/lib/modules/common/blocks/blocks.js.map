{"version":3,"sources":["../../../../src/modules/common/blocks/blocks.js"],"names":["formatTx","txHash","messages","memo","signer_infos","fee","gas_used","gas_wanted","height","code","log","body","auth_info","meta","getTx","apiCosmos","apiTendermint","encodedTx","axios","get","rpcRes","apiRes","toUpperCase","decodeTx","retries","fullTx","Promise","resolve","setTimeout","data","result","tx_result","tx","namespaced","state","blocks","size","getters","getBlocks","howmany","sort","a","b","slice","getBlockByHeight","find","x","mutations","ADD_BLOCK","block","push","length","shift","RESET_STATE","SET_SIZE","actions","init","dispatch","rootGetters","on","getShiftedBlock","blockHeight","blockDetails","txDecoded","txs","map","dec","all","header","timestamp","time","hash","block_id","details","console","SpVuexError","addBlock","blockData","commit","value","resetState"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport SpVuexError from '../../../errors/SpVuexError'\nimport { sha256 } from '@cosmjs/crypto'\nimport { fromBase64, toHex } from '@cosmjs/encoding'\n\nfunction formatTx({\n\ttxHash = '',\n\tmessages = [],\n\tmemo = '',\n\tsigner_infos = [],\n\tfee = {},\n\tgas_used = null,\n\tgas_wanted = null,\n\theight = null,\n\tcode = 0,\n\tlog = null,\n}) {\n\treturn {\n\t\ttxHash,\n\t\tbody: {\n\t\t\tmessages,\n\t\t\tmemo,\n\t\t},\n\t\tauth_info: {\n\t\t\tsigner_infos,\n\t\t\tfee,\n\t\t},\n\t\tmeta: {\n\t\t\tgas_used,\n\t\t\tgas_wanted,\n\t\t\theight,\n\t\t\tcode,\n\t\t\tlog,\n\t\t},\n\t}\n}\n\nasync function getTx(apiCosmos, apiTendermint, encodedTx) {\n\tconst txHash = sha256(fromBase64(encodedTx))\n\ttry {\n\t\tconst rpcRes = await axios.get(apiTendermint + '/tx?hash=0x' + toHex(txHash))\n\t\tconst apiRes = await axios.get(apiCosmos + '/cosmos/tx/v1beta1/txs/' + toHex(txHash))\n\t\treturn { rpcRes, apiRes, txHash: toHex(txHash).toUpperCase() }\n\t} catch (e) {\n\t\tthrow 'Error fetching TX data'\n\t}\n}\nasync function decodeTx(apiCosmos, apiTendermint, encodedTx) {\n\tlet fullTx\n\tlet retries = 0\n\twhile (!fullTx && retries < 5) {\n\t\ttry {\n\t\t\tfullTx = await getTx(apiCosmos, apiTendermint, encodedTx)\n\t\t} catch (e) {\n\t\t\tretries++\n\t\t\tawait new Promise((resolve) => {\n\t\t\t\tsetTimeout(resolve, 2000)\n\t\t\t})\n\t\t}\n\t}\n\tconst { data } = fullTx.rpcRes\n\tconst { height, tx_result } = data.result\n\tconst { code, log, gas_used, gas_wanted } = tx_result\n\tconst { body, auth_info } = fullTx.apiRes.data.tx\n\tconst { messages, memo } = body\n\n\treturn formatTx({\n\t\ttxHash: fullTx.txHash,\n\t\tmessages,\n\t\tmemo,\n\t\tsigner_infos: auth_info.signer_infos,\n\t\tfee: auth_info.fee,\n\t\tgas_used,\n\t\tgas_wanted,\n\t\theight,\n\t\tcode,\n\t\tlog,\n\t})\n}\n\nexport default {\n\tnamespaced: true,\n\tstate() {\n\t\treturn {\n\t\t\tblocks: [],\n\t\t\tsize: 20,\n\t\t}\n\t},\n\tgetters: {\n\t\tgetBlocks: (state) => (howmany) => {\n\t\t\treturn [...state.blocks].sort((a, b) => b.height - a.height).slice(0, howmany)\n\t\t},\n\t\tgetBlockByHeight: (state) => (height) => {\n\t\t\treturn state.blocks.find((x) => x.height == height) || {}\n\t\t},\n\t},\n\tmutations: {\n\t\tADD_BLOCK(state, block) {\n\t\t\tstate.blocks.push(block)\n\t\t\tif (state.blocks.length > state.size) {\n\t\t\t\tstate.blocks.shift()\n\t\t\t}\n\t\t},\n\t\tRESET_STATE(state) {\n\t\t\tstate.blocks = []\n\t\t},\n\t\tSET_SIZE(state, size) {\n\t\t\tstate.size = size\n\t\t},\n\t},\n\tactions: {\n\t\tinit({ dispatch, rootGetters }) {\n\t\t\tif (rootGetters['common/env/client']) {\n\t\t\t\trootGetters['common/env/client'].on('newblock', (data) => {\n\t\t\t\t\tdispatch('addBlock', data)\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tasync getShiftedBlock({ rootGetters }, blockHeight) {\n\t\t\ttry {\n\t\t\t\tconst blockDetails = await axios.get(rootGetters['common/env/apiTendermint'] + '/block?height=' + blockHeight)\n\t\t\t\tconst txDecoded = blockDetails.data.result.block.data.txs.map(async (tx) => {\n\t\t\t\t\tconst dec = await decodeTx(rootGetters['common/env/apiCosmos'], rootGetters['common/env/apiTendermint'], tx)\n\t\t\t\t\treturn dec\n\t\t\t\t})\n\t\t\t\tconst txs = await Promise.all(txDecoded)\n\n\t\t\t\tconst block = {\n\t\t\t\t\theight: blockDetails.data.result.block.header.height,\n\t\t\t\t\ttimestamp: blockDetails.data.result.block.header.time,\n\t\t\t\t\thash: blockDetails.data.result.block_id.hash,\n\t\t\t\t\tdetails: blockDetails.data.result.block,\n\t\t\t\t\ttxDecoded: txs,\n\t\t\t\t}\n\n\t\t\t\treturn block\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t\tthrow new SpVuexError('Blocks:AddBlock', 'Could not retrieve block. RPC node unavailable')\n\t\t\t}\n\t\t},\n\t\tasync addBlock({ commit, rootGetters }, blockData) {\n\t\t\ttry {\n\t\t\t\tconst blockDetails = await axios.get(\n\t\t\t\t\trootGetters['common/env/apiTendermint'] + '/block?height=' + blockData.data.value.block.header.height,\n\t\t\t\t)\n\t\t\t\tconst txDecoded = blockData.data.value.block.data.txs.map(async (tx) => {\n\t\t\t\t\tconst dec = await decodeTx(rootGetters['common/env/apiCosmos'], rootGetters['common/env/apiTendermint'], tx)\n\t\t\t\t\treturn dec\n\t\t\t\t})\n\t\t\t\tconst txs = await Promise.all(txDecoded)\n\n\t\t\t\tconst block = {\n\t\t\t\t\theight: blockData.data.value.block.header.height,\n\t\t\t\t\ttimestamp: blockData.data.value.block.header.time,\n\t\t\t\t\thash: blockDetails.data.result.block_id.hash,\n\t\t\t\t\tdetails: blockData.data.value.block,\n\t\t\t\t\ttxDecoded: txs,\n\t\t\t\t}\n\n\t\t\t\tcommit('ADD_BLOCK', block)\n\t\t\t} catch (e) {\n\t\t\t\tthrow new SpVuexError('Blocks:AddBlock', 'Could not add block. RPC node unavailable')\n\t\t\t}\n\t\t},\n\t\tresetState({ commit }) {\n\t\t\tcommit('RESET_STATE')\n\t\t},\n\t},\n}\n"],"file":"blocks.js"}