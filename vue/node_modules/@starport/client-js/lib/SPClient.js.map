{"version":3,"sources":["../src/SPClient.ts"],"names":["SPClient","apiAddr","rpcAddr","wsAddr","refresh","offline","poll","connectivityTest","bind","timer","setInterval","socket","ReconnectingWebSocket","onopen","onOpenWS","onmessage","onMessageWS","onerror","onErrorWS","onclose","onCloseWS","signer","SigningStargateClient","connectWithSigner","signingClient","emit","registry","dummy","axios","get","status","data","node_info","network","application_version","name","response","console","error","SpClientError","send","JSON","stringify","jsonrpc","method","id","params","msg","result","parse","type","url","query","key","value","encodeURIComponent","Array","isArray","join","rawQuery","keys","Object","filter","map","toQueryString","addQueryParam","queryString","body","path","addQueryParams","headers","Accept","EventEmitter"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events'\nimport ReconnectingWebSocket from 'reconnecting-websocket'\nimport axios, { AxiosPromise, AxiosResponse } from 'axios'\nimport { SigningStargateClient } from '@cosmjs/stargate'\nimport { OfflineDirectSigner, Registry } from '@cosmjs/proto-signing'\nimport SpClientError from './errors/SpClientError'\nexport interface IClientConfig {\n  apiAddr: string\n  rpcAddr?: string\n  wsAddr?: string\n  refresh?: number\n  offline?: boolean\n}\nexport type QueryParamsType = Record<string | number, unknown>\nexport interface IFullRequestParams {\n  body?: unknown\n  path: string\n  query?: QueryParamsType\n  method: 'GET' | 'POST' | 'PUT'\n}\nexport interface IResponse {\n  data: string\n}\nexport interface ITypedResponse {\n  type: string\n}\nexport interface IAPIResponse {\n  data: unknown\n}\nexport interface IParsedResponse {\n  data: ITypedResponse\n}\nexport default class SPClient extends EventEmitter {\n  private apiAddr: string\n  private rpcAddr: string\n  private wsAddr: string\n  private offline: boolean\n  private refresh: number\n  private socket: ReconnectingWebSocket\n\n  public signingClient\n  private signer: OfflineDirectSigner\n  private timer: ReturnType<typeof setInterval>\n\n  constructor({ apiAddr, rpcAddr, wsAddr, refresh, offline }: IClientConfig) {\n    super()\n    this.apiAddr = apiAddr\n    this.rpcAddr = rpcAddr\n    this.wsAddr = wsAddr\n    this.offline = offline\n    this.refresh = refresh\n    const poll: () => Promise<void> = this.connectivityTest.bind(this)\n    this.timer = setInterval(poll, this.refresh)\n    this.connectivityTest()\n    if (this.wsAddr) {\n      this.socket = new ReconnectingWebSocket(this.wsAddr)\n\n      this.socket.onopen = this.onOpenWS.bind(this)\n      this.socket.onmessage = this.onMessageWS.bind(this)\n      this.socket.onerror = this.onErrorWS.bind(this)\n      this.socket.onclose = this.onCloseWS.bind(this)\n    }\n  }\n  public async useSigner(signer: OfflineDirectSigner): Promise<void> {\n    this.signingClient = await SigningStargateClient.connectWithSigner(this.rpcAddr, signer)\n    this.signer = signer\n  }\n  public switchAPI(apiAddr: string): void {\n    this.apiAddr = apiAddr\n  }\n  public switchWS(wsAddr: string): void {\n    this.emit('ws-status', false)\n    this.wsAddr = wsAddr\n    this.socket = new ReconnectingWebSocket(this.wsAddr)\n  }\n  public async switchRPC(rpcAddr: string): Promise<void> {\n    this.rpcAddr = rpcAddr\n    if (this.signingClient) {\n      const registry: Registry = { ...this.signingClient.registry }\n      this.signingClient = await SigningStargateClient.connectWithSigner(this.rpcAddr, this.signer, { registry })\n    }\n  }\n  private async connectivityTest(): Promise<void> {\n    if (this.offline) {\n      this.emit('newblock', { dummy: true })\n    }\n    if (this.apiAddr) {\n      try {\n        const status = await axios.get(this.apiAddr + '/node_info')\n        this.emit('chain-id', status.data.node_info.network)\n        status.data.application_version.name\n          ? this.emit('chain-name', status.data.application_version.name)\n          : this.emit('chain-name', status.data.node_info.network)\n        this.emit('api-status', true)\n      } catch (error) {\n        if (!error.response) {\n          this.emit('api-status', false)\n          console.error(new SpClientError('Client-js:API', 'API Node unavailable'))\n        } else {\n          this.emit('api-status', true)\n        }\n      }\n    }\n    if (this.rpcAddr) {\n      try {\n        await axios.get(this.rpcAddr)\n        this.emit('rpc-status', true)\n      } catch (error) {\n        if (!error.response) {\n          console.error(new SpClientError('Client-js:API', 'RPC Node unavailable'))\n          this.emit('rpc-status', false)\n        } else {\n          this.emit('rpc-status', true)\n        }\n      }\n    }\n  }\n  private onErrorWS(): void {\n    console.error(new SpClientError('Client-js:WS', 'Could not connect to websocket.'))\n  }\n  private onCloseWS(): void {\n    this.emit('ws-status', false)\n  }\n  private onOpenWS(): void {\n    this.emit('ws-status', true)\n    this.socket.send(\n      JSON.stringify({\n        jsonrpc: '2.0',\n        method: 'subscribe',\n        id: '1',\n        params: [\"tm.event = 'NewBlock'\"],\n      }),\n    )\n  }\n  private onMessageWS(msg: IResponse): void {\n    const result: IParsedResponse = JSON.parse(msg.data).result\n    if (result.data && result.data.type === 'tendermint/event/NewBlock') {\n      this.emit('newblock', JSON.parse(msg.data).result)\n    }\n  }\n  public async query(url: string, params = ''): Promise<unknown> {\n    try {\n      const response: IAPIResponse = await axios.get(this.apiAddr + url + params)\n      return response.data\n    } catch (e) {\n      console.error(new SpClientError('Client-js:API', 'Could not access API: ' + url))\n    }\n  }\n\n  private addQueryParam(query: QueryParamsType, key: string): string {\n    const value: unknown = query[key]\n\n    return (\n      encodeURIComponent(key) +\n      '=' +\n      encodeURIComponent(Array.isArray(value) ? value.join(',') : typeof value === 'number' ? value : `${value}`)\n    )\n  }\n  protected toQueryString(rawQuery?: QueryParamsType): string {\n    const query: QueryParamsType = rawQuery || {}\n    const keys: string[] = Object.keys(query).filter((key) => 'undefined' !== typeof query[key])\n    return keys\n      .map((key) =>\n        typeof query[key] === 'object' && !Array.isArray(query[key])\n          ? this.toQueryString(query[key] as QueryParamsType)\n          : this.addQueryParam(query, key),\n      )\n      .join('&')\n  }\n  protected addQueryParams(rawQuery?: QueryParamsType): string {\n    const queryString: string = this.toQueryString(rawQuery)\n    return queryString ? `?${queryString}` : ''\n  }\n  public async request<T = unknown>({ body, path, query, method }: IFullRequestParams): Promise<AxiosResponse<T>> {\n    const url: string = this.apiAddr + path + this.addQueryParams(query)\n    try {\n      const response: AxiosPromise<T> = axios({\n        url,\n        method,\n        data: body,\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json;charset=UTF-8',\n        },\n      })\n      const data: AxiosResponse<T> = await response\n      return data\n    } catch (e) {\n      console.error(new SpClientError('Client-js:API', 'Could not access API: ' + url))\n    }\n  }\n}\n"],"file":"SPClient.js"}