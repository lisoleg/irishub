{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// THIS FILE IS GENERATED AUTOMATICALLY. DO NOT MODIFY.\nimport AliceCheckersAliceCheckersCheckers from './alice/checkers/alice.checkers.checkers';\nimport AliceCheckersAliceCheckersToken from './alice/checkers/alice.checkers.token';\nimport AliceCheckersIrismodCoinswap from './alice/checkers/irismod.coinswap';\nimport AliceCheckersIrismodNft from './alice/checkers/irismod.nft';\nimport AliceCheckersIrismodToken from './alice/checkers/irismod.token';\nimport CosmosCosmosSdkCosmosAuthzV1Beta1 from './cosmos/cosmos-sdk/cosmos.authz.v1beta1';\nimport CosmosCosmosSdkCosmosBankV1Beta1 from './cosmos/cosmos-sdk/cosmos.bank.v1beta1';\nimport CosmosCosmosSdkCosmosCrisisV1Beta1 from './cosmos/cosmos-sdk/cosmos.crisis.v1beta1';\nimport CosmosCosmosSdkCosmosDistributionV1Beta1 from './cosmos/cosmos-sdk/cosmos.distribution.v1beta1';\nimport CosmosCosmosSdkCosmosEvidenceV1Beta1 from './cosmos/cosmos-sdk/cosmos.evidence.v1beta1';\nimport CosmosCosmosSdkCosmosFeegrantV1Beta1 from './cosmos/cosmos-sdk/cosmos.feegrant.v1beta1';\nimport CosmosCosmosSdkCosmosGovV1Beta1 from './cosmos/cosmos-sdk/cosmos.gov.v1beta1';\nimport CosmosCosmosSdkCosmosSlashingV1Beta1 from './cosmos/cosmos-sdk/cosmos.slashing.v1beta1';\nimport CosmosCosmosSdkCosmosStakingV1Beta1 from './cosmos/cosmos-sdk/cosmos.staking.v1beta1';\nimport CosmosCosmosSdkCosmosVestingV1Beta1 from './cosmos/cosmos-sdk/cosmos.vesting.v1beta1';\nimport CosmosIbcGoIbcApplicationsTransferV1 from './cosmos/ibc-go/ibc.applications.transfer.v1';\nimport IrisnetIrishubIrishubGuardian from './irisnet/irishub/irishub.guardian';\nexport default {\n  AliceCheckersAliceCheckersCheckers: load(AliceCheckersAliceCheckersCheckers, 'alice.checkers.checkers'),\n  AliceCheckersAliceCheckersToken: load(AliceCheckersAliceCheckersToken, 'alice.checkers.token'),\n  AliceCheckersIrismodCoinswap: load(AliceCheckersIrismodCoinswap, 'irismod.coinswap'),\n  AliceCheckersIrismodNft: load(AliceCheckersIrismodNft, 'irismod.nft'),\n  AliceCheckersIrismodToken: load(AliceCheckersIrismodToken, 'irismod.token'),\n  CosmosCosmosSdkCosmosAuthzV1Beta1: load(CosmosCosmosSdkCosmosAuthzV1Beta1, 'cosmos.authz.v1beta1'),\n  CosmosCosmosSdkCosmosBankV1Beta1: load(CosmosCosmosSdkCosmosBankV1Beta1, 'cosmos.bank.v1beta1'),\n  CosmosCosmosSdkCosmosCrisisV1Beta1: load(CosmosCosmosSdkCosmosCrisisV1Beta1, 'cosmos.crisis.v1beta1'),\n  CosmosCosmosSdkCosmosDistributionV1Beta1: load(CosmosCosmosSdkCosmosDistributionV1Beta1, 'cosmos.distribution.v1beta1'),\n  CosmosCosmosSdkCosmosEvidenceV1Beta1: load(CosmosCosmosSdkCosmosEvidenceV1Beta1, 'cosmos.evidence.v1beta1'),\n  CosmosCosmosSdkCosmosFeegrantV1Beta1: load(CosmosCosmosSdkCosmosFeegrantV1Beta1, 'cosmos.feegrant.v1beta1'),\n  CosmosCosmosSdkCosmosGovV1Beta1: load(CosmosCosmosSdkCosmosGovV1Beta1, 'cosmos.gov.v1beta1'),\n  CosmosCosmosSdkCosmosSlashingV1Beta1: load(CosmosCosmosSdkCosmosSlashingV1Beta1, 'cosmos.slashing.v1beta1'),\n  CosmosCosmosSdkCosmosStakingV1Beta1: load(CosmosCosmosSdkCosmosStakingV1Beta1, 'cosmos.staking.v1beta1'),\n  CosmosCosmosSdkCosmosVestingV1Beta1: load(CosmosCosmosSdkCosmosVestingV1Beta1, 'cosmos.vesting.v1beta1'),\n  CosmosIbcGoIbcApplicationsTransferV1: load(CosmosIbcGoIbcApplicationsTransferV1, 'ibc.applications.transfer.v1'),\n  IrisnetIrishubIrishubGuardian: load(IrisnetIrishubIrishubGuardian, 'irishub.guardian')\n};\n\nfunction load(mod, fullns) {\n  return function init(store) {\n    if (store.hasModule([fullns])) {\n      throw new Error('Duplicate module name detected: ' + fullns);\n    } else {\n      store.registerModule([fullns], mod);\n      store.subscribe(mutation => {\n        if (mutation.type == 'common/env/INITIALIZE_WS_COMPLETE') {\n          store.dispatch(fullns + '/init', null, {\n            root: true\n          });\n        }\n      });\n    }\n  };\n}","map":{"version":3,"sources":["/home/lisoleg/cosmos/irisnet/irishub/vue/src/store/generated/index.js"],"names":["AliceCheckersAliceCheckersCheckers","AliceCheckersAliceCheckersToken","AliceCheckersIrismodCoinswap","AliceCheckersIrismodNft","AliceCheckersIrismodToken","CosmosCosmosSdkCosmosAuthzV1Beta1","CosmosCosmosSdkCosmosBankV1Beta1","CosmosCosmosSdkCosmosCrisisV1Beta1","CosmosCosmosSdkCosmosDistributionV1Beta1","CosmosCosmosSdkCosmosEvidenceV1Beta1","CosmosCosmosSdkCosmosFeegrantV1Beta1","CosmosCosmosSdkCosmosGovV1Beta1","CosmosCosmosSdkCosmosSlashingV1Beta1","CosmosCosmosSdkCosmosStakingV1Beta1","CosmosCosmosSdkCosmosVestingV1Beta1","CosmosIbcGoIbcApplicationsTransferV1","IrisnetIrishubIrishubGuardian","load","mod","fullns","init","store","hasModule","Error","registerModule","subscribe","mutation","type","dispatch","root"],"mappings":";AAAA;AACA,OAAOA,kCAAP,MAA+C,0CAA/C;AACA,OAAOC,+BAAP,MAA4C,uCAA5C;AACA,OAAOC,4BAAP,MAAyC,mCAAzC;AACA,OAAOC,uBAAP,MAAoC,8BAApC;AACA,OAAOC,yBAAP,MAAsC,gCAAtC;AACA,OAAOC,iCAAP,MAA8C,0CAA9C;AACA,OAAOC,gCAAP,MAA6C,yCAA7C;AACA,OAAOC,kCAAP,MAA+C,2CAA/C;AACA,OAAOC,wCAAP,MAAqD,iDAArD;AACA,OAAOC,oCAAP,MAAiD,6CAAjD;AACA,OAAOC,oCAAP,MAAiD,6CAAjD;AACA,OAAOC,+BAAP,MAA4C,wCAA5C;AACA,OAAOC,oCAAP,MAAiD,6CAAjD;AACA,OAAOC,mCAAP,MAAgD,4CAAhD;AACA,OAAOC,mCAAP,MAAgD,4CAAhD;AACA,OAAOC,oCAAP,MAAiD,8CAAjD;AACA,OAAOC,6BAAP,MAA0C,oCAA1C;AACA,eAAe;AACXhB,EAAAA,kCAAkC,EAAEiB,IAAI,CAACjB,kCAAD,EAAqC,yBAArC,CAD7B;AAEXC,EAAAA,+BAA+B,EAAEgB,IAAI,CAAChB,+BAAD,EAAkC,sBAAlC,CAF1B;AAGXC,EAAAA,4BAA4B,EAAEe,IAAI,CAACf,4BAAD,EAA+B,kBAA/B,CAHvB;AAIXC,EAAAA,uBAAuB,EAAEc,IAAI,CAACd,uBAAD,EAA0B,aAA1B,CAJlB;AAKXC,EAAAA,yBAAyB,EAAEa,IAAI,CAACb,yBAAD,EAA4B,eAA5B,CALpB;AAMXC,EAAAA,iCAAiC,EAAEY,IAAI,CAACZ,iCAAD,EAAoC,sBAApC,CAN5B;AAOXC,EAAAA,gCAAgC,EAAEW,IAAI,CAACX,gCAAD,EAAmC,qBAAnC,CAP3B;AAQXC,EAAAA,kCAAkC,EAAEU,IAAI,CAACV,kCAAD,EAAqC,uBAArC,CAR7B;AASXC,EAAAA,wCAAwC,EAAES,IAAI,CAACT,wCAAD,EAA2C,6BAA3C,CATnC;AAUXC,EAAAA,oCAAoC,EAAEQ,IAAI,CAACR,oCAAD,EAAuC,yBAAvC,CAV/B;AAWXC,EAAAA,oCAAoC,EAAEO,IAAI,CAACP,oCAAD,EAAuC,yBAAvC,CAX/B;AAYXC,EAAAA,+BAA+B,EAAEM,IAAI,CAACN,+BAAD,EAAkC,oBAAlC,CAZ1B;AAaXC,EAAAA,oCAAoC,EAAEK,IAAI,CAACL,oCAAD,EAAuC,yBAAvC,CAb/B;AAcXC,EAAAA,mCAAmC,EAAEI,IAAI,CAACJ,mCAAD,EAAsC,wBAAtC,CAd9B;AAeXC,EAAAA,mCAAmC,EAAEG,IAAI,CAACH,mCAAD,EAAsC,wBAAtC,CAf9B;AAgBXC,EAAAA,oCAAoC,EAAEE,IAAI,CAACF,oCAAD,EAAuC,8BAAvC,CAhB/B;AAiBXC,EAAAA,6BAA6B,EAAEC,IAAI,CAACD,6BAAD,EAAgC,kBAAhC;AAjBxB,CAAf;;AAmBA,SAASC,IAAT,CAAcC,GAAd,EAAmBC,MAAnB,EAA2B;AACvB,SAAO,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACxB,QAAIA,KAAK,CAACC,SAAN,CAAgB,CAACH,MAAD,CAAhB,CAAJ,EAA+B;AAC3B,YAAM,IAAII,KAAJ,CAAU,qCAAqCJ,MAA/C,CAAN;AACH,KAFD,MAGK;AACDE,MAAAA,KAAK,CAACG,cAAN,CAAqB,CAACL,MAAD,CAArB,EAA+BD,GAA/B;AACAG,MAAAA,KAAK,CAACI,SAAN,CAAiBC,QAAD,IAAc;AAC1B,YAAIA,QAAQ,CAACC,IAAT,IAAiB,mCAArB,EAA0D;AACtDN,UAAAA,KAAK,CAACO,QAAN,CAAeT,MAAM,GAAG,OAAxB,EAAiC,IAAjC,EAAuC;AACnCU,YAAAA,IAAI,EAAE;AAD6B,WAAvC;AAGH;AACJ,OAND;AAOH;AACJ,GAdD;AAeH","sourcesContent":["// THIS FILE IS GENERATED AUTOMATICALLY. DO NOT MODIFY.\nimport AliceCheckersAliceCheckersCheckers from './alice/checkers/alice.checkers.checkers';\nimport AliceCheckersAliceCheckersToken from './alice/checkers/alice.checkers.token';\nimport AliceCheckersIrismodCoinswap from './alice/checkers/irismod.coinswap';\nimport AliceCheckersIrismodNft from './alice/checkers/irismod.nft';\nimport AliceCheckersIrismodToken from './alice/checkers/irismod.token';\nimport CosmosCosmosSdkCosmosAuthzV1Beta1 from './cosmos/cosmos-sdk/cosmos.authz.v1beta1';\nimport CosmosCosmosSdkCosmosBankV1Beta1 from './cosmos/cosmos-sdk/cosmos.bank.v1beta1';\nimport CosmosCosmosSdkCosmosCrisisV1Beta1 from './cosmos/cosmos-sdk/cosmos.crisis.v1beta1';\nimport CosmosCosmosSdkCosmosDistributionV1Beta1 from './cosmos/cosmos-sdk/cosmos.distribution.v1beta1';\nimport CosmosCosmosSdkCosmosEvidenceV1Beta1 from './cosmos/cosmos-sdk/cosmos.evidence.v1beta1';\nimport CosmosCosmosSdkCosmosFeegrantV1Beta1 from './cosmos/cosmos-sdk/cosmos.feegrant.v1beta1';\nimport CosmosCosmosSdkCosmosGovV1Beta1 from './cosmos/cosmos-sdk/cosmos.gov.v1beta1';\nimport CosmosCosmosSdkCosmosSlashingV1Beta1 from './cosmos/cosmos-sdk/cosmos.slashing.v1beta1';\nimport CosmosCosmosSdkCosmosStakingV1Beta1 from './cosmos/cosmos-sdk/cosmos.staking.v1beta1';\nimport CosmosCosmosSdkCosmosVestingV1Beta1 from './cosmos/cosmos-sdk/cosmos.vesting.v1beta1';\nimport CosmosIbcGoIbcApplicationsTransferV1 from './cosmos/ibc-go/ibc.applications.transfer.v1';\nimport IrisnetIrishubIrishubGuardian from './irisnet/irishub/irishub.guardian';\nexport default {\n    AliceCheckersAliceCheckersCheckers: load(AliceCheckersAliceCheckersCheckers, 'alice.checkers.checkers'),\n    AliceCheckersAliceCheckersToken: load(AliceCheckersAliceCheckersToken, 'alice.checkers.token'),\n    AliceCheckersIrismodCoinswap: load(AliceCheckersIrismodCoinswap, 'irismod.coinswap'),\n    AliceCheckersIrismodNft: load(AliceCheckersIrismodNft, 'irismod.nft'),\n    AliceCheckersIrismodToken: load(AliceCheckersIrismodToken, 'irismod.token'),\n    CosmosCosmosSdkCosmosAuthzV1Beta1: load(CosmosCosmosSdkCosmosAuthzV1Beta1, 'cosmos.authz.v1beta1'),\n    CosmosCosmosSdkCosmosBankV1Beta1: load(CosmosCosmosSdkCosmosBankV1Beta1, 'cosmos.bank.v1beta1'),\n    CosmosCosmosSdkCosmosCrisisV1Beta1: load(CosmosCosmosSdkCosmosCrisisV1Beta1, 'cosmos.crisis.v1beta1'),\n    CosmosCosmosSdkCosmosDistributionV1Beta1: load(CosmosCosmosSdkCosmosDistributionV1Beta1, 'cosmos.distribution.v1beta1'),\n    CosmosCosmosSdkCosmosEvidenceV1Beta1: load(CosmosCosmosSdkCosmosEvidenceV1Beta1, 'cosmos.evidence.v1beta1'),\n    CosmosCosmosSdkCosmosFeegrantV1Beta1: load(CosmosCosmosSdkCosmosFeegrantV1Beta1, 'cosmos.feegrant.v1beta1'),\n    CosmosCosmosSdkCosmosGovV1Beta1: load(CosmosCosmosSdkCosmosGovV1Beta1, 'cosmos.gov.v1beta1'),\n    CosmosCosmosSdkCosmosSlashingV1Beta1: load(CosmosCosmosSdkCosmosSlashingV1Beta1, 'cosmos.slashing.v1beta1'),\n    CosmosCosmosSdkCosmosStakingV1Beta1: load(CosmosCosmosSdkCosmosStakingV1Beta1, 'cosmos.staking.v1beta1'),\n    CosmosCosmosSdkCosmosVestingV1Beta1: load(CosmosCosmosSdkCosmosVestingV1Beta1, 'cosmos.vesting.v1beta1'),\n    CosmosIbcGoIbcApplicationsTransferV1: load(CosmosIbcGoIbcApplicationsTransferV1, 'ibc.applications.transfer.v1'),\n    IrisnetIrishubIrishubGuardian: load(IrisnetIrishubIrishubGuardian, 'irishub.guardian'),\n};\nfunction load(mod, fullns) {\n    return function init(store) {\n        if (store.hasModule([fullns])) {\n            throw new Error('Duplicate module name detected: ' + fullns);\n        }\n        else {\n            store.registerModule([fullns], mod);\n            store.subscribe((mutation) => {\n                if (mutation.type == 'common/env/INITIALIZE_WS_COMPLETE') {\n                    store.dispatch(fullns + '/init', null, {\n                        root: true\n                    });\n                }\n            });\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}