{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/* eslint-disable */\nimport { Writer, Reader } from \"protobufjs/minimal\";\nexport const protobufPackage = \"cosmos.base.v1beta1\";\nconst baseCoin = {\n  denom: \"\",\n  amount: \"\"\n};\nexport const Coin = {\n  encode(message, writer = Writer.create()) {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n\n    if (message.amount !== \"\") {\n      writer.uint32(18).string(message.amount);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseCoin\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n\n        case 2:\n          message.amount = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseCoin\n    };\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = String(object.denom);\n    } else {\n      message.denom = \"\";\n    }\n\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = String(object.amount);\n    } else {\n      message.amount = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.amount !== undefined && (obj.amount = message.amount);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseCoin\n    };\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = object.denom;\n    } else {\n      message.denom = \"\";\n    }\n\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = object.amount;\n    } else {\n      message.amount = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseDecCoin = {\n  denom: \"\",\n  amount: \"\"\n};\nexport const DecCoin = {\n  encode(message, writer = Writer.create()) {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n\n    if (message.amount !== \"\") {\n      writer.uint32(18).string(message.amount);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseDecCoin\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n\n        case 2:\n          message.amount = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseDecCoin\n    };\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = String(object.denom);\n    } else {\n      message.denom = \"\";\n    }\n\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = String(object.amount);\n    } else {\n      message.amount = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.amount !== undefined && (obj.amount = message.amount);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseDecCoin\n    };\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = object.denom;\n    } else {\n      message.denom = \"\";\n    }\n\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = object.amount;\n    } else {\n      message.amount = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseIntProto = {\n  int: \"\"\n};\nexport const IntProto = {\n  encode(message, writer = Writer.create()) {\n    if (message.int !== \"\") {\n      writer.uint32(10).string(message.int);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseIntProto\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.int = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseIntProto\n    };\n\n    if (object.int !== undefined && object.int !== null) {\n      message.int = String(object.int);\n    } else {\n      message.int = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.int !== undefined && (obj.int = message.int);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseIntProto\n    };\n\n    if (object.int !== undefined && object.int !== null) {\n      message.int = object.int;\n    } else {\n      message.int = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseDecProto = {\n  dec: \"\"\n};\nexport const DecProto = {\n  encode(message, writer = Writer.create()) {\n    if (message.dec !== \"\") {\n      writer.uint32(10).string(message.dec);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseDecProto\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.dec = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseDecProto\n    };\n\n    if (object.dec !== undefined && object.dec !== null) {\n      message.dec = String(object.dec);\n    } else {\n      message.dec = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.dec !== undefined && (obj.dec = message.dec);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseDecProto\n    };\n\n    if (object.dec !== undefined && object.dec !== null) {\n      message.dec = object.dec;\n    } else {\n      message.dec = \"\";\n    }\n\n    return message;\n  }\n\n};","map":{"version":3,"sources":["/home/lisoleg/checkers/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.feegrant.v1beta1/module/types/cosmos/base/v1beta1/coin.js"],"names":["Writer","Reader","protobufPackage","baseCoin","denom","amount","Coin","encode","message","writer","create","uint32","string","decode","input","length","reader","Uint8Array","end","undefined","len","pos","tag","skipType","fromJSON","object","String","toJSON","obj","fromPartial","baseDecCoin","DecCoin","baseIntProto","int","IntProto","baseDecProto","dec","DecProto"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { Writer, Reader } from \"protobufjs/minimal\";\nexport const protobufPackage = \"cosmos.base.v1beta1\";\nconst baseCoin = { denom: \"\", amount: \"\" };\nexport const Coin = {\n    encode(message, writer = Writer.create()) {\n        if (message.denom !== \"\") {\n            writer.uint32(10).string(message.denom);\n        }\n        if (message.amount !== \"\") {\n            writer.uint32(18).string(message.amount);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseCoin };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.denom = reader.string();\n                    break;\n                case 2:\n                    message.amount = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseCoin };\n        if (object.denom !== undefined && object.denom !== null) {\n            message.denom = String(object.denom);\n        }\n        else {\n            message.denom = \"\";\n        }\n        if (object.amount !== undefined && object.amount !== null) {\n            message.amount = String(object.amount);\n        }\n        else {\n            message.amount = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.denom !== undefined && (obj.denom = message.denom);\n        message.amount !== undefined && (obj.amount = message.amount);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseCoin };\n        if (object.denom !== undefined && object.denom !== null) {\n            message.denom = object.denom;\n        }\n        else {\n            message.denom = \"\";\n        }\n        if (object.amount !== undefined && object.amount !== null) {\n            message.amount = object.amount;\n        }\n        else {\n            message.amount = \"\";\n        }\n        return message;\n    },\n};\nconst baseDecCoin = { denom: \"\", amount: \"\" };\nexport const DecCoin = {\n    encode(message, writer = Writer.create()) {\n        if (message.denom !== \"\") {\n            writer.uint32(10).string(message.denom);\n        }\n        if (message.amount !== \"\") {\n            writer.uint32(18).string(message.amount);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseDecCoin };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.denom = reader.string();\n                    break;\n                case 2:\n                    message.amount = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseDecCoin };\n        if (object.denom !== undefined && object.denom !== null) {\n            message.denom = String(object.denom);\n        }\n        else {\n            message.denom = \"\";\n        }\n        if (object.amount !== undefined && object.amount !== null) {\n            message.amount = String(object.amount);\n        }\n        else {\n            message.amount = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.denom !== undefined && (obj.denom = message.denom);\n        message.amount !== undefined && (obj.amount = message.amount);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseDecCoin };\n        if (object.denom !== undefined && object.denom !== null) {\n            message.denom = object.denom;\n        }\n        else {\n            message.denom = \"\";\n        }\n        if (object.amount !== undefined && object.amount !== null) {\n            message.amount = object.amount;\n        }\n        else {\n            message.amount = \"\";\n        }\n        return message;\n    },\n};\nconst baseIntProto = { int: \"\" };\nexport const IntProto = {\n    encode(message, writer = Writer.create()) {\n        if (message.int !== \"\") {\n            writer.uint32(10).string(message.int);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseIntProto };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.int = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseIntProto };\n        if (object.int !== undefined && object.int !== null) {\n            message.int = String(object.int);\n        }\n        else {\n            message.int = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.int !== undefined && (obj.int = message.int);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseIntProto };\n        if (object.int !== undefined && object.int !== null) {\n            message.int = object.int;\n        }\n        else {\n            message.int = \"\";\n        }\n        return message;\n    },\n};\nconst baseDecProto = { dec: \"\" };\nexport const DecProto = {\n    encode(message, writer = Writer.create()) {\n        if (message.dec !== \"\") {\n            writer.uint32(10).string(message.dec);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseDecProto };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.dec = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseDecProto };\n        if (object.dec !== undefined && object.dec !== null) {\n            message.dec = String(object.dec);\n        }\n        else {\n            message.dec = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.dec !== undefined && (obj.dec = message.dec);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseDecProto };\n        if (object.dec !== undefined && object.dec !== null) {\n            message.dec = object.dec;\n        }\n        else {\n            message.dec = \"\";\n        }\n        return message;\n    },\n};\n"]},"metadata":{},"sourceType":"module"}