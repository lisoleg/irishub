{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _SpVuexError = _interopRequireDefault(require(\"../../../errors/SpVuexError\"));\n\nvar _crypto = require(\"@cosmjs/crypto\");\n\nvar _encoding = require(\"@cosmjs/encoding\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction formatTx(_ref) {\n  var _ref$txHash = _ref.txHash,\n      txHash = _ref$txHash === void 0 ? '' : _ref$txHash,\n      _ref$messages = _ref.messages,\n      messages = _ref$messages === void 0 ? [] : _ref$messages,\n      _ref$memo = _ref.memo,\n      memo = _ref$memo === void 0 ? '' : _ref$memo,\n      _ref$signer_infos = _ref.signer_infos,\n      signer_infos = _ref$signer_infos === void 0 ? [] : _ref$signer_infos,\n      _ref$fee = _ref.fee,\n      fee = _ref$fee === void 0 ? {} : _ref$fee,\n      _ref$gas_used = _ref.gas_used,\n      gas_used = _ref$gas_used === void 0 ? null : _ref$gas_used,\n      _ref$gas_wanted = _ref.gas_wanted,\n      gas_wanted = _ref$gas_wanted === void 0 ? null : _ref$gas_wanted,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? null : _ref$height,\n      _ref$code = _ref.code,\n      code = _ref$code === void 0 ? 0 : _ref$code,\n      _ref$log = _ref.log,\n      log = _ref$log === void 0 ? null : _ref$log;\n  return {\n    txHash: txHash,\n    body: {\n      messages: messages,\n      memo: memo\n    },\n    auth_info: {\n      signer_infos: signer_infos,\n      fee: fee\n    },\n    meta: {\n      gas_used: gas_used,\n      gas_wanted: gas_wanted,\n      height: height,\n      code: code,\n      log: log\n    }\n  };\n}\n\nfunction getTx(_x, _x2, _x3) {\n  return _getTx.apply(this, arguments);\n}\n\nfunction _getTx() {\n  _getTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(apiCosmos, apiTendermint, encodedTx) {\n    var txHash, rpcRes, apiRes;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            txHash = (0, _crypto.sha256)((0, _encoding.fromBase64)(encodedTx));\n            _context5.prev = 1;\n            _context5.next = 4;\n            return _axios[\"default\"].get(apiTendermint + '/tx?hash=0x' + (0, _encoding.toHex)(txHash));\n\n          case 4:\n            rpcRes = _context5.sent;\n            _context5.next = 7;\n            return _axios[\"default\"].get(apiCosmos + '/cosmos/tx/v1beta1/txs/' + (0, _encoding.toHex)(txHash));\n\n          case 7:\n            apiRes = _context5.sent;\n            return _context5.abrupt(\"return\", {\n              rpcRes: rpcRes,\n              apiRes: apiRes,\n              txHash: (0, _encoding.toHex)(txHash).toUpperCase()\n            });\n\n          case 11:\n            _context5.prev = 11;\n            _context5.t0 = _context5[\"catch\"](1);\n            throw 'Error fetching TX data';\n\n          case 14:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[1, 11]]);\n  }));\n  return _getTx.apply(this, arguments);\n}\n\nfunction decodeTx(_x4, _x5, _x6) {\n  return _decodeTx.apply(this, arguments);\n}\n\nfunction _decodeTx() {\n  _decodeTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(apiCosmos, apiTendermint, encodedTx) {\n    var fullTx, retries, data, _data$result, height, tx_result, code, log, gas_used, gas_wanted, _fullTx$apiRes$data$t, body, auth_info, messages, memo;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            retries = 0;\n\n          case 1:\n            if (!(!fullTx && retries < 5)) {\n              _context6.next = 15;\n              break;\n            }\n\n            _context6.prev = 2;\n            _context6.next = 5;\n            return getTx(apiCosmos, apiTendermint, encodedTx);\n\n          case 5:\n            fullTx = _context6.sent;\n            _context6.next = 13;\n            break;\n\n          case 8:\n            _context6.prev = 8;\n            _context6.t0 = _context6[\"catch\"](2);\n            retries++;\n            _context6.next = 13;\n            return new Promise(function (resolve) {\n              setTimeout(resolve, 2000);\n            });\n\n          case 13:\n            _context6.next = 1;\n            break;\n\n          case 15:\n            data = fullTx.rpcRes.data;\n            _data$result = data.result, height = _data$result.height, tx_result = _data$result.tx_result;\n            code = tx_result.code, log = tx_result.log, gas_used = tx_result.gas_used, gas_wanted = tx_result.gas_wanted;\n            _fullTx$apiRes$data$t = fullTx.apiRes.data.tx, body = _fullTx$apiRes$data$t.body, auth_info = _fullTx$apiRes$data$t.auth_info;\n            messages = body.messages, memo = body.memo;\n            return _context6.abrupt(\"return\", formatTx({\n              txHash: fullTx.txHash,\n              messages: messages,\n              memo: memo,\n              signer_infos: auth_info.signer_infos,\n              fee: auth_info.fee,\n              gas_used: gas_used,\n              gas_wanted: gas_wanted,\n              height: height,\n              code: code,\n              log: log\n            }));\n\n          case 21:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[2, 8]]);\n  }));\n  return _decodeTx.apply(this, arguments);\n}\n\nvar _default = {\n  namespaced: true,\n  state: function state() {\n    return {\n      blocks: [],\n      size: 20\n    };\n  },\n  getters: {\n    getBlocks: function getBlocks(state) {\n      return function (howmany) {\n        return _toConsumableArray(state.blocks).sort(function (a, b) {\n          return b.height - a.height;\n        }).slice(0, howmany);\n      };\n    },\n    getBlockByHeight: function getBlockByHeight(state) {\n      return function (height) {\n        return state.blocks.find(function (x) {\n          return x.height == height;\n        }) || {};\n      };\n    }\n  },\n  mutations: {\n    ADD_BLOCK: function ADD_BLOCK(state, block) {\n      state.blocks.push(block);\n\n      if (state.blocks.length > state.size) {\n        state.blocks.shift();\n      }\n    },\n    RESET_STATE: function RESET_STATE(state) {\n      state.blocks = [];\n    },\n    SET_SIZE: function SET_SIZE(state, size) {\n      state.size = size;\n    }\n  },\n  actions: {\n    init: function init(_ref2) {\n      var dispatch = _ref2.dispatch,\n          rootGetters = _ref2.rootGetters;\n\n      if (rootGetters['common/env/client']) {\n        rootGetters['common/env/client'].on('newblock', function (data) {\n          dispatch('addBlock', data);\n        });\n      }\n    },\n    getShiftedBlock: function getShiftedBlock(_ref3, blockHeight) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var rootGetters, blockDetails, txDecoded, txs, block;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                rootGetters = _ref3.rootGetters;\n                _context2.prev = 1;\n                _context2.next = 4;\n                return _axios[\"default\"].get(rootGetters['common/env/apiTendermint'] + '/block?height=' + blockHeight);\n\n              case 4:\n                blockDetails = _context2.sent;\n                txDecoded = blockDetails.data.result.block.data.txs.map( /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tx) {\n                    var dec;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return decodeTx(rootGetters['common/env/apiCosmos'], rootGetters['common/env/apiTendermint'], tx);\n\n                          case 2:\n                            dec = _context.sent;\n                            return _context.abrupt(\"return\", dec);\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x7) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }());\n                _context2.next = 8;\n                return Promise.all(txDecoded);\n\n              case 8:\n                txs = _context2.sent;\n                block = {\n                  height: blockDetails.data.result.block.header.height,\n                  timestamp: blockDetails.data.result.block.header.time,\n                  hash: blockDetails.data.result.block_id.hash,\n                  details: blockDetails.data.result.block,\n                  txDecoded: txs\n                };\n                return _context2.abrupt(\"return\", block);\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](1);\n                console.log(_context2.t0);\n                throw new _SpVuexError[\"default\"]('Blocks:AddBlock', 'Could not retrieve block. RPC node unavailable');\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[1, 13]]);\n      }))();\n    },\n    addBlock: function addBlock(_ref5, blockData) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var commit, rootGetters, blockDetails, txDecoded, txs, block;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                commit = _ref5.commit, rootGetters = _ref5.rootGetters;\n                _context4.prev = 1;\n                _context4.next = 4;\n                return _axios[\"default\"].get(rootGetters['common/env/apiTendermint'] + '/block?height=' + blockData.data.value.block.header.height);\n\n              case 4:\n                blockDetails = _context4.sent;\n                txDecoded = blockData.data.value.block.data.txs.map( /*#__PURE__*/function () {\n                  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tx) {\n                    var dec;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.next = 2;\n                            return decodeTx(rootGetters['common/env/apiCosmos'], rootGetters['common/env/apiTendermint'], tx);\n\n                          case 2:\n                            dec = _context3.sent;\n                            return _context3.abrupt(\"return\", dec);\n\n                          case 4:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function (_x8) {\n                    return _ref6.apply(this, arguments);\n                  };\n                }());\n                _context4.next = 8;\n                return Promise.all(txDecoded);\n\n              case 8:\n                txs = _context4.sent;\n                block = {\n                  height: blockData.data.value.block.header.height,\n                  timestamp: blockData.data.value.block.header.time,\n                  hash: blockDetails.data.result.block_id.hash,\n                  details: blockData.data.value.block,\n                  txDecoded: txs\n                };\n                commit('ADD_BLOCK', block);\n                _context4.next = 16;\n                break;\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](1);\n                throw new _SpVuexError[\"default\"]('Blocks:AddBlock', 'Could not add block. RPC node unavailable');\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[1, 13]]);\n      }))();\n    },\n    resetState: function resetState(_ref7) {\n      var commit = _ref7.commit;\n      commit('RESET_STATE');\n    }\n  }\n};\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../../src/modules/common/blocks/blocks.js"],"names":["txHash","messages","memo","signer_infos","fee","gas_used","gas_wanted","height","code","log","body","auth_info","meta","getTx","rpcRes","axios","apiTendermint","apiRes","apiCosmos","decodeTx","retries","fullTx","setTimeout","data","tx_result","formatTx","namespaced","state","blocks","size","getters","getBlocks","b","a","getBlockByHeight","x","mutations","ADD_BLOCK","RESET_STATE","SET_SIZE","actions","init","dispatch","rootGetters","getShiftedBlock","blockDetails","txDecoded","dec","txs","Promise","block","timestamp","hash","details","console","SpVuexError","addBlock","commit","blockData","resetState"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport SpVuexError from '../../../errors/SpVuexError'\nimport { sha256 } from '@cosmjs/crypto'\nimport { fromBase64, toHex } from '@cosmjs/encoding'\n\nfunction formatTx({\n\ttxHash = '',\n\tmessages = [],\n\tmemo = '',\n\tsigner_infos = [],\n\tfee = {},\n\tgas_used = null,\n\tgas_wanted = null,\n\theight = null,\n\tcode = 0,\n\tlog = null,\n}) {\n\treturn {\n\t\ttxHash,\n\t\tbody: {\n\t\t\tmessages,\n\t\t\tmemo,\n\t\t},\n\t\tauth_info: {\n\t\t\tsigner_infos,\n\t\t\tfee,\n\t\t},\n\t\tmeta: {\n\t\t\tgas_used,\n\t\t\tgas_wanted,\n\t\t\theight,\n\t\t\tcode,\n\t\t\tlog,\n\t\t},\n\t}\n}\n\nasync function getTx(apiCosmos, apiTendermint, encodedTx) {\n\tconst txHash = sha256(fromBase64(encodedTx))\n\ttry {\n\t\tconst rpcRes = await axios.get(apiTendermint + '/tx?hash=0x' + toHex(txHash))\n\t\tconst apiRes = await axios.get(apiCosmos + '/cosmos/tx/v1beta1/txs/' + toHex(txHash))\n\t\treturn { rpcRes, apiRes, txHash: toHex(txHash).toUpperCase() }\n\t} catch (e) {\n\t\tthrow 'Error fetching TX data'\n\t}\n}\nasync function decodeTx(apiCosmos, apiTendermint, encodedTx) {\n\tlet fullTx\n\tlet retries = 0\n\twhile (!fullTx && retries < 5) {\n\t\ttry {\n\t\t\tfullTx = await getTx(apiCosmos, apiTendermint, encodedTx)\n\t\t} catch (e) {\n\t\t\tretries++\n\t\t\tawait new Promise((resolve) => {\n\t\t\t\tsetTimeout(resolve, 2000)\n\t\t\t})\n\t\t}\n\t}\n\tconst { data } = fullTx.rpcRes\n\tconst { height, tx_result } = data.result\n\tconst { code, log, gas_used, gas_wanted } = tx_result\n\tconst { body, auth_info } = fullTx.apiRes.data.tx\n\tconst { messages, memo } = body\n\n\treturn formatTx({\n\t\ttxHash: fullTx.txHash,\n\t\tmessages,\n\t\tmemo,\n\t\tsigner_infos: auth_info.signer_infos,\n\t\tfee: auth_info.fee,\n\t\tgas_used,\n\t\tgas_wanted,\n\t\theight,\n\t\tcode,\n\t\tlog,\n\t})\n}\n\nexport default {\n\tnamespaced: true,\n\tstate() {\n\t\treturn {\n\t\t\tblocks: [],\n\t\t\tsize: 20,\n\t\t}\n\t},\n\tgetters: {\n\t\tgetBlocks: (state) => (howmany) => {\n\t\t\treturn [...state.blocks].sort((a, b) => b.height - a.height).slice(0, howmany)\n\t\t},\n\t\tgetBlockByHeight: (state) => (height) => {\n\t\t\treturn state.blocks.find((x) => x.height == height) || {}\n\t\t},\n\t},\n\tmutations: {\n\t\tADD_BLOCK(state, block) {\n\t\t\tstate.blocks.push(block)\n\t\t\tif (state.blocks.length > state.size) {\n\t\t\t\tstate.blocks.shift()\n\t\t\t}\n\t\t},\n\t\tRESET_STATE(state) {\n\t\t\tstate.blocks = []\n\t\t},\n\t\tSET_SIZE(state, size) {\n\t\t\tstate.size = size\n\t\t},\n\t},\n\tactions: {\n\t\tinit({ dispatch, rootGetters }) {\n\t\t\tif (rootGetters['common/env/client']) {\n\t\t\t\trootGetters['common/env/client'].on('newblock', (data) => {\n\t\t\t\t\tdispatch('addBlock', data)\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tasync getShiftedBlock({ rootGetters }, blockHeight) {\n\t\t\ttry {\n\t\t\t\tconst blockDetails = await axios.get(rootGetters['common/env/apiTendermint'] + '/block?height=' + blockHeight)\n\t\t\t\tconst txDecoded = blockDetails.data.result.block.data.txs.map(async (tx) => {\n\t\t\t\t\tconst dec = await decodeTx(rootGetters['common/env/apiCosmos'], rootGetters['common/env/apiTendermint'], tx)\n\t\t\t\t\treturn dec\n\t\t\t\t})\n\t\t\t\tconst txs = await Promise.all(txDecoded)\n\n\t\t\t\tconst block = {\n\t\t\t\t\theight: blockDetails.data.result.block.header.height,\n\t\t\t\t\ttimestamp: blockDetails.data.result.block.header.time,\n\t\t\t\t\thash: blockDetails.data.result.block_id.hash,\n\t\t\t\t\tdetails: blockDetails.data.result.block,\n\t\t\t\t\ttxDecoded: txs,\n\t\t\t\t}\n\n\t\t\t\treturn block\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t\tthrow new SpVuexError('Blocks:AddBlock', 'Could not retrieve block. RPC node unavailable')\n\t\t\t}\n\t\t},\n\t\tasync addBlock({ commit, rootGetters }, blockData) {\n\t\t\ttry {\n\t\t\t\tconst blockDetails = await axios.get(\n\t\t\t\t\trootGetters['common/env/apiTendermint'] + '/block?height=' + blockData.data.value.block.header.height,\n\t\t\t\t)\n\t\t\t\tconst txDecoded = blockData.data.value.block.data.txs.map(async (tx) => {\n\t\t\t\t\tconst dec = await decodeTx(rootGetters['common/env/apiCosmos'], rootGetters['common/env/apiTendermint'], tx)\n\t\t\t\t\treturn dec\n\t\t\t\t})\n\t\t\t\tconst txs = await Promise.all(txDecoded)\n\n\t\t\t\tconst block = {\n\t\t\t\t\theight: blockData.data.value.block.header.height,\n\t\t\t\t\ttimestamp: blockData.data.value.block.header.time,\n\t\t\t\t\thash: blockDetails.data.result.block_id.hash,\n\t\t\t\t\tdetails: blockData.data.value.block,\n\t\t\t\t\ttxDecoded: txs,\n\t\t\t\t}\n\n\t\t\t\tcommit('ADD_BLOCK', block)\n\t\t\t} catch (e) {\n\t\t\t\tthrow new SpVuexError('Blocks:AddBlock', 'Could not add block. RPC node unavailable')\n\t\t\t}\n\t\t},\n\t\tresetState({ commit }) {\n\t\t\tcommit('RESET_STATE')\n\t\t},\n\t},\n}\n"]},"metadata":{},"sourceType":"script"}