{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/* eslint-disable */\nimport { Params, Metadata } from \"../../../cosmos/bank/v1beta1/bank\";\nimport { Coin } from \"../../../cosmos/base/v1beta1/coin\";\nimport { Writer, Reader } from \"protobufjs/minimal\";\nexport const protobufPackage = \"cosmos.bank.v1beta1\";\nconst baseGenesisState = {};\nexport const GenesisState = {\n  encode(message, writer = Writer.create()) {\n    if (message.params !== undefined) {\n      Params.encode(message.params, writer.uint32(10).fork()).ldelim();\n    }\n\n    for (const v of message.balances) {\n      Balance.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n\n    for (const v of message.supply) {\n      Coin.encode(v, writer.uint32(26).fork()).ldelim();\n    }\n\n    for (const v of message.denomMetadata) {\n      Metadata.encode(v, writer.uint32(34).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseGenesisState\n    };\n    message.balances = [];\n    message.supply = [];\n    message.denomMetadata = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.params = Params.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.balances.push(Balance.decode(reader, reader.uint32()));\n          break;\n\n        case 3:\n          message.supply.push(Coin.decode(reader, reader.uint32()));\n          break;\n\n        case 4:\n          message.denomMetadata.push(Metadata.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseGenesisState\n    };\n    message.balances = [];\n    message.supply = [];\n    message.denomMetadata = [];\n\n    if (object.params !== undefined && object.params !== null) {\n      message.params = Params.fromJSON(object.params);\n    } else {\n      message.params = undefined;\n    }\n\n    if (object.balances !== undefined && object.balances !== null) {\n      for (const e of object.balances) {\n        message.balances.push(Balance.fromJSON(e));\n      }\n    }\n\n    if (object.supply !== undefined && object.supply !== null) {\n      for (const e of object.supply) {\n        message.supply.push(Coin.fromJSON(e));\n      }\n    }\n\n    if (object.denomMetadata !== undefined && object.denomMetadata !== null) {\n      for (const e of object.denomMetadata) {\n        message.denomMetadata.push(Metadata.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.params !== undefined && (obj.params = message.params ? Params.toJSON(message.params) : undefined);\n\n    if (message.balances) {\n      obj.balances = message.balances.map(e => e ? Balance.toJSON(e) : undefined);\n    } else {\n      obj.balances = [];\n    }\n\n    if (message.supply) {\n      obj.supply = message.supply.map(e => e ? Coin.toJSON(e) : undefined);\n    } else {\n      obj.supply = [];\n    }\n\n    if (message.denomMetadata) {\n      obj.denomMetadata = message.denomMetadata.map(e => e ? Metadata.toJSON(e) : undefined);\n    } else {\n      obj.denomMetadata = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseGenesisState\n    };\n    message.balances = [];\n    message.supply = [];\n    message.denomMetadata = [];\n\n    if (object.params !== undefined && object.params !== null) {\n      message.params = Params.fromPartial(object.params);\n    } else {\n      message.params = undefined;\n    }\n\n    if (object.balances !== undefined && object.balances !== null) {\n      for (const e of object.balances) {\n        message.balances.push(Balance.fromPartial(e));\n      }\n    }\n\n    if (object.supply !== undefined && object.supply !== null) {\n      for (const e of object.supply) {\n        message.supply.push(Coin.fromPartial(e));\n      }\n    }\n\n    if (object.denomMetadata !== undefined && object.denomMetadata !== null) {\n      for (const e of object.denomMetadata) {\n        message.denomMetadata.push(Metadata.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseBalance = {\n  address: \"\"\n};\nexport const Balance = {\n  encode(message, writer = Writer.create()) {\n    if (message.address !== \"\") {\n      writer.uint32(10).string(message.address);\n    }\n\n    for (const v of message.coins) {\n      Coin.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseBalance\n    };\n    message.coins = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.string();\n          break;\n\n        case 2:\n          message.coins.push(Coin.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseBalance\n    };\n    message.coins = [];\n\n    if (object.address !== undefined && object.address !== null) {\n      message.address = String(object.address);\n    } else {\n      message.address = \"\";\n    }\n\n    if (object.coins !== undefined && object.coins !== null) {\n      for (const e of object.coins) {\n        message.coins.push(Coin.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.address !== undefined && (obj.address = message.address);\n\n    if (message.coins) {\n      obj.coins = message.coins.map(e => e ? Coin.toJSON(e) : undefined);\n    } else {\n      obj.coins = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseBalance\n    };\n    message.coins = [];\n\n    if (object.address !== undefined && object.address !== null) {\n      message.address = object.address;\n    } else {\n      message.address = \"\";\n    }\n\n    if (object.coins !== undefined && object.coins !== null) {\n      for (const e of object.coins) {\n        message.coins.push(Coin.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};","map":{"version":3,"sources":["/home/lisoleg/checkers/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.bank.v1beta1/module/types/cosmos/bank/v1beta1/genesis.js"],"names":["Params","Metadata","Coin","Writer","Reader","protobufPackage","baseGenesisState","GenesisState","encode","message","writer","create","params","undefined","uint32","fork","ldelim","v","balances","Balance","supply","denomMetadata","decode","input","length","reader","Uint8Array","end","len","pos","tag","push","skipType","fromJSON","object","e","toJSON","obj","map","fromPartial","baseBalance","address","string","coins","String"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { Params, Metadata } from \"../../../cosmos/bank/v1beta1/bank\";\nimport { Coin } from \"../../../cosmos/base/v1beta1/coin\";\nimport { Writer, Reader } from \"protobufjs/minimal\";\nexport const protobufPackage = \"cosmos.bank.v1beta1\";\nconst baseGenesisState = {};\nexport const GenesisState = {\n    encode(message, writer = Writer.create()) {\n        if (message.params !== undefined) {\n            Params.encode(message.params, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.balances) {\n            Balance.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        for (const v of message.supply) {\n            Coin.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.denomMetadata) {\n            Metadata.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseGenesisState };\n        message.balances = [];\n        message.supply = [];\n        message.denomMetadata = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.params = Params.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.balances.push(Balance.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.supply.push(Coin.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.denomMetadata.push(Metadata.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseGenesisState };\n        message.balances = [];\n        message.supply = [];\n        message.denomMetadata = [];\n        if (object.params !== undefined && object.params !== null) {\n            message.params = Params.fromJSON(object.params);\n        }\n        else {\n            message.params = undefined;\n        }\n        if (object.balances !== undefined && object.balances !== null) {\n            for (const e of object.balances) {\n                message.balances.push(Balance.fromJSON(e));\n            }\n        }\n        if (object.supply !== undefined && object.supply !== null) {\n            for (const e of object.supply) {\n                message.supply.push(Coin.fromJSON(e));\n            }\n        }\n        if (object.denomMetadata !== undefined && object.denomMetadata !== null) {\n            for (const e of object.denomMetadata) {\n                message.denomMetadata.push(Metadata.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.params !== undefined &&\n            (obj.params = message.params ? Params.toJSON(message.params) : undefined);\n        if (message.balances) {\n            obj.balances = message.balances.map((e) => e ? Balance.toJSON(e) : undefined);\n        }\n        else {\n            obj.balances = [];\n        }\n        if (message.supply) {\n            obj.supply = message.supply.map((e) => (e ? Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.supply = [];\n        }\n        if (message.denomMetadata) {\n            obj.denomMetadata = message.denomMetadata.map((e) => e ? Metadata.toJSON(e) : undefined);\n        }\n        else {\n            obj.denomMetadata = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseGenesisState };\n        message.balances = [];\n        message.supply = [];\n        message.denomMetadata = [];\n        if (object.params !== undefined && object.params !== null) {\n            message.params = Params.fromPartial(object.params);\n        }\n        else {\n            message.params = undefined;\n        }\n        if (object.balances !== undefined && object.balances !== null) {\n            for (const e of object.balances) {\n                message.balances.push(Balance.fromPartial(e));\n            }\n        }\n        if (object.supply !== undefined && object.supply !== null) {\n            for (const e of object.supply) {\n                message.supply.push(Coin.fromPartial(e));\n            }\n        }\n        if (object.denomMetadata !== undefined && object.denomMetadata !== null) {\n            for (const e of object.denomMetadata) {\n                message.denomMetadata.push(Metadata.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseBalance = { address: \"\" };\nexport const Balance = {\n    encode(message, writer = Writer.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        for (const v of message.coins) {\n            Coin.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseBalance };\n        message.coins = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.coins.push(Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseBalance };\n        message.coins = [];\n        if (object.address !== undefined && object.address !== null) {\n            message.address = String(object.address);\n        }\n        else {\n            message.address = \"\";\n        }\n        if (object.coins !== undefined && object.coins !== null) {\n            for (const e of object.coins) {\n                message.coins.push(Coin.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        if (message.coins) {\n            obj.coins = message.coins.map((e) => (e ? Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.coins = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseBalance };\n        message.coins = [];\n        if (object.address !== undefined && object.address !== null) {\n            message.address = object.address;\n        }\n        else {\n            message.address = \"\";\n        }\n        if (object.coins !== undefined && object.coins !== null) {\n            for (const e of object.coins) {\n                message.coins.push(Coin.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\n"]},"metadata":{},"sourceType":"module"}