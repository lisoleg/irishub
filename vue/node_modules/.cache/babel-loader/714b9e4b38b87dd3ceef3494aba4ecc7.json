{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/* eslint-disable */\nimport { Writer, Reader } from \"protobufjs/minimal\";\nexport const protobufPackage = \"irismod.nft\";\nconst baseBasenft = {\n  id: \"\",\n  name: \"\",\n  uri: \"\",\n  data: \"\",\n  owner: \"\"\n};\nexport const Basenft = {\n  encode(message, writer = Writer.create()) {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n\n    if (message.name !== \"\") {\n      writer.uint32(18).string(message.name);\n    }\n\n    if (message.uri !== \"\") {\n      writer.uint32(26).string(message.uri);\n    }\n\n    if (message.data !== \"\") {\n      writer.uint32(34).string(message.data);\n    }\n\n    if (message.owner !== \"\") {\n      writer.uint32(42).string(message.owner);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseBasenft\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.string();\n          break;\n\n        case 2:\n          message.name = reader.string();\n          break;\n\n        case 3:\n          message.uri = reader.string();\n          break;\n\n        case 4:\n          message.data = reader.string();\n          break;\n\n        case 5:\n          message.owner = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseBasenft\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = String(object.id);\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.name !== undefined && object.name !== null) {\n      message.name = String(object.name);\n    } else {\n      message.name = \"\";\n    }\n\n    if (object.uri !== undefined && object.uri !== null) {\n      message.uri = String(object.uri);\n    } else {\n      message.uri = \"\";\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = String(object.data);\n    } else {\n      message.data = \"\";\n    }\n\n    if (object.owner !== undefined && object.owner !== null) {\n      message.owner = String(object.owner);\n    } else {\n      message.owner = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.id !== undefined && (obj.id = message.id);\n    message.name !== undefined && (obj.name = message.name);\n    message.uri !== undefined && (obj.uri = message.uri);\n    message.data !== undefined && (obj.data = message.data);\n    message.owner !== undefined && (obj.owner = message.owner);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseBasenft\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = object.id;\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.name !== undefined && object.name !== null) {\n      message.name = object.name;\n    } else {\n      message.name = \"\";\n    }\n\n    if (object.uri !== undefined && object.uri !== null) {\n      message.uri = object.uri;\n    } else {\n      message.uri = \"\";\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = \"\";\n    }\n\n    if (object.owner !== undefined && object.owner !== null) {\n      message.owner = object.owner;\n    } else {\n      message.owner = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseDenom = {\n  id: \"\",\n  name: \"\",\n  schema: \"\",\n  creator: \"\",\n  symbol: \"\",\n  mintRestricted: false,\n  updateRestricted: false\n};\nexport const Denom = {\n  encode(message, writer = Writer.create()) {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n\n    if (message.name !== \"\") {\n      writer.uint32(18).string(message.name);\n    }\n\n    if (message.schema !== \"\") {\n      writer.uint32(26).string(message.schema);\n    }\n\n    if (message.creator !== \"\") {\n      writer.uint32(34).string(message.creator);\n    }\n\n    if (message.symbol !== \"\") {\n      writer.uint32(42).string(message.symbol);\n    }\n\n    if (message.mintRestricted === true) {\n      writer.uint32(48).bool(message.mintRestricted);\n    }\n\n    if (message.updateRestricted === true) {\n      writer.uint32(56).bool(message.updateRestricted);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseDenom\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.string();\n          break;\n\n        case 2:\n          message.name = reader.string();\n          break;\n\n        case 3:\n          message.schema = reader.string();\n          break;\n\n        case 4:\n          message.creator = reader.string();\n          break;\n\n        case 5:\n          message.symbol = reader.string();\n          break;\n\n        case 6:\n          message.mintRestricted = reader.bool();\n          break;\n\n        case 7:\n          message.updateRestricted = reader.bool();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseDenom\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = String(object.id);\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.name !== undefined && object.name !== null) {\n      message.name = String(object.name);\n    } else {\n      message.name = \"\";\n    }\n\n    if (object.schema !== undefined && object.schema !== null) {\n      message.schema = String(object.schema);\n    } else {\n      message.schema = \"\";\n    }\n\n    if (object.creator !== undefined && object.creator !== null) {\n      message.creator = String(object.creator);\n    } else {\n      message.creator = \"\";\n    }\n\n    if (object.symbol !== undefined && object.symbol !== null) {\n      message.symbol = String(object.symbol);\n    } else {\n      message.symbol = \"\";\n    }\n\n    if (object.mintRestricted !== undefined && object.mintRestricted !== null) {\n      message.mintRestricted = Boolean(object.mintRestricted);\n    } else {\n      message.mintRestricted = false;\n    }\n\n    if (object.updateRestricted !== undefined && object.updateRestricted !== null) {\n      message.updateRestricted = Boolean(object.updateRestricted);\n    } else {\n      message.updateRestricted = false;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.id !== undefined && (obj.id = message.id);\n    message.name !== undefined && (obj.name = message.name);\n    message.schema !== undefined && (obj.schema = message.schema);\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.symbol !== undefined && (obj.symbol = message.symbol);\n    message.mintRestricted !== undefined && (obj.mintRestricted = message.mintRestricted);\n    message.updateRestricted !== undefined && (obj.updateRestricted = message.updateRestricted);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseDenom\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = object.id;\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.name !== undefined && object.name !== null) {\n      message.name = object.name;\n    } else {\n      message.name = \"\";\n    }\n\n    if (object.schema !== undefined && object.schema !== null) {\n      message.schema = object.schema;\n    } else {\n      message.schema = \"\";\n    }\n\n    if (object.creator !== undefined && object.creator !== null) {\n      message.creator = object.creator;\n    } else {\n      message.creator = \"\";\n    }\n\n    if (object.symbol !== undefined && object.symbol !== null) {\n      message.symbol = object.symbol;\n    } else {\n      message.symbol = \"\";\n    }\n\n    if (object.mintRestricted !== undefined && object.mintRestricted !== null) {\n      message.mintRestricted = object.mintRestricted;\n    } else {\n      message.mintRestricted = false;\n    }\n\n    if (object.updateRestricted !== undefined && object.updateRestricted !== null) {\n      message.updateRestricted = object.updateRestricted;\n    } else {\n      message.updateRestricted = false;\n    }\n\n    return message;\n  }\n\n};\nconst baseIDCollection = {\n  denomId: \"\",\n  tokenIds: \"\"\n};\nexport const IDCollection = {\n  encode(message, writer = Writer.create()) {\n    if (message.denomId !== \"\") {\n      writer.uint32(10).string(message.denomId);\n    }\n\n    for (const v of message.tokenIds) {\n      writer.uint32(18).string(v);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseIDCollection\n    };\n    message.tokenIds = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.denomId = reader.string();\n          break;\n\n        case 2:\n          message.tokenIds.push(reader.string());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseIDCollection\n    };\n    message.tokenIds = [];\n\n    if (object.denomId !== undefined && object.denomId !== null) {\n      message.denomId = String(object.denomId);\n    } else {\n      message.denomId = \"\";\n    }\n\n    if (object.tokenIds !== undefined && object.tokenIds !== null) {\n      for (const e of object.tokenIds) {\n        message.tokenIds.push(String(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.denomId !== undefined && (obj.denomId = message.denomId);\n\n    if (message.tokenIds) {\n      obj.tokenIds = message.tokenIds.map(e => e);\n    } else {\n      obj.tokenIds = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseIDCollection\n    };\n    message.tokenIds = [];\n\n    if (object.denomId !== undefined && object.denomId !== null) {\n      message.denomId = object.denomId;\n    } else {\n      message.denomId = \"\";\n    }\n\n    if (object.tokenIds !== undefined && object.tokenIds !== null) {\n      for (const e of object.tokenIds) {\n        message.tokenIds.push(e);\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseOwner = {\n  address: \"\"\n};\nexport const Owner = {\n  encode(message, writer = Writer.create()) {\n    if (message.address !== \"\") {\n      writer.uint32(10).string(message.address);\n    }\n\n    for (const v of message.idCollections) {\n      IDCollection.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseOwner\n    };\n    message.idCollections = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.string();\n          break;\n\n        case 2:\n          message.idCollections.push(IDCollection.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseOwner\n    };\n    message.idCollections = [];\n\n    if (object.address !== undefined && object.address !== null) {\n      message.address = String(object.address);\n    } else {\n      message.address = \"\";\n    }\n\n    if (object.idCollections !== undefined && object.idCollections !== null) {\n      for (const e of object.idCollections) {\n        message.idCollections.push(IDCollection.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.address !== undefined && (obj.address = message.address);\n\n    if (message.idCollections) {\n      obj.idCollections = message.idCollections.map(e => e ? IDCollection.toJSON(e) : undefined);\n    } else {\n      obj.idCollections = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseOwner\n    };\n    message.idCollections = [];\n\n    if (object.address !== undefined && object.address !== null) {\n      message.address = object.address;\n    } else {\n      message.address = \"\";\n    }\n\n    if (object.idCollections !== undefined && object.idCollections !== null) {\n      for (const e of object.idCollections) {\n        message.idCollections.push(IDCollection.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseCollection = {};\nexport const Collection = {\n  encode(message, writer = Writer.create()) {\n    if (message.denom !== undefined) {\n      Denom.encode(message.denom, writer.uint32(10).fork()).ldelim();\n    }\n\n    for (const v of message.nfts) {\n      Basenft.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseCollection\n    };\n    message.nfts = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = Denom.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.nfts.push(Basenft.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseCollection\n    };\n    message.nfts = [];\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = Denom.fromJSON(object.denom);\n    } else {\n      message.denom = undefined;\n    }\n\n    if (object.nfts !== undefined && object.nfts !== null) {\n      for (const e of object.nfts) {\n        message.nfts.push(Basenft.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.denom !== undefined && (obj.denom = message.denom ? Denom.toJSON(message.denom) : undefined);\n\n    if (message.nfts) {\n      obj.nfts = message.nfts.map(e => e ? Basenft.toJSON(e) : undefined);\n    } else {\n      obj.nfts = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseCollection\n    };\n    message.nfts = [];\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = Denom.fromPartial(object.denom);\n    } else {\n      message.denom = undefined;\n    }\n\n    if (object.nfts !== undefined && object.nfts !== null) {\n      for (const e of object.nfts) {\n        message.nfts.push(Basenft.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};","map":{"version":3,"sources":["/home/lisoleg/checkers/vue/src/store/generated/alice/checkers/irismod.nft/module/types/nft/nft.js"],"names":["Writer","Reader","protobufPackage","baseBasenft","id","name","uri","data","owner","Basenft","encode","message","writer","create","uint32","string","decode","input","length","reader","Uint8Array","end","undefined","len","pos","tag","skipType","fromJSON","object","String","toJSON","obj","fromPartial","baseDenom","schema","creator","symbol","mintRestricted","updateRestricted","Denom","bool","Boolean","baseIDCollection","denomId","tokenIds","IDCollection","v","push","e","map","baseOwner","address","Owner","idCollections","fork","ldelim","baseCollection","Collection","denom","nfts"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { Writer, Reader } from \"protobufjs/minimal\";\nexport const protobufPackage = \"irismod.nft\";\nconst baseBasenft = { id: \"\", name: \"\", uri: \"\", data: \"\", owner: \"\" };\nexport const Basenft = {\n    encode(message, writer = Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.uri !== \"\") {\n            writer.uint32(26).string(message.uri);\n        }\n        if (message.data !== \"\") {\n            writer.uint32(34).string(message.data);\n        }\n        if (message.owner !== \"\") {\n            writer.uint32(42).string(message.owner);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseBasenft };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.uri = reader.string();\n                    break;\n                case 4:\n                    message.data = reader.string();\n                    break;\n                case 5:\n                    message.owner = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseBasenft };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = String(object.id);\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.name !== undefined && object.name !== null) {\n            message.name = String(object.name);\n        }\n        else {\n            message.name = \"\";\n        }\n        if (object.uri !== undefined && object.uri !== null) {\n            message.uri = String(object.uri);\n        }\n        else {\n            message.uri = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = String(object.data);\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.owner !== undefined && object.owner !== null) {\n            message.owner = String(object.owner);\n        }\n        else {\n            message.owner = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.id !== undefined && (obj.id = message.id);\n        message.name !== undefined && (obj.name = message.name);\n        message.uri !== undefined && (obj.uri = message.uri);\n        message.data !== undefined && (obj.data = message.data);\n        message.owner !== undefined && (obj.owner = message.owner);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseBasenft };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = object.id;\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.name !== undefined && object.name !== null) {\n            message.name = object.name;\n        }\n        else {\n            message.name = \"\";\n        }\n        if (object.uri !== undefined && object.uri !== null) {\n            message.uri = object.uri;\n        }\n        else {\n            message.uri = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.owner !== undefined && object.owner !== null) {\n            message.owner = object.owner;\n        }\n        else {\n            message.owner = \"\";\n        }\n        return message;\n    },\n};\nconst baseDenom = {\n    id: \"\",\n    name: \"\",\n    schema: \"\",\n    creator: \"\",\n    symbol: \"\",\n    mintRestricted: false,\n    updateRestricted: false,\n};\nexport const Denom = {\n    encode(message, writer = Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.schema !== \"\") {\n            writer.uint32(26).string(message.schema);\n        }\n        if (message.creator !== \"\") {\n            writer.uint32(34).string(message.creator);\n        }\n        if (message.symbol !== \"\") {\n            writer.uint32(42).string(message.symbol);\n        }\n        if (message.mintRestricted === true) {\n            writer.uint32(48).bool(message.mintRestricted);\n        }\n        if (message.updateRestricted === true) {\n            writer.uint32(56).bool(message.updateRestricted);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseDenom };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.schema = reader.string();\n                    break;\n                case 4:\n                    message.creator = reader.string();\n                    break;\n                case 5:\n                    message.symbol = reader.string();\n                    break;\n                case 6:\n                    message.mintRestricted = reader.bool();\n                    break;\n                case 7:\n                    message.updateRestricted = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseDenom };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = String(object.id);\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.name !== undefined && object.name !== null) {\n            message.name = String(object.name);\n        }\n        else {\n            message.name = \"\";\n        }\n        if (object.schema !== undefined && object.schema !== null) {\n            message.schema = String(object.schema);\n        }\n        else {\n            message.schema = \"\";\n        }\n        if (object.creator !== undefined && object.creator !== null) {\n            message.creator = String(object.creator);\n        }\n        else {\n            message.creator = \"\";\n        }\n        if (object.symbol !== undefined && object.symbol !== null) {\n            message.symbol = String(object.symbol);\n        }\n        else {\n            message.symbol = \"\";\n        }\n        if (object.mintRestricted !== undefined && object.mintRestricted !== null) {\n            message.mintRestricted = Boolean(object.mintRestricted);\n        }\n        else {\n            message.mintRestricted = false;\n        }\n        if (object.updateRestricted !== undefined &&\n            object.updateRestricted !== null) {\n            message.updateRestricted = Boolean(object.updateRestricted);\n        }\n        else {\n            message.updateRestricted = false;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.id !== undefined && (obj.id = message.id);\n        message.name !== undefined && (obj.name = message.name);\n        message.schema !== undefined && (obj.schema = message.schema);\n        message.creator !== undefined && (obj.creator = message.creator);\n        message.symbol !== undefined && (obj.symbol = message.symbol);\n        message.mintRestricted !== undefined &&\n            (obj.mintRestricted = message.mintRestricted);\n        message.updateRestricted !== undefined &&\n            (obj.updateRestricted = message.updateRestricted);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseDenom };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = object.id;\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.name !== undefined && object.name !== null) {\n            message.name = object.name;\n        }\n        else {\n            message.name = \"\";\n        }\n        if (object.schema !== undefined && object.schema !== null) {\n            message.schema = object.schema;\n        }\n        else {\n            message.schema = \"\";\n        }\n        if (object.creator !== undefined && object.creator !== null) {\n            message.creator = object.creator;\n        }\n        else {\n            message.creator = \"\";\n        }\n        if (object.symbol !== undefined && object.symbol !== null) {\n            message.symbol = object.symbol;\n        }\n        else {\n            message.symbol = \"\";\n        }\n        if (object.mintRestricted !== undefined && object.mintRestricted !== null) {\n            message.mintRestricted = object.mintRestricted;\n        }\n        else {\n            message.mintRestricted = false;\n        }\n        if (object.updateRestricted !== undefined &&\n            object.updateRestricted !== null) {\n            message.updateRestricted = object.updateRestricted;\n        }\n        else {\n            message.updateRestricted = false;\n        }\n        return message;\n    },\n};\nconst baseIDCollection = { denomId: \"\", tokenIds: \"\" };\nexport const IDCollection = {\n    encode(message, writer = Writer.create()) {\n        if (message.denomId !== \"\") {\n            writer.uint32(10).string(message.denomId);\n        }\n        for (const v of message.tokenIds) {\n            writer.uint32(18).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseIDCollection };\n        message.tokenIds = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.denomId = reader.string();\n                    break;\n                case 2:\n                    message.tokenIds.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseIDCollection };\n        message.tokenIds = [];\n        if (object.denomId !== undefined && object.denomId !== null) {\n            message.denomId = String(object.denomId);\n        }\n        else {\n            message.denomId = \"\";\n        }\n        if (object.tokenIds !== undefined && object.tokenIds !== null) {\n            for (const e of object.tokenIds) {\n                message.tokenIds.push(String(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.denomId !== undefined && (obj.denomId = message.denomId);\n        if (message.tokenIds) {\n            obj.tokenIds = message.tokenIds.map((e) => e);\n        }\n        else {\n            obj.tokenIds = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseIDCollection };\n        message.tokenIds = [];\n        if (object.denomId !== undefined && object.denomId !== null) {\n            message.denomId = object.denomId;\n        }\n        else {\n            message.denomId = \"\";\n        }\n        if (object.tokenIds !== undefined && object.tokenIds !== null) {\n            for (const e of object.tokenIds) {\n                message.tokenIds.push(e);\n            }\n        }\n        return message;\n    },\n};\nconst baseOwner = { address: \"\" };\nexport const Owner = {\n    encode(message, writer = Writer.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        for (const v of message.idCollections) {\n            IDCollection.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseOwner };\n        message.idCollections = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.idCollections.push(IDCollection.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseOwner };\n        message.idCollections = [];\n        if (object.address !== undefined && object.address !== null) {\n            message.address = String(object.address);\n        }\n        else {\n            message.address = \"\";\n        }\n        if (object.idCollections !== undefined && object.idCollections !== null) {\n            for (const e of object.idCollections) {\n                message.idCollections.push(IDCollection.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        if (message.idCollections) {\n            obj.idCollections = message.idCollections.map((e) => e ? IDCollection.toJSON(e) : undefined);\n        }\n        else {\n            obj.idCollections = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseOwner };\n        message.idCollections = [];\n        if (object.address !== undefined && object.address !== null) {\n            message.address = object.address;\n        }\n        else {\n            message.address = \"\";\n        }\n        if (object.idCollections !== undefined && object.idCollections !== null) {\n            for (const e of object.idCollections) {\n                message.idCollections.push(IDCollection.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseCollection = {};\nexport const Collection = {\n    encode(message, writer = Writer.create()) {\n        if (message.denom !== undefined) {\n            Denom.encode(message.denom, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.nfts) {\n            Basenft.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseCollection };\n        message.nfts = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.denom = Denom.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nfts.push(Basenft.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseCollection };\n        message.nfts = [];\n        if (object.denom !== undefined && object.denom !== null) {\n            message.denom = Denom.fromJSON(object.denom);\n        }\n        else {\n            message.denom = undefined;\n        }\n        if (object.nfts !== undefined && object.nfts !== null) {\n            for (const e of object.nfts) {\n                message.nfts.push(Basenft.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.denom !== undefined &&\n            (obj.denom = message.denom ? Denom.toJSON(message.denom) : undefined);\n        if (message.nfts) {\n            obj.nfts = message.nfts.map((e) => (e ? Basenft.toJSON(e) : undefined));\n        }\n        else {\n            obj.nfts = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseCollection };\n        message.nfts = [];\n        if (object.denom !== undefined && object.denom !== null) {\n            message.denom = Denom.fromPartial(object.denom);\n        }\n        else {\n            message.denom = undefined;\n        }\n        if (object.nfts !== undefined && object.nfts !== null) {\n            for (const e of object.nfts) {\n                message.nfts.push(Basenft.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\n"]},"metadata":{},"sourceType":"module"}