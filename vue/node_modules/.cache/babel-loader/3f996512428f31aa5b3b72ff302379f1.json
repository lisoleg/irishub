{"ast":null,"code":"import { txClient, queryClient, MissingWalletError, registry } from './module'; // @ts-ignore\n\nimport { SpVuexError } from '@starport/vuex';\nimport { Basenft } from \"./module/types/nft/nft\";\nimport { Denom } from \"./module/types/nft/nft\";\nimport { IDCollection } from \"./module/types/nft/nft\";\nimport { Owner } from \"./module/types/nft/nft\";\nimport { Collection } from \"./module/types/nft/nft\";\nexport { Basenft, Denom, IDCollection, Owner, Collection };\n\nasync function initTxClient(vuexGetters) {\n  return await txClient(vuexGetters['common/wallet/signer'], {\n    addr: vuexGetters['common/env/apiTendermint']\n  });\n}\n\nasync function initQueryClient(vuexGetters) {\n  return await queryClient({\n    addr: vuexGetters['common/env/apiCosmos']\n  });\n}\n\nfunction mergeResults(value, next_values) {\n  for (let prop of Object.keys(next_values)) {\n    if (Array.isArray(next_values[prop])) {\n      value[prop] = [...value[prop], ...next_values[prop]];\n    } else {\n      value[prop] = next_values[prop];\n    }\n  }\n\n  return value;\n}\n\nfunction getStructure(template) {\n  let structure = {\n    fields: []\n  };\n\n  for (const [key, value] of Object.entries(template)) {\n    let field = {};\n    field.name = key;\n    field.type = typeof value;\n    structure.fields.push(field);\n  }\n\n  return structure;\n}\n\nconst getDefaultState = () => {\n  return {\n    Supply: {},\n    Owner: {},\n    Collection: {},\n    Denom: {},\n    Denoms: {},\n    Nft: {},\n    _Structure: {\n      Basenft: getStructure(Basenft.fromPartial({})),\n      Denom: getStructure(Denom.fromPartial({})),\n      IDCollection: getStructure(IDCollection.fromPartial({})),\n      Owner: getStructure(Owner.fromPartial({})),\n      Collection: getStructure(Collection.fromPartial({}))\n    },\n    _Registry: registry,\n    _Subscriptions: new Set()\n  };\n}; // initial state\n\n\nconst state = getDefaultState();\nexport default {\n  namespaced: true,\n  state,\n  mutations: {\n    RESET_STATE(state) {\n      Object.assign(state, getDefaultState());\n    },\n\n    QUERY(state, {\n      query,\n      key,\n      value\n    }) {\n      state[query][JSON.stringify(key)] = value;\n    },\n\n    SUBSCRIBE(state, subscription) {\n      state._Subscriptions.add(JSON.stringify(subscription));\n    },\n\n    UNSUBSCRIBE(state, subscription) {\n      state._Subscriptions.delete(JSON.stringify(subscription));\n    }\n\n  },\n  getters: {\n    getSupply: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Supply[JSON.stringify(params)] ?? {};\n    },\n    getOwner: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Owner[JSON.stringify(params)] ?? {};\n    },\n    getCollection: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Collection[JSON.stringify(params)] ?? {};\n    },\n    getDenom: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Denom[JSON.stringify(params)] ?? {};\n    },\n    getDenoms: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Denoms[JSON.stringify(params)] ?? {};\n    },\n    getNft: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Nft[JSON.stringify(params)] ?? {};\n    },\n    getTypeStructure: state => type => {\n      return state._Structure[type].fields;\n    },\n    getRegistry: state => {\n      return state._Registry;\n    }\n  },\n  actions: {\n    init({\n      dispatch,\n      rootGetters\n    }) {\n      console.log('Vuex module: irismod.nft initialized!');\n\n      if (rootGetters['common/env/client']) {\n        rootGetters['common/env/client'].on('newblock', () => {\n          dispatch('StoreUpdate');\n        });\n      }\n    },\n\n    resetState({\n      commit\n    }) {\n      commit('RESET_STATE');\n    },\n\n    unsubscribe({\n      commit\n    }, subscription) {\n      commit('UNSUBSCRIBE', subscription);\n    },\n\n    async StoreUpdate({\n      state,\n      dispatch\n    }) {\n      state._Subscriptions.forEach(async subscription => {\n        try {\n          const sub = JSON.parse(subscription);\n          await dispatch(sub.action, sub.payload);\n        } catch (e) {\n          throw new SpVuexError('Subscriptions: ' + e.message);\n        }\n      });\n    },\n\n    async QuerySupply({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.querySupply(key.denom_id, query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.querySupply(key.denom_id, { ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'Supply',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QuerySupply',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getSupply']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QuerySupply', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryOwner({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryOwner(query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryOwner({ ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'Owner',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryOwner',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getOwner']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryOwner', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryCollection({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryCollection(key.denom_id, query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryCollection(key.denom_id, { ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'Collection',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryCollection',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getCollection']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryCollection', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDenom({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDenom(key.denom_id)).data;\n        commit('QUERY', {\n          query: 'Denom',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDenom',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDenom']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDenom', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDenoms({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDenoms(query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryDenoms({ ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'Denoms',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDenoms',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDenoms']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDenoms', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryNft({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryNft(key.denom_id, key.token_id)).data;\n        commit('QUERY', {\n          query: 'Nft',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryNft',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getNft']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryNft', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async sendMsgMintnft({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgMintnft(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgMintnft:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgMintnft:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgBurnnft({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgBurnnft(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgBurnnft:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgBurnnft:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgIssueDenom({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgIssueDenom(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgIssueDenom:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgIssueDenom:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgTransferDenom({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgTransferDenom(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgTransferDenom:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgTransferDenom:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgTransfernft({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgTransfernft(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgTransfernft:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgTransfernft:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgEditnft({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgEditnft(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgEditnft:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgEditnft:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async MsgMintnft({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgMintnft(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgMintnft:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgMintnft:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgBurnnft({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgBurnnft(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgBurnnft:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgBurnnft:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgIssueDenom({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgIssueDenom(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgIssueDenom:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgIssueDenom:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgTransferDenom({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgTransferDenom(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgTransferDenom:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgTransferDenom:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgTransfernft({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgTransfernft(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgTransfernft:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgTransfernft:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgEditnft({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgEditnft(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgEditnft:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgEditnft:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/lisoleg/checkers/vue/src/store/generated/alice/checkers/irismod.nft/index.js"],"names":["txClient","queryClient","MissingWalletError","registry","SpVuexError","Basenft","Denom","IDCollection","Owner","Collection","initTxClient","vuexGetters","addr","initQueryClient","mergeResults","value","next_values","prop","Object","keys","Array","isArray","getStructure","template","structure","fields","key","entries","field","name","type","push","getDefaultState","Supply","Denoms","Nft","_Structure","fromPartial","_Registry","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","delete","getters","getSupply","params","getOwner","getCollection","getDenom","getDenoms","getNft","getTypeStructure","getRegistry","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","sub","parse","action","payload","e","message","QuerySupply","options","subscribe","all","querySupply","denom_id","data","pagination","next_key","QueryOwner","queryOwner","QueryCollection","queryCollection","QueryDenom","queryDenom","QueryDenoms","queryDenoms","QueryNft","queryNft","token_id","sendMsgMintnft","fee","memo","msg","msgMintnft","result","signAndBroadcast","amount","gas","sendMsgBurnnft","msgBurnnft","sendMsgIssueDenom","msgIssueDenom","sendMsgTransferDenom","msgTransferDenom","sendMsgTransfernft","msgTransfernft","sendMsgEditnft","msgEditnft","MsgMintnft","MsgBurnnft","MsgIssueDenom","MsgTransferDenom","MsgTransfernft","MsgEditnft"],"mappings":"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","sourcesContent":["import { txClient, queryClient, MissingWalletError, registry } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { Basenft } from \"./module/types/nft/nft\";\nimport { Denom } from \"./module/types/nft/nft\";\nimport { IDCollection } from \"./module/types/nft/nft\";\nimport { Owner } from \"./module/types/nft/nft\";\nimport { Collection } from \"./module/types/nft/nft\";\nexport { Basenft, Denom, IDCollection, Owner, Collection };\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction mergeResults(value, next_values) {\n    for (let prop of Object.keys(next_values)) {\n        if (Array.isArray(next_values[prop])) {\n            value[prop] = [...value[prop], ...next_values[prop]];\n        }\n        else {\n            value[prop] = next_values[prop];\n        }\n    }\n    return value;\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        Supply: {},\n        Owner: {},\n        Collection: {},\n        Denom: {},\n        Denoms: {},\n        Nft: {},\n        _Structure: {\n            Basenft: getStructure(Basenft.fromPartial({})),\n            Denom: getStructure(Denom.fromPartial({})),\n            IDCollection: getStructure(IDCollection.fromPartial({})),\n            Owner: getStructure(Owner.fromPartial({})),\n            Collection: getStructure(Collection.fromPartial({})),\n        },\n        _Registry: registry,\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(JSON.stringify(subscription));\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(JSON.stringify(subscription));\n        }\n    },\n    getters: {\n        getSupply: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Supply[JSON.stringify(params)] ?? {};\n        },\n        getOwner: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Owner[JSON.stringify(params)] ?? {};\n        },\n        getCollection: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Collection[JSON.stringify(params)] ?? {};\n        },\n        getDenom: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Denom[JSON.stringify(params)] ?? {};\n        },\n        getDenoms: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Denoms[JSON.stringify(params)] ?? {};\n        },\n        getNft: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Nft[JSON.stringify(params)] ?? {};\n        },\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        },\n        getRegistry: (state) => {\n            return state._Registry;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('Vuex module: irismod.nft initialized!');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach(async (subscription) => {\n                try {\n                    const sub = JSON.parse(subscription);\n                    await dispatch(sub.action, sub.payload);\n                }\n                catch (e) {\n                    throw new SpVuexError('Subscriptions: ' + e.message);\n                }\n            });\n        },\n        async QuerySupply({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.querySupply(key.denom_id, query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.querySupply(key.denom_id, { ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'Supply', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QuerySupply', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getSupply']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QuerySupply', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryOwner({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryOwner(query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryOwner({ ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'Owner', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryOwner', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getOwner']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryOwner', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryCollection({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryCollection(key.denom_id, query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryCollection(key.denom_id, { ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'Collection', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryCollection', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getCollection']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryCollection', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDenom({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDenom(key.denom_id)).data;\n                commit('QUERY', { query: 'Denom', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDenom', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDenom']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDenom', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDenoms({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDenoms(query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryDenoms({ ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'Denoms', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDenoms', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDenoms']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDenoms', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryNft({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryNft(key.denom_id, key.token_id)).data;\n                commit('QUERY', { query: 'Nft', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryNft', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getNft']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryNft', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async sendMsgMintnft({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgMintnft(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgMintnft:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgMintnft:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgBurnnft({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgBurnnft(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgBurnnft:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgBurnnft:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgIssueDenom({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgIssueDenom(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgIssueDenom:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgIssueDenom:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgTransferDenom({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgTransferDenom(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgTransferDenom:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgTransferDenom:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgTransfernft({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgTransfernft(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgTransfernft:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgTransfernft:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgEditnft({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgEditnft(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgEditnft:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgEditnft:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async MsgMintnft({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgMintnft(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgMintnft:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgMintnft:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgBurnnft({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgBurnnft(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgBurnnft:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgBurnnft:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgIssueDenom({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgIssueDenom(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgIssueDenom:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgIssueDenom:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgTransferDenom({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgTransferDenom(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgTransferDenom:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgTransferDenom:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgTransfernft({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgTransfernft(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgTransfernft:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgTransfernft:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgEditnft({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgEditnft(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgEditnft:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgEditnft:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n    }\n};\n"]},"metadata":{},"sourceType":"module"}