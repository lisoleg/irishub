{"ast":null,"code":"import { txClient, queryClient, MissingWalletError, registry } from './module'; // @ts-ignore\n\nimport { SpVuexError } from '@starport/vuex';\nimport { StakeAuthorization } from \"./module/types/cosmos/staking/v1beta1/authz\";\nimport { StakeAuthorization_Validators } from \"./module/types/cosmos/staking/v1beta1/authz\";\nimport { LastValidatorPower } from \"./module/types/cosmos/staking/v1beta1/genesis\";\nimport { HistoricalInfo } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { CommissionRates } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Commission } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Description } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Validator } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { ValAddresses } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DVPair } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DVPairs } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DVVTriplet } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DVVTriplets } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Delegation } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { UnbondingDelegation } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { UnbondingDelegationEntry } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { RedelegationEntry } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Redelegation } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Params } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DelegationResponse } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { RedelegationEntryResponse } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { RedelegationResponse } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Pool } from \"./module/types/cosmos/staking/v1beta1/staking\";\nexport { StakeAuthorization, StakeAuthorization_Validators, LastValidatorPower, HistoricalInfo, CommissionRates, Commission, Description, Validator, ValAddresses, DVPair, DVPairs, DVVTriplet, DVVTriplets, Delegation, UnbondingDelegation, UnbondingDelegationEntry, RedelegationEntry, Redelegation, Params, DelegationResponse, RedelegationEntryResponse, RedelegationResponse, Pool };\n\nasync function initTxClient(vuexGetters) {\n  return await txClient(vuexGetters['common/wallet/signer'], {\n    addr: vuexGetters['common/env/apiTendermint']\n  });\n}\n\nasync function initQueryClient(vuexGetters) {\n  return await queryClient({\n    addr: vuexGetters['common/env/apiCosmos']\n  });\n}\n\nfunction mergeResults(value, next_values) {\n  for (let prop of Object.keys(next_values)) {\n    if (Array.isArray(next_values[prop])) {\n      value[prop] = [...value[prop], ...next_values[prop]];\n    } else {\n      value[prop] = next_values[prop];\n    }\n  }\n\n  return value;\n}\n\nfunction getStructure(template) {\n  let structure = {\n    fields: []\n  };\n\n  for (const [key, value] of Object.entries(template)) {\n    let field = {};\n    field.name = key;\n    field.type = typeof value;\n    structure.fields.push(field);\n  }\n\n  return structure;\n}\n\nconst getDefaultState = () => {\n  return {\n    Validators: {},\n    Validator: {},\n    ValidatorDelegations: {},\n    ValidatorUnbondingDelegations: {},\n    Delegation: {},\n    UnbondingDelegation: {},\n    DelegatorDelegations: {},\n    DelegatorUnbondingDelegations: {},\n    Redelegations: {},\n    DelegatorValidators: {},\n    DelegatorValidator: {},\n    HistoricalInfo: {},\n    Pool: {},\n    Params: {},\n    _Structure: {\n      StakeAuthorization: getStructure(StakeAuthorization.fromPartial({})),\n      StakeAuthorization_Validators: getStructure(StakeAuthorization_Validators.fromPartial({})),\n      LastValidatorPower: getStructure(LastValidatorPower.fromPartial({})),\n      HistoricalInfo: getStructure(HistoricalInfo.fromPartial({})),\n      CommissionRates: getStructure(CommissionRates.fromPartial({})),\n      Commission: getStructure(Commission.fromPartial({})),\n      Description: getStructure(Description.fromPartial({})),\n      Validator: getStructure(Validator.fromPartial({})),\n      ValAddresses: getStructure(ValAddresses.fromPartial({})),\n      DVPair: getStructure(DVPair.fromPartial({})),\n      DVPairs: getStructure(DVPairs.fromPartial({})),\n      DVVTriplet: getStructure(DVVTriplet.fromPartial({})),\n      DVVTriplets: getStructure(DVVTriplets.fromPartial({})),\n      Delegation: getStructure(Delegation.fromPartial({})),\n      UnbondingDelegation: getStructure(UnbondingDelegation.fromPartial({})),\n      UnbondingDelegationEntry: getStructure(UnbondingDelegationEntry.fromPartial({})),\n      RedelegationEntry: getStructure(RedelegationEntry.fromPartial({})),\n      Redelegation: getStructure(Redelegation.fromPartial({})),\n      Params: getStructure(Params.fromPartial({})),\n      DelegationResponse: getStructure(DelegationResponse.fromPartial({})),\n      RedelegationEntryResponse: getStructure(RedelegationEntryResponse.fromPartial({})),\n      RedelegationResponse: getStructure(RedelegationResponse.fromPartial({})),\n      Pool: getStructure(Pool.fromPartial({}))\n    },\n    _Registry: registry,\n    _Subscriptions: new Set()\n  };\n}; // initial state\n\n\nconst state = getDefaultState();\nexport default {\n  namespaced: true,\n  state,\n  mutations: {\n    RESET_STATE(state) {\n      Object.assign(state, getDefaultState());\n    },\n\n    QUERY(state, {\n      query,\n      key,\n      value\n    }) {\n      state[query][JSON.stringify(key)] = value;\n    },\n\n    SUBSCRIBE(state, subscription) {\n      state._Subscriptions.add(JSON.stringify(subscription));\n    },\n\n    UNSUBSCRIBE(state, subscription) {\n      state._Subscriptions.delete(JSON.stringify(subscription));\n    }\n\n  },\n  getters: {\n    getValidators: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Validators[JSON.stringify(params)] ?? {};\n    },\n    getValidator: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Validator[JSON.stringify(params)] ?? {};\n    },\n    getValidatorDelegations: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.ValidatorDelegations[JSON.stringify(params)] ?? {};\n    },\n    getValidatorUnbondingDelegations: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.ValidatorUnbondingDelegations[JSON.stringify(params)] ?? {};\n    },\n    getDelegation: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Delegation[JSON.stringify(params)] ?? {};\n    },\n    getUnbondingDelegation: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.UnbondingDelegation[JSON.stringify(params)] ?? {};\n    },\n    getDelegatorDelegations: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.DelegatorDelegations[JSON.stringify(params)] ?? {};\n    },\n    getDelegatorUnbondingDelegations: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.DelegatorUnbondingDelegations[JSON.stringify(params)] ?? {};\n    },\n    getRedelegations: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Redelegations[JSON.stringify(params)] ?? {};\n    },\n    getDelegatorValidators: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.DelegatorValidators[JSON.stringify(params)] ?? {};\n    },\n    getDelegatorValidator: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.DelegatorValidator[JSON.stringify(params)] ?? {};\n    },\n    getHistoricalInfo: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.HistoricalInfo[JSON.stringify(params)] ?? {};\n    },\n    getPool: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Pool[JSON.stringify(params)] ?? {};\n    },\n    getParams: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Params[JSON.stringify(params)] ?? {};\n    },\n    getTypeStructure: state => type => {\n      return state._Structure[type].fields;\n    },\n    getRegistry: state => {\n      return state._Registry;\n    }\n  },\n  actions: {\n    init({\n      dispatch,\n      rootGetters\n    }) {\n      console.log('Vuex module: cosmos.staking.v1beta1 initialized!');\n\n      if (rootGetters['common/env/client']) {\n        rootGetters['common/env/client'].on('newblock', () => {\n          dispatch('StoreUpdate');\n        });\n      }\n    },\n\n    resetState({\n      commit\n    }) {\n      commit('RESET_STATE');\n    },\n\n    unsubscribe({\n      commit\n    }, subscription) {\n      commit('UNSUBSCRIBE', subscription);\n    },\n\n    async StoreUpdate({\n      state,\n      dispatch\n    }) {\n      state._Subscriptions.forEach(async subscription => {\n        try {\n          const sub = JSON.parse(subscription);\n          await dispatch(sub.action, sub.payload);\n        } catch (e) {\n          throw new SpVuexError('Subscriptions: ' + e.message);\n        }\n      });\n    },\n\n    async QueryValidators({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryValidators(query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryValidators({ ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'Validators',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryValidators',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getValidators']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryValidators', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryValidator({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryValidator(key.validator_addr)).data;\n        commit('QUERY', {\n          query: 'Validator',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryValidator',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getValidator']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryValidator', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryValidatorDelegations({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryValidatorDelegations(key.validator_addr, query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryValidatorDelegations(key.validator_addr, { ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'ValidatorDelegations',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryValidatorDelegations',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getValidatorDelegations']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryValidatorDelegations', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryValidatorUnbondingDelegations({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryValidatorUnbondingDelegations(key.validator_addr, query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryValidatorUnbondingDelegations(key.validator_addr, { ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'ValidatorUnbondingDelegations',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryValidatorUnbondingDelegations',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getValidatorUnbondingDelegations']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryValidatorUnbondingDelegations', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDelegation({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDelegation(key.validator_addr, key.delegator_addr)).data;\n        commit('QUERY', {\n          query: 'Delegation',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDelegation',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDelegation']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDelegation', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryUnbondingDelegation({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryUnbondingDelegation(key.validator_addr, key.delegator_addr)).data;\n        commit('QUERY', {\n          query: 'UnbondingDelegation',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryUnbondingDelegation',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getUnbondingDelegation']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryUnbondingDelegation', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDelegatorDelegations({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDelegatorDelegations(key.delegator_addr, query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryDelegatorDelegations(key.delegator_addr, { ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'DelegatorDelegations',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDelegatorDelegations',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDelegatorDelegations']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDelegatorDelegations', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDelegatorUnbondingDelegations({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDelegatorUnbondingDelegations(key.delegator_addr, query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryDelegatorUnbondingDelegations(key.delegator_addr, { ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'DelegatorUnbondingDelegations',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDelegatorUnbondingDelegations',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDelegatorUnbondingDelegations']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDelegatorUnbondingDelegations', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryRedelegations({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryRedelegations(key.delegator_addr, query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryRedelegations(key.delegator_addr, { ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'Redelegations',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryRedelegations',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getRedelegations']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryRedelegations', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDelegatorValidators({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDelegatorValidators(key.delegator_addr, query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryDelegatorValidators(key.delegator_addr, { ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'DelegatorValidators',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDelegatorValidators',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDelegatorValidators']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDelegatorValidators', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDelegatorValidator({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDelegatorValidator(key.delegator_addr, key.validator_addr)).data;\n        commit('QUERY', {\n          query: 'DelegatorValidator',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDelegatorValidator',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDelegatorValidator']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDelegatorValidator', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryHistoricalInfo({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryHistoricalInfo(key.height)).data;\n        commit('QUERY', {\n          query: 'HistoricalInfo',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryHistoricalInfo',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getHistoricalInfo']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryHistoricalInfo', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryPool({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryPool()).data;\n        commit('QUERY', {\n          query: 'Pool',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryPool',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getPool']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryPool', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryParams({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryParams()).data;\n        commit('QUERY', {\n          query: 'Params',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryParams',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getParams']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async sendMsgEditValidator({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgEditValidator(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgEditValidator:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgEditValidator:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgCreateValidator({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgCreateValidator(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgCreateValidator:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgCreateValidator:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgBeginRedelegate({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgBeginRedelegate(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgBeginRedelegate:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgBeginRedelegate:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgDelegate({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgDelegate(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgDelegate:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgDelegate:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgUndelegate({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgUndelegate(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgUndelegate:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgUndelegate:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async MsgEditValidator({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgEditValidator(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgEditValidator:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgEditValidator:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgCreateValidator({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgCreateValidator(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgCreateValidator:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgCreateValidator:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgBeginRedelegate({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgBeginRedelegate(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgBeginRedelegate:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgBeginRedelegate:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgDelegate({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgDelegate(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgDelegate:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgDelegate:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgUndelegate({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgUndelegate(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgUndelegate:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgUndelegate:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/lisoleg/cosmos/irisnet/irishub/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.staking.v1beta1/index.js"],"names":["txClient","queryClient","MissingWalletError","registry","SpVuexError","StakeAuthorization","StakeAuthorization_Validators","LastValidatorPower","HistoricalInfo","CommissionRates","Commission","Description","Validator","ValAddresses","DVPair","DVPairs","DVVTriplet","DVVTriplets","Delegation","UnbondingDelegation","UnbondingDelegationEntry","RedelegationEntry","Redelegation","Params","DelegationResponse","RedelegationEntryResponse","RedelegationResponse","Pool","initTxClient","vuexGetters","addr","initQueryClient","mergeResults","value","next_values","prop","Object","keys","Array","isArray","getStructure","template","structure","fields","key","entries","field","name","type","push","getDefaultState","Validators","ValidatorDelegations","ValidatorUnbondingDelegations","DelegatorDelegations","DelegatorUnbondingDelegations","Redelegations","DelegatorValidators","DelegatorValidator","_Structure","fromPartial","_Registry","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","delete","getters","getValidators","params","getValidator","getValidatorDelegations","getValidatorUnbondingDelegations","getDelegation","getUnbondingDelegation","getDelegatorDelegations","getDelegatorUnbondingDelegations","getRedelegations","getDelegatorValidators","getDelegatorValidator","getHistoricalInfo","getPool","getParams","getTypeStructure","getRegistry","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","sub","parse","action","payload","e","message","QueryValidators","options","subscribe","all","queryValidators","data","pagination","next_key","QueryValidator","queryValidator","validator_addr","QueryValidatorDelegations","queryValidatorDelegations","QueryValidatorUnbondingDelegations","queryValidatorUnbondingDelegations","QueryDelegation","queryDelegation","delegator_addr","QueryUnbondingDelegation","queryUnbondingDelegation","QueryDelegatorDelegations","queryDelegatorDelegations","QueryDelegatorUnbondingDelegations","queryDelegatorUnbondingDelegations","QueryRedelegations","queryRedelegations","QueryDelegatorValidators","queryDelegatorValidators","QueryDelegatorValidator","queryDelegatorValidator","QueryHistoricalInfo","queryHistoricalInfo","height","QueryPool","queryPool","QueryParams","queryParams","sendMsgEditValidator","fee","memo","msg","msgEditValidator","result","signAndBroadcast","amount","gas","sendMsgCreateValidator","msgCreateValidator","sendMsgBeginRedelegate","msgBeginRedelegate","sendMsgDelegate","msgDelegate","sendMsgUndelegate","msgUndelegate","MsgEditValidator","MsgCreateValidator","MsgBeginRedelegate","MsgDelegate","MsgUndelegate"],"mappings":"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","sourcesContent":["import { txClient, queryClient, MissingWalletError, registry } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { StakeAuthorization } from \"./module/types/cosmos/staking/v1beta1/authz\";\nimport { StakeAuthorization_Validators } from \"./module/types/cosmos/staking/v1beta1/authz\";\nimport { LastValidatorPower } from \"./module/types/cosmos/staking/v1beta1/genesis\";\nimport { HistoricalInfo } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { CommissionRates } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Commission } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Description } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Validator } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { ValAddresses } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DVPair } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DVPairs } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DVVTriplet } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DVVTriplets } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Delegation } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { UnbondingDelegation } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { UnbondingDelegationEntry } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { RedelegationEntry } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Redelegation } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Params } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DelegationResponse } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { RedelegationEntryResponse } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { RedelegationResponse } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Pool } from \"./module/types/cosmos/staking/v1beta1/staking\";\nexport { StakeAuthorization, StakeAuthorization_Validators, LastValidatorPower, HistoricalInfo, CommissionRates, Commission, Description, Validator, ValAddresses, DVPair, DVPairs, DVVTriplet, DVVTriplets, Delegation, UnbondingDelegation, UnbondingDelegationEntry, RedelegationEntry, Redelegation, Params, DelegationResponse, RedelegationEntryResponse, RedelegationResponse, Pool };\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction mergeResults(value, next_values) {\n    for (let prop of Object.keys(next_values)) {\n        if (Array.isArray(next_values[prop])) {\n            value[prop] = [...value[prop], ...next_values[prop]];\n        }\n        else {\n            value[prop] = next_values[prop];\n        }\n    }\n    return value;\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        Validators: {},\n        Validator: {},\n        ValidatorDelegations: {},\n        ValidatorUnbondingDelegations: {},\n        Delegation: {},\n        UnbondingDelegation: {},\n        DelegatorDelegations: {},\n        DelegatorUnbondingDelegations: {},\n        Redelegations: {},\n        DelegatorValidators: {},\n        DelegatorValidator: {},\n        HistoricalInfo: {},\n        Pool: {},\n        Params: {},\n        _Structure: {\n            StakeAuthorization: getStructure(StakeAuthorization.fromPartial({})),\n            StakeAuthorization_Validators: getStructure(StakeAuthorization_Validators.fromPartial({})),\n            LastValidatorPower: getStructure(LastValidatorPower.fromPartial({})),\n            HistoricalInfo: getStructure(HistoricalInfo.fromPartial({})),\n            CommissionRates: getStructure(CommissionRates.fromPartial({})),\n            Commission: getStructure(Commission.fromPartial({})),\n            Description: getStructure(Description.fromPartial({})),\n            Validator: getStructure(Validator.fromPartial({})),\n            ValAddresses: getStructure(ValAddresses.fromPartial({})),\n            DVPair: getStructure(DVPair.fromPartial({})),\n            DVPairs: getStructure(DVPairs.fromPartial({})),\n            DVVTriplet: getStructure(DVVTriplet.fromPartial({})),\n            DVVTriplets: getStructure(DVVTriplets.fromPartial({})),\n            Delegation: getStructure(Delegation.fromPartial({})),\n            UnbondingDelegation: getStructure(UnbondingDelegation.fromPartial({})),\n            UnbondingDelegationEntry: getStructure(UnbondingDelegationEntry.fromPartial({})),\n            RedelegationEntry: getStructure(RedelegationEntry.fromPartial({})),\n            Redelegation: getStructure(Redelegation.fromPartial({})),\n            Params: getStructure(Params.fromPartial({})),\n            DelegationResponse: getStructure(DelegationResponse.fromPartial({})),\n            RedelegationEntryResponse: getStructure(RedelegationEntryResponse.fromPartial({})),\n            RedelegationResponse: getStructure(RedelegationResponse.fromPartial({})),\n            Pool: getStructure(Pool.fromPartial({})),\n        },\n        _Registry: registry,\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(JSON.stringify(subscription));\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(JSON.stringify(subscription));\n        }\n    },\n    getters: {\n        getValidators: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Validators[JSON.stringify(params)] ?? {};\n        },\n        getValidator: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Validator[JSON.stringify(params)] ?? {};\n        },\n        getValidatorDelegations: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.ValidatorDelegations[JSON.stringify(params)] ?? {};\n        },\n        getValidatorUnbondingDelegations: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.ValidatorUnbondingDelegations[JSON.stringify(params)] ?? {};\n        },\n        getDelegation: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Delegation[JSON.stringify(params)] ?? {};\n        },\n        getUnbondingDelegation: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.UnbondingDelegation[JSON.stringify(params)] ?? {};\n        },\n        getDelegatorDelegations: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DelegatorDelegations[JSON.stringify(params)] ?? {};\n        },\n        getDelegatorUnbondingDelegations: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DelegatorUnbondingDelegations[JSON.stringify(params)] ?? {};\n        },\n        getRedelegations: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Redelegations[JSON.stringify(params)] ?? {};\n        },\n        getDelegatorValidators: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DelegatorValidators[JSON.stringify(params)] ?? {};\n        },\n        getDelegatorValidator: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DelegatorValidator[JSON.stringify(params)] ?? {};\n        },\n        getHistoricalInfo: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.HistoricalInfo[JSON.stringify(params)] ?? {};\n        },\n        getPool: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Pool[JSON.stringify(params)] ?? {};\n        },\n        getParams: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Params[JSON.stringify(params)] ?? {};\n        },\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        },\n        getRegistry: (state) => {\n            return state._Registry;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('Vuex module: cosmos.staking.v1beta1 initialized!');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach(async (subscription) => {\n                try {\n                    const sub = JSON.parse(subscription);\n                    await dispatch(sub.action, sub.payload);\n                }\n                catch (e) {\n                    throw new SpVuexError('Subscriptions: ' + e.message);\n                }\n            });\n        },\n        async QueryValidators({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryValidators(query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryValidators({ ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'Validators', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValidators', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValidators']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryValidators', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryValidator({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryValidator(key.validator_addr)).data;\n                commit('QUERY', { query: 'Validator', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValidator', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValidator']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryValidator', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryValidatorDelegations({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryValidatorDelegations(key.validator_addr, query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryValidatorDelegations(key.validator_addr, { ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'ValidatorDelegations', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValidatorDelegations', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValidatorDelegations']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryValidatorDelegations', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryValidatorUnbondingDelegations({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryValidatorUnbondingDelegations(key.validator_addr, query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryValidatorUnbondingDelegations(key.validator_addr, { ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'ValidatorUnbondingDelegations', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValidatorUnbondingDelegations', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValidatorUnbondingDelegations']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryValidatorUnbondingDelegations', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDelegation({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDelegation(key.validator_addr, key.delegator_addr)).data;\n                commit('QUERY', { query: 'Delegation', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegation', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegation']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDelegation', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryUnbondingDelegation({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryUnbondingDelegation(key.validator_addr, key.delegator_addr)).data;\n                commit('QUERY', { query: 'UnbondingDelegation', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryUnbondingDelegation', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getUnbondingDelegation']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryUnbondingDelegation', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDelegatorDelegations({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDelegatorDelegations(key.delegator_addr, query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryDelegatorDelegations(key.delegator_addr, { ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'DelegatorDelegations', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegatorDelegations', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegatorDelegations']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDelegatorDelegations', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDelegatorUnbondingDelegations({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDelegatorUnbondingDelegations(key.delegator_addr, query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryDelegatorUnbondingDelegations(key.delegator_addr, { ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'DelegatorUnbondingDelegations', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegatorUnbondingDelegations', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegatorUnbondingDelegations']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDelegatorUnbondingDelegations', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryRedelegations({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryRedelegations(key.delegator_addr, query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryRedelegations(key.delegator_addr, { ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'Redelegations', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryRedelegations', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getRedelegations']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryRedelegations', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDelegatorValidators({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDelegatorValidators(key.delegator_addr, query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryDelegatorValidators(key.delegator_addr, { ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'DelegatorValidators', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegatorValidators', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegatorValidators']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDelegatorValidators', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDelegatorValidator({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDelegatorValidator(key.delegator_addr, key.validator_addr)).data;\n                commit('QUERY', { query: 'DelegatorValidator', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegatorValidator', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegatorValidator']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDelegatorValidator', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryHistoricalInfo({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryHistoricalInfo(key.height)).data;\n                commit('QUERY', { query: 'HistoricalInfo', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryHistoricalInfo', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getHistoricalInfo']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryHistoricalInfo', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryPool({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryPool()).data;\n                commit('QUERY', { query: 'Pool', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryPool', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getPool']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryPool', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryParams({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryParams()).data;\n                commit('QUERY', { query: 'Params', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryParams', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getParams']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async sendMsgEditValidator({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgEditValidator(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgEditValidator:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgEditValidator:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgCreateValidator({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgCreateValidator(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgCreateValidator:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateValidator:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgBeginRedelegate({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgBeginRedelegate(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgBeginRedelegate:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgBeginRedelegate:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgDelegate({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgDelegate(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgDelegate:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDelegate:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgUndelegate({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgUndelegate(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgUndelegate:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgUndelegate:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async MsgEditValidator({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgEditValidator(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgEditValidator:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgEditValidator:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgCreateValidator({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgCreateValidator(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgCreateValidator:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateValidator:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgBeginRedelegate({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgBeginRedelegate(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgBeginRedelegate:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgBeginRedelegate:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgDelegate({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgDelegate(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgDelegate:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDelegate:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgUndelegate({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgUndelegate(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgUndelegate:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgUndelegate:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n    }\n};\n"]},"metadata":{},"sourceType":"module"}