{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/* eslint-disable */\nimport { Reader, Writer } from \"protobufjs/minimal\";\nexport const protobufPackage = \"cosmos.crisis.v1beta1\";\nconst baseMsgVerifyInvariant = {\n  sender: \"\",\n  invariantModuleName: \"\",\n  invariantRoute: \"\"\n};\nexport const MsgVerifyInvariant = {\n  encode(message, writer = Writer.create()) {\n    if (message.sender !== \"\") {\n      writer.uint32(10).string(message.sender);\n    }\n\n    if (message.invariantModuleName !== \"\") {\n      writer.uint32(18).string(message.invariantModuleName);\n    }\n\n    if (message.invariantRoute !== \"\") {\n      writer.uint32(26).string(message.invariantRoute);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgVerifyInvariant\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.sender = reader.string();\n          break;\n\n        case 2:\n          message.invariantModuleName = reader.string();\n          break;\n\n        case 3:\n          message.invariantRoute = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseMsgVerifyInvariant\n    };\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = String(object.sender);\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.invariantModuleName !== undefined && object.invariantModuleName !== null) {\n      message.invariantModuleName = String(object.invariantModuleName);\n    } else {\n      message.invariantModuleName = \"\";\n    }\n\n    if (object.invariantRoute !== undefined && object.invariantRoute !== null) {\n      message.invariantRoute = String(object.invariantRoute);\n    } else {\n      message.invariantRoute = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.invariantModuleName !== undefined && (obj.invariantModuleName = message.invariantModuleName);\n    message.invariantRoute !== undefined && (obj.invariantRoute = message.invariantRoute);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseMsgVerifyInvariant\n    };\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = object.sender;\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.invariantModuleName !== undefined && object.invariantModuleName !== null) {\n      message.invariantModuleName = object.invariantModuleName;\n    } else {\n      message.invariantModuleName = \"\";\n    }\n\n    if (object.invariantRoute !== undefined && object.invariantRoute !== null) {\n      message.invariantRoute = object.invariantRoute;\n    } else {\n      message.invariantRoute = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgVerifyInvariantResponse = {};\nexport const MsgVerifyInvariantResponse = {\n  encode(_, writer = Writer.create()) {\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgVerifyInvariantResponse\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = { ...baseMsgVerifyInvariantResponse\n    };\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = { ...baseMsgVerifyInvariantResponse\n    };\n    return message;\n  }\n\n};\nexport class MsgClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n  }\n\n  VerifyInvariant(request) {\n    const data = MsgVerifyInvariant.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.crisis.v1beta1.Msg\", \"VerifyInvariant\", data);\n    return promise.then(data => MsgVerifyInvariantResponse.decode(new Reader(data)));\n  }\n\n}","map":{"version":3,"sources":["/home/lisoleg/cosmos/irisnet/irishub/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.crisis.v1beta1/module/types/cosmos/crisis/v1beta1/tx.js"],"names":["Reader","Writer","protobufPackage","baseMsgVerifyInvariant","sender","invariantModuleName","invariantRoute","MsgVerifyInvariant","encode","message","writer","create","uint32","string","decode","input","length","reader","Uint8Array","end","undefined","len","pos","tag","skipType","fromJSON","object","String","toJSON","obj","fromPartial","baseMsgVerifyInvariantResponse","MsgVerifyInvariantResponse","_","MsgClientImpl","constructor","rpc","VerifyInvariant","request","data","finish","promise","then"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { Reader, Writer } from \"protobufjs/minimal\";\nexport const protobufPackage = \"cosmos.crisis.v1beta1\";\nconst baseMsgVerifyInvariant = {\n    sender: \"\",\n    invariantModuleName: \"\",\n    invariantRoute: \"\",\n};\nexport const MsgVerifyInvariant = {\n    encode(message, writer = Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.invariantModuleName !== \"\") {\n            writer.uint32(18).string(message.invariantModuleName);\n        }\n        if (message.invariantRoute !== \"\") {\n            writer.uint32(26).string(message.invariantRoute);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgVerifyInvariant };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.invariantModuleName = reader.string();\n                    break;\n                case 3:\n                    message.invariantRoute = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseMsgVerifyInvariant };\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = String(object.sender);\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.invariantModuleName !== undefined &&\n            object.invariantModuleName !== null) {\n            message.invariantModuleName = String(object.invariantModuleName);\n        }\n        else {\n            message.invariantModuleName = \"\";\n        }\n        if (object.invariantRoute !== undefined && object.invariantRoute !== null) {\n            message.invariantRoute = String(object.invariantRoute);\n        }\n        else {\n            message.invariantRoute = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.invariantModuleName !== undefined &&\n            (obj.invariantModuleName = message.invariantModuleName);\n        message.invariantRoute !== undefined &&\n            (obj.invariantRoute = message.invariantRoute);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseMsgVerifyInvariant };\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = object.sender;\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.invariantModuleName !== undefined &&\n            object.invariantModuleName !== null) {\n            message.invariantModuleName = object.invariantModuleName;\n        }\n        else {\n            message.invariantModuleName = \"\";\n        }\n        if (object.invariantRoute !== undefined && object.invariantRoute !== null) {\n            message.invariantRoute = object.invariantRoute;\n        }\n        else {\n            message.invariantRoute = \"\";\n        }\n        return message;\n    },\n};\nconst baseMsgVerifyInvariantResponse = {};\nexport const MsgVerifyInvariantResponse = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseMsgVerifyInvariantResponse,\n        };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = {\n            ...baseMsgVerifyInvariantResponse,\n        };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = {\n            ...baseMsgVerifyInvariantResponse,\n        };\n        return message;\n    },\n};\nexport class MsgClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n    }\n    VerifyInvariant(request) {\n        const data = MsgVerifyInvariant.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.crisis.v1beta1.Msg\", \"VerifyInvariant\", data);\n        return promise.then((data) => MsgVerifyInvariantResponse.decode(new Reader(data)));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}