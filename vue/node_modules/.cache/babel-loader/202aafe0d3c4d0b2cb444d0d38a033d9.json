{"ast":null,"code":"import { txClient, queryClient, MissingWalletError, registry } from './module'; // @ts-ignore\n\nimport { SpVuexError } from '@starport/vuex';\nimport { WeightedVoteOption } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { TextProposal } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { Deposit } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { Proposal } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { TallyResult } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { Vote } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { DepositParams } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { VotingParams } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { TallyParams } from \"./module/types/cosmos/gov/v1beta1/gov\";\nexport { WeightedVoteOption, TextProposal, Deposit, Proposal, TallyResult, Vote, DepositParams, VotingParams, TallyParams };\n\nasync function initTxClient(vuexGetters) {\n  return await txClient(vuexGetters['common/wallet/signer'], {\n    addr: vuexGetters['common/env/apiTendermint']\n  });\n}\n\nasync function initQueryClient(vuexGetters) {\n  return await queryClient({\n    addr: vuexGetters['common/env/apiCosmos']\n  });\n}\n\nfunction mergeResults(value, next_values) {\n  for (let prop of Object.keys(next_values)) {\n    if (Array.isArray(next_values[prop])) {\n      value[prop] = [...value[prop], ...next_values[prop]];\n    } else {\n      value[prop] = next_values[prop];\n    }\n  }\n\n  return value;\n}\n\nfunction getStructure(template) {\n  let structure = {\n    fields: []\n  };\n\n  for (const [key, value] of Object.entries(template)) {\n    let field = {};\n    field.name = key;\n    field.type = typeof value;\n    structure.fields.push(field);\n  }\n\n  return structure;\n}\n\nconst getDefaultState = () => {\n  return {\n    Proposal: {},\n    Proposals: {},\n    Vote: {},\n    Votes: {},\n    Params: {},\n    Deposit: {},\n    Deposits: {},\n    TallyResult: {},\n    _Structure: {\n      WeightedVoteOption: getStructure(WeightedVoteOption.fromPartial({})),\n      TextProposal: getStructure(TextProposal.fromPartial({})),\n      Deposit: getStructure(Deposit.fromPartial({})),\n      Proposal: getStructure(Proposal.fromPartial({})),\n      TallyResult: getStructure(TallyResult.fromPartial({})),\n      Vote: getStructure(Vote.fromPartial({})),\n      DepositParams: getStructure(DepositParams.fromPartial({})),\n      VotingParams: getStructure(VotingParams.fromPartial({})),\n      TallyParams: getStructure(TallyParams.fromPartial({}))\n    },\n    _Registry: registry,\n    _Subscriptions: new Set()\n  };\n}; // initial state\n\n\nconst state = getDefaultState();\nexport default {\n  namespaced: true,\n  state,\n  mutations: {\n    RESET_STATE(state) {\n      Object.assign(state, getDefaultState());\n    },\n\n    QUERY(state, {\n      query,\n      key,\n      value\n    }) {\n      state[query][JSON.stringify(key)] = value;\n    },\n\n    SUBSCRIBE(state, subscription) {\n      state._Subscriptions.add(JSON.stringify(subscription));\n    },\n\n    UNSUBSCRIBE(state, subscription) {\n      state._Subscriptions.delete(JSON.stringify(subscription));\n    }\n\n  },\n  getters: {\n    getProposal: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Proposal[JSON.stringify(params)] ?? {};\n    },\n    getProposals: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Proposals[JSON.stringify(params)] ?? {};\n    },\n    getVote: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Vote[JSON.stringify(params)] ?? {};\n    },\n    getVotes: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Votes[JSON.stringify(params)] ?? {};\n    },\n    getParams: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Params[JSON.stringify(params)] ?? {};\n    },\n    getDeposit: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Deposit[JSON.stringify(params)] ?? {};\n    },\n    getDeposits: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Deposits[JSON.stringify(params)] ?? {};\n    },\n    getTallyResult: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.TallyResult[JSON.stringify(params)] ?? {};\n    },\n    getTypeStructure: state => type => {\n      return state._Structure[type].fields;\n    },\n    getRegistry: state => {\n      return state._Registry;\n    }\n  },\n  actions: {\n    init({\n      dispatch,\n      rootGetters\n    }) {\n      console.log('Vuex module: cosmos.gov.v1beta1 initialized!');\n\n      if (rootGetters['common/env/client']) {\n        rootGetters['common/env/client'].on('newblock', () => {\n          dispatch('StoreUpdate');\n        });\n      }\n    },\n\n    resetState({\n      commit\n    }) {\n      commit('RESET_STATE');\n    },\n\n    unsubscribe({\n      commit\n    }, subscription) {\n      commit('UNSUBSCRIBE', subscription);\n    },\n\n    async StoreUpdate({\n      state,\n      dispatch\n    }) {\n      state._Subscriptions.forEach(async subscription => {\n        try {\n          const sub = JSON.parse(subscription);\n          await dispatch(sub.action, sub.payload);\n        } catch (e) {\n          throw new SpVuexError('Subscriptions: ' + e.message);\n        }\n      });\n    },\n\n    async QueryProposal({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryProposal(key.proposal_id)).data;\n        commit('QUERY', {\n          query: 'Proposal',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryProposal',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getProposal']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryProposal', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryProposals({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryProposals(query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryProposals({ ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'Proposals',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryProposals',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getProposals']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryProposals', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryVote({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryVote(key.proposal_id, key.voter)).data;\n        commit('QUERY', {\n          query: 'Vote',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryVote',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getVote']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryVote', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryVotes({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryVotes(key.proposal_id, query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryVotes(key.proposal_id, { ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'Votes',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryVotes',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getVotes']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryVotes', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryParams({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryParams(key.params_type)).data;\n        commit('QUERY', {\n          query: 'Params',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryParams',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getParams']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDeposit({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDeposit(key.proposal_id, key.depositor)).data;\n        commit('QUERY', {\n          query: 'Deposit',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDeposit',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDeposit']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDeposit', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDeposits({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDeposits(key.proposal_id, query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryDeposits(key.proposal_id, { ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'Deposits',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDeposits',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDeposits']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDeposits', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryTallyResult({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryTallyResult(key.proposal_id)).data;\n        commit('QUERY', {\n          query: 'TallyResult',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryTallyResult',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getTallyResult']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryTallyResult', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async sendMsgDeposit({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgDeposit(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgDeposit:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgDeposit:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgSubmitProposal({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgSubmitProposal(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgSubmitProposal:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgSubmitProposal:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgVote({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgVote(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgVote:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgVote:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgVoteWeighted({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgVoteWeighted(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgVoteWeighted:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgVoteWeighted:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async MsgDeposit({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgDeposit(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgDeposit:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgDeposit:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgSubmitProposal({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgSubmitProposal(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgSubmitProposal:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgSubmitProposal:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgVote({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgVote(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgVote:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgVote:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgVoteWeighted({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgVoteWeighted(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgVoteWeighted:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgVoteWeighted:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/lisoleg/checkers/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.gov.v1beta1/index.js"],"names":["txClient","queryClient","MissingWalletError","registry","SpVuexError","WeightedVoteOption","TextProposal","Deposit","Proposal","TallyResult","Vote","DepositParams","VotingParams","TallyParams","initTxClient","vuexGetters","addr","initQueryClient","mergeResults","value","next_values","prop","Object","keys","Array","isArray","getStructure","template","structure","fields","key","entries","field","name","type","push","getDefaultState","Proposals","Votes","Params","Deposits","_Structure","fromPartial","_Registry","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","delete","getters","getProposal","params","getProposals","getVote","getVotes","getParams","getDeposit","getDeposits","getTallyResult","getTypeStructure","getRegistry","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","sub","parse","action","payload","e","message","QueryProposal","options","subscribe","all","queryProposal","proposal_id","data","QueryProposals","queryProposals","pagination","next_key","QueryVote","queryVote","voter","QueryVotes","queryVotes","QueryParams","queryParams","params_type","QueryDeposit","queryDeposit","depositor","QueryDeposits","queryDeposits","QueryTallyResult","queryTallyResult","sendMsgDeposit","fee","memo","msg","msgDeposit","result","signAndBroadcast","amount","gas","sendMsgSubmitProposal","msgSubmitProposal","sendMsgVote","msgVote","sendMsgVoteWeighted","msgVoteWeighted","MsgDeposit","MsgSubmitProposal","MsgVote","MsgVoteWeighted"],"mappings":"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","sourcesContent":["import { txClient, queryClient, MissingWalletError, registry } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { WeightedVoteOption } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { TextProposal } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { Deposit } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { Proposal } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { TallyResult } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { Vote } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { DepositParams } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { VotingParams } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { TallyParams } from \"./module/types/cosmos/gov/v1beta1/gov\";\nexport { WeightedVoteOption, TextProposal, Deposit, Proposal, TallyResult, Vote, DepositParams, VotingParams, TallyParams };\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction mergeResults(value, next_values) {\n    for (let prop of Object.keys(next_values)) {\n        if (Array.isArray(next_values[prop])) {\n            value[prop] = [...value[prop], ...next_values[prop]];\n        }\n        else {\n            value[prop] = next_values[prop];\n        }\n    }\n    return value;\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        Proposal: {},\n        Proposals: {},\n        Vote: {},\n        Votes: {},\n        Params: {},\n        Deposit: {},\n        Deposits: {},\n        TallyResult: {},\n        _Structure: {\n            WeightedVoteOption: getStructure(WeightedVoteOption.fromPartial({})),\n            TextProposal: getStructure(TextProposal.fromPartial({})),\n            Deposit: getStructure(Deposit.fromPartial({})),\n            Proposal: getStructure(Proposal.fromPartial({})),\n            TallyResult: getStructure(TallyResult.fromPartial({})),\n            Vote: getStructure(Vote.fromPartial({})),\n            DepositParams: getStructure(DepositParams.fromPartial({})),\n            VotingParams: getStructure(VotingParams.fromPartial({})),\n            TallyParams: getStructure(TallyParams.fromPartial({})),\n        },\n        _Registry: registry,\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(JSON.stringify(subscription));\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(JSON.stringify(subscription));\n        }\n    },\n    getters: {\n        getProposal: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Proposal[JSON.stringify(params)] ?? {};\n        },\n        getProposals: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Proposals[JSON.stringify(params)] ?? {};\n        },\n        getVote: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Vote[JSON.stringify(params)] ?? {};\n        },\n        getVotes: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Votes[JSON.stringify(params)] ?? {};\n        },\n        getParams: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Params[JSON.stringify(params)] ?? {};\n        },\n        getDeposit: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Deposit[JSON.stringify(params)] ?? {};\n        },\n        getDeposits: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Deposits[JSON.stringify(params)] ?? {};\n        },\n        getTallyResult: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.TallyResult[JSON.stringify(params)] ?? {};\n        },\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        },\n        getRegistry: (state) => {\n            return state._Registry;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('Vuex module: cosmos.gov.v1beta1 initialized!');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach(async (subscription) => {\n                try {\n                    const sub = JSON.parse(subscription);\n                    await dispatch(sub.action, sub.payload);\n                }\n                catch (e) {\n                    throw new SpVuexError('Subscriptions: ' + e.message);\n                }\n            });\n        },\n        async QueryProposal({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryProposal(key.proposal_id)).data;\n                commit('QUERY', { query: 'Proposal', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryProposal', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getProposal']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryProposal', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryProposals({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryProposals(query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryProposals({ ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'Proposals', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryProposals', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getProposals']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryProposals', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryVote({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryVote(key.proposal_id, key.voter)).data;\n                commit('QUERY', { query: 'Vote', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryVote', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getVote']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryVote', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryVotes({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryVotes(key.proposal_id, query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryVotes(key.proposal_id, { ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'Votes', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryVotes', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getVotes']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryVotes', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryParams({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryParams(key.params_type)).data;\n                commit('QUERY', { query: 'Params', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryParams', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getParams']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDeposit({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDeposit(key.proposal_id, key.depositor)).data;\n                commit('QUERY', { query: 'Deposit', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDeposit', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDeposit']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDeposit', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDeposits({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDeposits(key.proposal_id, query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryDeposits(key.proposal_id, { ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'Deposits', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDeposits', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDeposits']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDeposits', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryTallyResult({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryTallyResult(key.proposal_id)).data;\n                commit('QUERY', { query: 'TallyResult', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryTallyResult', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getTallyResult']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryTallyResult', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async sendMsgDeposit({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgDeposit(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgDeposit:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDeposit:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgSubmitProposal({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgSubmitProposal(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgSubmitProposal:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSubmitProposal:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgVote({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgVote(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgVote:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgVote:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgVoteWeighted({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgVoteWeighted(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgVoteWeighted:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgVoteWeighted:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async MsgDeposit({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgDeposit(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgDeposit:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDeposit:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgSubmitProposal({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgSubmitProposal(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgSubmitProposal:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSubmitProposal:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgVote({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgVote(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgVote:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgVote:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgVoteWeighted({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgVoteWeighted(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgVoteWeighted:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgVoteWeighted:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n    }\n};\n"]},"metadata":{},"sourceType":"module"}