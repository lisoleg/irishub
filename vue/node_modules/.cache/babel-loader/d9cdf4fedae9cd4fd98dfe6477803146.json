{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/* eslint-disable */\nimport { Reader, Writer } from \"protobufjs/minimal\";\nexport const protobufPackage = \"irismod.nft\";\nconst baseMsgIssueDenom = {\n  id: \"\",\n  name: \"\",\n  schema: \"\",\n  sender: \"\",\n  symbol: \"\",\n  mintRestricted: false,\n  updateRestricted: false\n};\nexport const MsgIssueDenom = {\n  encode(message, writer = Writer.create()) {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n\n    if (message.name !== \"\") {\n      writer.uint32(18).string(message.name);\n    }\n\n    if (message.schema !== \"\") {\n      writer.uint32(26).string(message.schema);\n    }\n\n    if (message.sender !== \"\") {\n      writer.uint32(34).string(message.sender);\n    }\n\n    if (message.symbol !== \"\") {\n      writer.uint32(42).string(message.symbol);\n    }\n\n    if (message.mintRestricted === true) {\n      writer.uint32(48).bool(message.mintRestricted);\n    }\n\n    if (message.updateRestricted === true) {\n      writer.uint32(56).bool(message.updateRestricted);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgIssueDenom\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.string();\n          break;\n\n        case 2:\n          message.name = reader.string();\n          break;\n\n        case 3:\n          message.schema = reader.string();\n          break;\n\n        case 4:\n          message.sender = reader.string();\n          break;\n\n        case 5:\n          message.symbol = reader.string();\n          break;\n\n        case 6:\n          message.mintRestricted = reader.bool();\n          break;\n\n        case 7:\n          message.updateRestricted = reader.bool();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseMsgIssueDenom\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = String(object.id);\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.name !== undefined && object.name !== null) {\n      message.name = String(object.name);\n    } else {\n      message.name = \"\";\n    }\n\n    if (object.schema !== undefined && object.schema !== null) {\n      message.schema = String(object.schema);\n    } else {\n      message.schema = \"\";\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = String(object.sender);\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.symbol !== undefined && object.symbol !== null) {\n      message.symbol = String(object.symbol);\n    } else {\n      message.symbol = \"\";\n    }\n\n    if (object.mintRestricted !== undefined && object.mintRestricted !== null) {\n      message.mintRestricted = Boolean(object.mintRestricted);\n    } else {\n      message.mintRestricted = false;\n    }\n\n    if (object.updateRestricted !== undefined && object.updateRestricted !== null) {\n      message.updateRestricted = Boolean(object.updateRestricted);\n    } else {\n      message.updateRestricted = false;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.id !== undefined && (obj.id = message.id);\n    message.name !== undefined && (obj.name = message.name);\n    message.schema !== undefined && (obj.schema = message.schema);\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.symbol !== undefined && (obj.symbol = message.symbol);\n    message.mintRestricted !== undefined && (obj.mintRestricted = message.mintRestricted);\n    message.updateRestricted !== undefined && (obj.updateRestricted = message.updateRestricted);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseMsgIssueDenom\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = object.id;\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.name !== undefined && object.name !== null) {\n      message.name = object.name;\n    } else {\n      message.name = \"\";\n    }\n\n    if (object.schema !== undefined && object.schema !== null) {\n      message.schema = object.schema;\n    } else {\n      message.schema = \"\";\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = object.sender;\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.symbol !== undefined && object.symbol !== null) {\n      message.symbol = object.symbol;\n    } else {\n      message.symbol = \"\";\n    }\n\n    if (object.mintRestricted !== undefined && object.mintRestricted !== null) {\n      message.mintRestricted = object.mintRestricted;\n    } else {\n      message.mintRestricted = false;\n    }\n\n    if (object.updateRestricted !== undefined && object.updateRestricted !== null) {\n      message.updateRestricted = object.updateRestricted;\n    } else {\n      message.updateRestricted = false;\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgIssueDenomResponse = {};\nexport const MsgIssueDenomResponse = {\n  encode(_, writer = Writer.create()) {\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgIssueDenomResponse\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = { ...baseMsgIssueDenomResponse\n    };\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = { ...baseMsgIssueDenomResponse\n    };\n    return message;\n  }\n\n};\nconst baseMsgTransfernft = {\n  id: \"\",\n  denomId: \"\",\n  name: \"\",\n  uri: \"\",\n  data: \"\",\n  sender: \"\",\n  recipient: \"\"\n};\nexport const MsgTransfernft = {\n  encode(message, writer = Writer.create()) {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n\n    if (message.denomId !== \"\") {\n      writer.uint32(18).string(message.denomId);\n    }\n\n    if (message.name !== \"\") {\n      writer.uint32(26).string(message.name);\n    }\n\n    if (message.uri !== \"\") {\n      writer.uint32(34).string(message.uri);\n    }\n\n    if (message.data !== \"\") {\n      writer.uint32(42).string(message.data);\n    }\n\n    if (message.sender !== \"\") {\n      writer.uint32(50).string(message.sender);\n    }\n\n    if (message.recipient !== \"\") {\n      writer.uint32(58).string(message.recipient);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgTransfernft\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.string();\n          break;\n\n        case 2:\n          message.denomId = reader.string();\n          break;\n\n        case 3:\n          message.name = reader.string();\n          break;\n\n        case 4:\n          message.uri = reader.string();\n          break;\n\n        case 5:\n          message.data = reader.string();\n          break;\n\n        case 6:\n          message.sender = reader.string();\n          break;\n\n        case 7:\n          message.recipient = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseMsgTransfernft\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = String(object.id);\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.denomId !== undefined && object.denomId !== null) {\n      message.denomId = String(object.denomId);\n    } else {\n      message.denomId = \"\";\n    }\n\n    if (object.name !== undefined && object.name !== null) {\n      message.name = String(object.name);\n    } else {\n      message.name = \"\";\n    }\n\n    if (object.uri !== undefined && object.uri !== null) {\n      message.uri = String(object.uri);\n    } else {\n      message.uri = \"\";\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = String(object.data);\n    } else {\n      message.data = \"\";\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = String(object.sender);\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.recipient !== undefined && object.recipient !== null) {\n      message.recipient = String(object.recipient);\n    } else {\n      message.recipient = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.id !== undefined && (obj.id = message.id);\n    message.denomId !== undefined && (obj.denomId = message.denomId);\n    message.name !== undefined && (obj.name = message.name);\n    message.uri !== undefined && (obj.uri = message.uri);\n    message.data !== undefined && (obj.data = message.data);\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseMsgTransfernft\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = object.id;\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.denomId !== undefined && object.denomId !== null) {\n      message.denomId = object.denomId;\n    } else {\n      message.denomId = \"\";\n    }\n\n    if (object.name !== undefined && object.name !== null) {\n      message.name = object.name;\n    } else {\n      message.name = \"\";\n    }\n\n    if (object.uri !== undefined && object.uri !== null) {\n      message.uri = object.uri;\n    } else {\n      message.uri = \"\";\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = \"\";\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = object.sender;\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.recipient !== undefined && object.recipient !== null) {\n      message.recipient = object.recipient;\n    } else {\n      message.recipient = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgTransfernftResponse = {};\nexport const MsgTransfernftResponse = {\n  encode(_, writer = Writer.create()) {\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgTransfernftResponse\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = { ...baseMsgTransfernftResponse\n    };\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = { ...baseMsgTransfernftResponse\n    };\n    return message;\n  }\n\n};\nconst baseMsgEditnft = {\n  id: \"\",\n  denomId: \"\",\n  name: \"\",\n  uri: \"\",\n  data: \"\",\n  sender: \"\"\n};\nexport const MsgEditnft = {\n  encode(message, writer = Writer.create()) {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n\n    if (message.denomId !== \"\") {\n      writer.uint32(18).string(message.denomId);\n    }\n\n    if (message.name !== \"\") {\n      writer.uint32(26).string(message.name);\n    }\n\n    if (message.uri !== \"\") {\n      writer.uint32(34).string(message.uri);\n    }\n\n    if (message.data !== \"\") {\n      writer.uint32(42).string(message.data);\n    }\n\n    if (message.sender !== \"\") {\n      writer.uint32(50).string(message.sender);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgEditnft\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.string();\n          break;\n\n        case 2:\n          message.denomId = reader.string();\n          break;\n\n        case 3:\n          message.name = reader.string();\n          break;\n\n        case 4:\n          message.uri = reader.string();\n          break;\n\n        case 5:\n          message.data = reader.string();\n          break;\n\n        case 6:\n          message.sender = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseMsgEditnft\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = String(object.id);\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.denomId !== undefined && object.denomId !== null) {\n      message.denomId = String(object.denomId);\n    } else {\n      message.denomId = \"\";\n    }\n\n    if (object.name !== undefined && object.name !== null) {\n      message.name = String(object.name);\n    } else {\n      message.name = \"\";\n    }\n\n    if (object.uri !== undefined && object.uri !== null) {\n      message.uri = String(object.uri);\n    } else {\n      message.uri = \"\";\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = String(object.data);\n    } else {\n      message.data = \"\";\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = String(object.sender);\n    } else {\n      message.sender = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.id !== undefined && (obj.id = message.id);\n    message.denomId !== undefined && (obj.denomId = message.denomId);\n    message.name !== undefined && (obj.name = message.name);\n    message.uri !== undefined && (obj.uri = message.uri);\n    message.data !== undefined && (obj.data = message.data);\n    message.sender !== undefined && (obj.sender = message.sender);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseMsgEditnft\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = object.id;\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.denomId !== undefined && object.denomId !== null) {\n      message.denomId = object.denomId;\n    } else {\n      message.denomId = \"\";\n    }\n\n    if (object.name !== undefined && object.name !== null) {\n      message.name = object.name;\n    } else {\n      message.name = \"\";\n    }\n\n    if (object.uri !== undefined && object.uri !== null) {\n      message.uri = object.uri;\n    } else {\n      message.uri = \"\";\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = \"\";\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = object.sender;\n    } else {\n      message.sender = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgEditnftResponse = {};\nexport const MsgEditnftResponse = {\n  encode(_, writer = Writer.create()) {\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgEditnftResponse\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = { ...baseMsgEditnftResponse\n    };\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = { ...baseMsgEditnftResponse\n    };\n    return message;\n  }\n\n};\nconst baseMsgMintnft = {\n  id: \"\",\n  denomId: \"\",\n  name: \"\",\n  uri: \"\",\n  data: \"\",\n  sender: \"\",\n  recipient: \"\"\n};\nexport const MsgMintnft = {\n  encode(message, writer = Writer.create()) {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n\n    if (message.denomId !== \"\") {\n      writer.uint32(18).string(message.denomId);\n    }\n\n    if (message.name !== \"\") {\n      writer.uint32(26).string(message.name);\n    }\n\n    if (message.uri !== \"\") {\n      writer.uint32(34).string(message.uri);\n    }\n\n    if (message.data !== \"\") {\n      writer.uint32(42).string(message.data);\n    }\n\n    if (message.sender !== \"\") {\n      writer.uint32(50).string(message.sender);\n    }\n\n    if (message.recipient !== \"\") {\n      writer.uint32(58).string(message.recipient);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgMintnft\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.string();\n          break;\n\n        case 2:\n          message.denomId = reader.string();\n          break;\n\n        case 3:\n          message.name = reader.string();\n          break;\n\n        case 4:\n          message.uri = reader.string();\n          break;\n\n        case 5:\n          message.data = reader.string();\n          break;\n\n        case 6:\n          message.sender = reader.string();\n          break;\n\n        case 7:\n          message.recipient = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseMsgMintnft\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = String(object.id);\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.denomId !== undefined && object.denomId !== null) {\n      message.denomId = String(object.denomId);\n    } else {\n      message.denomId = \"\";\n    }\n\n    if (object.name !== undefined && object.name !== null) {\n      message.name = String(object.name);\n    } else {\n      message.name = \"\";\n    }\n\n    if (object.uri !== undefined && object.uri !== null) {\n      message.uri = String(object.uri);\n    } else {\n      message.uri = \"\";\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = String(object.data);\n    } else {\n      message.data = \"\";\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = String(object.sender);\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.recipient !== undefined && object.recipient !== null) {\n      message.recipient = String(object.recipient);\n    } else {\n      message.recipient = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.id !== undefined && (obj.id = message.id);\n    message.denomId !== undefined && (obj.denomId = message.denomId);\n    message.name !== undefined && (obj.name = message.name);\n    message.uri !== undefined && (obj.uri = message.uri);\n    message.data !== undefined && (obj.data = message.data);\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseMsgMintnft\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = object.id;\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.denomId !== undefined && object.denomId !== null) {\n      message.denomId = object.denomId;\n    } else {\n      message.denomId = \"\";\n    }\n\n    if (object.name !== undefined && object.name !== null) {\n      message.name = object.name;\n    } else {\n      message.name = \"\";\n    }\n\n    if (object.uri !== undefined && object.uri !== null) {\n      message.uri = object.uri;\n    } else {\n      message.uri = \"\";\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = \"\";\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = object.sender;\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.recipient !== undefined && object.recipient !== null) {\n      message.recipient = object.recipient;\n    } else {\n      message.recipient = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgMintnftResponse = {};\nexport const MsgMintnftResponse = {\n  encode(_, writer = Writer.create()) {\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgMintnftResponse\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = { ...baseMsgMintnftResponse\n    };\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = { ...baseMsgMintnftResponse\n    };\n    return message;\n  }\n\n};\nconst baseMsgBurnnft = {\n  id: \"\",\n  denomId: \"\",\n  sender: \"\"\n};\nexport const MsgBurnnft = {\n  encode(message, writer = Writer.create()) {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n\n    if (message.denomId !== \"\") {\n      writer.uint32(18).string(message.denomId);\n    }\n\n    if (message.sender !== \"\") {\n      writer.uint32(26).string(message.sender);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgBurnnft\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.string();\n          break;\n\n        case 2:\n          message.denomId = reader.string();\n          break;\n\n        case 3:\n          message.sender = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseMsgBurnnft\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = String(object.id);\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.denomId !== undefined && object.denomId !== null) {\n      message.denomId = String(object.denomId);\n    } else {\n      message.denomId = \"\";\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = String(object.sender);\n    } else {\n      message.sender = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.id !== undefined && (obj.id = message.id);\n    message.denomId !== undefined && (obj.denomId = message.denomId);\n    message.sender !== undefined && (obj.sender = message.sender);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseMsgBurnnft\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = object.id;\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.denomId !== undefined && object.denomId !== null) {\n      message.denomId = object.denomId;\n    } else {\n      message.denomId = \"\";\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = object.sender;\n    } else {\n      message.sender = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgBurnnftResponse = {};\nexport const MsgBurnnftResponse = {\n  encode(_, writer = Writer.create()) {\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgBurnnftResponse\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = { ...baseMsgBurnnftResponse\n    };\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = { ...baseMsgBurnnftResponse\n    };\n    return message;\n  }\n\n};\nconst baseMsgTransferDenom = {\n  id: \"\",\n  sender: \"\",\n  recipient: \"\"\n};\nexport const MsgTransferDenom = {\n  encode(message, writer = Writer.create()) {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n\n    if (message.sender !== \"\") {\n      writer.uint32(18).string(message.sender);\n    }\n\n    if (message.recipient !== \"\") {\n      writer.uint32(26).string(message.recipient);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgTransferDenom\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.string();\n          break;\n\n        case 2:\n          message.sender = reader.string();\n          break;\n\n        case 3:\n          message.recipient = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseMsgTransferDenom\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = String(object.id);\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = String(object.sender);\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.recipient !== undefined && object.recipient !== null) {\n      message.recipient = String(object.recipient);\n    } else {\n      message.recipient = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.id !== undefined && (obj.id = message.id);\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseMsgTransferDenom\n    };\n\n    if (object.id !== undefined && object.id !== null) {\n      message.id = object.id;\n    } else {\n      message.id = \"\";\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = object.sender;\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.recipient !== undefined && object.recipient !== null) {\n      message.recipient = object.recipient;\n    } else {\n      message.recipient = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgTransferDenomResponse = {};\nexport const MsgTransferDenomResponse = {\n  encode(_, writer = Writer.create()) {\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgTransferDenomResponse\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = { ...baseMsgTransferDenomResponse\n    };\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = { ...baseMsgTransferDenomResponse\n    };\n    return message;\n  }\n\n};\nexport class MsgClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n  }\n\n  IssueDenom(request) {\n    const data = MsgIssueDenom.encode(request).finish();\n    const promise = this.rpc.request(\"irismod.nft.Msg\", \"IssueDenom\", data);\n    return promise.then(data => MsgIssueDenomResponse.decode(new Reader(data)));\n  }\n\n  Mintnft(request) {\n    const data = MsgMintnft.encode(request).finish();\n    const promise = this.rpc.request(\"irismod.nft.Msg\", \"Mintnft\", data);\n    return promise.then(data => MsgMintnftResponse.decode(new Reader(data)));\n  }\n\n  Editnft(request) {\n    const data = MsgEditnft.encode(request).finish();\n    const promise = this.rpc.request(\"irismod.nft.Msg\", \"Editnft\", data);\n    return promise.then(data => MsgEditnftResponse.decode(new Reader(data)));\n  }\n\n  Transfernft(request) {\n    const data = MsgTransfernft.encode(request).finish();\n    const promise = this.rpc.request(\"irismod.nft.Msg\", \"Transfernft\", data);\n    return promise.then(data => MsgTransfernftResponse.decode(new Reader(data)));\n  }\n\n  Burnnft(request) {\n    const data = MsgBurnnft.encode(request).finish();\n    const promise = this.rpc.request(\"irismod.nft.Msg\", \"Burnnft\", data);\n    return promise.then(data => MsgBurnnftResponse.decode(new Reader(data)));\n  }\n\n  TransferDenom(request) {\n    const data = MsgTransferDenom.encode(request).finish();\n    const promise = this.rpc.request(\"irismod.nft.Msg\", \"TransferDenom\", data);\n    return promise.then(data => MsgTransferDenomResponse.decode(new Reader(data)));\n  }\n\n}","map":{"version":3,"sources":["/home/lisoleg/cosmos/irisnet/irishub/vue/src/store/generated/alice/checkers/irismod.nft/module/types/nft/tx.js"],"names":["Reader","Writer","protobufPackage","baseMsgIssueDenom","id","name","schema","sender","symbol","mintRestricted","updateRestricted","MsgIssueDenom","encode","message","writer","create","uint32","string","bool","decode","input","length","reader","Uint8Array","end","undefined","len","pos","tag","skipType","fromJSON","object","String","Boolean","toJSON","obj","fromPartial","baseMsgIssueDenomResponse","MsgIssueDenomResponse","_","baseMsgTransfernft","denomId","uri","data","recipient","MsgTransfernft","baseMsgTransfernftResponse","MsgTransfernftResponse","baseMsgEditnft","MsgEditnft","baseMsgEditnftResponse","MsgEditnftResponse","baseMsgMintnft","MsgMintnft","baseMsgMintnftResponse","MsgMintnftResponse","baseMsgBurnnft","MsgBurnnft","baseMsgBurnnftResponse","MsgBurnnftResponse","baseMsgTransferDenom","MsgTransferDenom","baseMsgTransferDenomResponse","MsgTransferDenomResponse","MsgClientImpl","constructor","rpc","IssueDenom","request","finish","promise","then","Mintnft","Editnft","Transfernft","Burnnft","TransferDenom"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { Reader, Writer } from \"protobufjs/minimal\";\nexport const protobufPackage = \"irismod.nft\";\nconst baseMsgIssueDenom = {\n    id: \"\",\n    name: \"\",\n    schema: \"\",\n    sender: \"\",\n    symbol: \"\",\n    mintRestricted: false,\n    updateRestricted: false,\n};\nexport const MsgIssueDenom = {\n    encode(message, writer = Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.schema !== \"\") {\n            writer.uint32(26).string(message.schema);\n        }\n        if (message.sender !== \"\") {\n            writer.uint32(34).string(message.sender);\n        }\n        if (message.symbol !== \"\") {\n            writer.uint32(42).string(message.symbol);\n        }\n        if (message.mintRestricted === true) {\n            writer.uint32(48).bool(message.mintRestricted);\n        }\n        if (message.updateRestricted === true) {\n            writer.uint32(56).bool(message.updateRestricted);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgIssueDenom };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.schema = reader.string();\n                    break;\n                case 4:\n                    message.sender = reader.string();\n                    break;\n                case 5:\n                    message.symbol = reader.string();\n                    break;\n                case 6:\n                    message.mintRestricted = reader.bool();\n                    break;\n                case 7:\n                    message.updateRestricted = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseMsgIssueDenom };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = String(object.id);\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.name !== undefined && object.name !== null) {\n            message.name = String(object.name);\n        }\n        else {\n            message.name = \"\";\n        }\n        if (object.schema !== undefined && object.schema !== null) {\n            message.schema = String(object.schema);\n        }\n        else {\n            message.schema = \"\";\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = String(object.sender);\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.symbol !== undefined && object.symbol !== null) {\n            message.symbol = String(object.symbol);\n        }\n        else {\n            message.symbol = \"\";\n        }\n        if (object.mintRestricted !== undefined && object.mintRestricted !== null) {\n            message.mintRestricted = Boolean(object.mintRestricted);\n        }\n        else {\n            message.mintRestricted = false;\n        }\n        if (object.updateRestricted !== undefined &&\n            object.updateRestricted !== null) {\n            message.updateRestricted = Boolean(object.updateRestricted);\n        }\n        else {\n            message.updateRestricted = false;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.id !== undefined && (obj.id = message.id);\n        message.name !== undefined && (obj.name = message.name);\n        message.schema !== undefined && (obj.schema = message.schema);\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.symbol !== undefined && (obj.symbol = message.symbol);\n        message.mintRestricted !== undefined &&\n            (obj.mintRestricted = message.mintRestricted);\n        message.updateRestricted !== undefined &&\n            (obj.updateRestricted = message.updateRestricted);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseMsgIssueDenom };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = object.id;\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.name !== undefined && object.name !== null) {\n            message.name = object.name;\n        }\n        else {\n            message.name = \"\";\n        }\n        if (object.schema !== undefined && object.schema !== null) {\n            message.schema = object.schema;\n        }\n        else {\n            message.schema = \"\";\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = object.sender;\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.symbol !== undefined && object.symbol !== null) {\n            message.symbol = object.symbol;\n        }\n        else {\n            message.symbol = \"\";\n        }\n        if (object.mintRestricted !== undefined && object.mintRestricted !== null) {\n            message.mintRestricted = object.mintRestricted;\n        }\n        else {\n            message.mintRestricted = false;\n        }\n        if (object.updateRestricted !== undefined &&\n            object.updateRestricted !== null) {\n            message.updateRestricted = object.updateRestricted;\n        }\n        else {\n            message.updateRestricted = false;\n        }\n        return message;\n    },\n};\nconst baseMsgIssueDenomResponse = {};\nexport const MsgIssueDenomResponse = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgIssueDenomResponse };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = { ...baseMsgIssueDenomResponse };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = { ...baseMsgIssueDenomResponse };\n        return message;\n    },\n};\nconst baseMsgTransfernft = {\n    id: \"\",\n    denomId: \"\",\n    name: \"\",\n    uri: \"\",\n    data: \"\",\n    sender: \"\",\n    recipient: \"\",\n};\nexport const MsgTransfernft = {\n    encode(message, writer = Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        if (message.denomId !== \"\") {\n            writer.uint32(18).string(message.denomId);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(26).string(message.name);\n        }\n        if (message.uri !== \"\") {\n            writer.uint32(34).string(message.uri);\n        }\n        if (message.data !== \"\") {\n            writer.uint32(42).string(message.data);\n        }\n        if (message.sender !== \"\") {\n            writer.uint32(50).string(message.sender);\n        }\n        if (message.recipient !== \"\") {\n            writer.uint32(58).string(message.recipient);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgTransfernft };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.denomId = reader.string();\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.uri = reader.string();\n                    break;\n                case 5:\n                    message.data = reader.string();\n                    break;\n                case 6:\n                    message.sender = reader.string();\n                    break;\n                case 7:\n                    message.recipient = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseMsgTransfernft };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = String(object.id);\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.denomId !== undefined && object.denomId !== null) {\n            message.denomId = String(object.denomId);\n        }\n        else {\n            message.denomId = \"\";\n        }\n        if (object.name !== undefined && object.name !== null) {\n            message.name = String(object.name);\n        }\n        else {\n            message.name = \"\";\n        }\n        if (object.uri !== undefined && object.uri !== null) {\n            message.uri = String(object.uri);\n        }\n        else {\n            message.uri = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = String(object.data);\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = String(object.sender);\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.recipient !== undefined && object.recipient !== null) {\n            message.recipient = String(object.recipient);\n        }\n        else {\n            message.recipient = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.id !== undefined && (obj.id = message.id);\n        message.denomId !== undefined && (obj.denomId = message.denomId);\n        message.name !== undefined && (obj.name = message.name);\n        message.uri !== undefined && (obj.uri = message.uri);\n        message.data !== undefined && (obj.data = message.data);\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.recipient !== undefined && (obj.recipient = message.recipient);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseMsgTransfernft };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = object.id;\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.denomId !== undefined && object.denomId !== null) {\n            message.denomId = object.denomId;\n        }\n        else {\n            message.denomId = \"\";\n        }\n        if (object.name !== undefined && object.name !== null) {\n            message.name = object.name;\n        }\n        else {\n            message.name = \"\";\n        }\n        if (object.uri !== undefined && object.uri !== null) {\n            message.uri = object.uri;\n        }\n        else {\n            message.uri = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = object.sender;\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.recipient !== undefined && object.recipient !== null) {\n            message.recipient = object.recipient;\n        }\n        else {\n            message.recipient = \"\";\n        }\n        return message;\n    },\n};\nconst baseMsgTransfernftResponse = {};\nexport const MsgTransfernftResponse = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgTransfernftResponse };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = { ...baseMsgTransfernftResponse };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = { ...baseMsgTransfernftResponse };\n        return message;\n    },\n};\nconst baseMsgEditnft = {\n    id: \"\",\n    denomId: \"\",\n    name: \"\",\n    uri: \"\",\n    data: \"\",\n    sender: \"\",\n};\nexport const MsgEditnft = {\n    encode(message, writer = Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        if (message.denomId !== \"\") {\n            writer.uint32(18).string(message.denomId);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(26).string(message.name);\n        }\n        if (message.uri !== \"\") {\n            writer.uint32(34).string(message.uri);\n        }\n        if (message.data !== \"\") {\n            writer.uint32(42).string(message.data);\n        }\n        if (message.sender !== \"\") {\n            writer.uint32(50).string(message.sender);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgEditnft };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.denomId = reader.string();\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.uri = reader.string();\n                    break;\n                case 5:\n                    message.data = reader.string();\n                    break;\n                case 6:\n                    message.sender = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseMsgEditnft };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = String(object.id);\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.denomId !== undefined && object.denomId !== null) {\n            message.denomId = String(object.denomId);\n        }\n        else {\n            message.denomId = \"\";\n        }\n        if (object.name !== undefined && object.name !== null) {\n            message.name = String(object.name);\n        }\n        else {\n            message.name = \"\";\n        }\n        if (object.uri !== undefined && object.uri !== null) {\n            message.uri = String(object.uri);\n        }\n        else {\n            message.uri = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = String(object.data);\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = String(object.sender);\n        }\n        else {\n            message.sender = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.id !== undefined && (obj.id = message.id);\n        message.denomId !== undefined && (obj.denomId = message.denomId);\n        message.name !== undefined && (obj.name = message.name);\n        message.uri !== undefined && (obj.uri = message.uri);\n        message.data !== undefined && (obj.data = message.data);\n        message.sender !== undefined && (obj.sender = message.sender);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseMsgEditnft };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = object.id;\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.denomId !== undefined && object.denomId !== null) {\n            message.denomId = object.denomId;\n        }\n        else {\n            message.denomId = \"\";\n        }\n        if (object.name !== undefined && object.name !== null) {\n            message.name = object.name;\n        }\n        else {\n            message.name = \"\";\n        }\n        if (object.uri !== undefined && object.uri !== null) {\n            message.uri = object.uri;\n        }\n        else {\n            message.uri = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = object.sender;\n        }\n        else {\n            message.sender = \"\";\n        }\n        return message;\n    },\n};\nconst baseMsgEditnftResponse = {};\nexport const MsgEditnftResponse = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgEditnftResponse };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = { ...baseMsgEditnftResponse };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = { ...baseMsgEditnftResponse };\n        return message;\n    },\n};\nconst baseMsgMintnft = {\n    id: \"\",\n    denomId: \"\",\n    name: \"\",\n    uri: \"\",\n    data: \"\",\n    sender: \"\",\n    recipient: \"\",\n};\nexport const MsgMintnft = {\n    encode(message, writer = Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        if (message.denomId !== \"\") {\n            writer.uint32(18).string(message.denomId);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(26).string(message.name);\n        }\n        if (message.uri !== \"\") {\n            writer.uint32(34).string(message.uri);\n        }\n        if (message.data !== \"\") {\n            writer.uint32(42).string(message.data);\n        }\n        if (message.sender !== \"\") {\n            writer.uint32(50).string(message.sender);\n        }\n        if (message.recipient !== \"\") {\n            writer.uint32(58).string(message.recipient);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgMintnft };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.denomId = reader.string();\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.uri = reader.string();\n                    break;\n                case 5:\n                    message.data = reader.string();\n                    break;\n                case 6:\n                    message.sender = reader.string();\n                    break;\n                case 7:\n                    message.recipient = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseMsgMintnft };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = String(object.id);\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.denomId !== undefined && object.denomId !== null) {\n            message.denomId = String(object.denomId);\n        }\n        else {\n            message.denomId = \"\";\n        }\n        if (object.name !== undefined && object.name !== null) {\n            message.name = String(object.name);\n        }\n        else {\n            message.name = \"\";\n        }\n        if (object.uri !== undefined && object.uri !== null) {\n            message.uri = String(object.uri);\n        }\n        else {\n            message.uri = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = String(object.data);\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = String(object.sender);\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.recipient !== undefined && object.recipient !== null) {\n            message.recipient = String(object.recipient);\n        }\n        else {\n            message.recipient = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.id !== undefined && (obj.id = message.id);\n        message.denomId !== undefined && (obj.denomId = message.denomId);\n        message.name !== undefined && (obj.name = message.name);\n        message.uri !== undefined && (obj.uri = message.uri);\n        message.data !== undefined && (obj.data = message.data);\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.recipient !== undefined && (obj.recipient = message.recipient);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseMsgMintnft };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = object.id;\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.denomId !== undefined && object.denomId !== null) {\n            message.denomId = object.denomId;\n        }\n        else {\n            message.denomId = \"\";\n        }\n        if (object.name !== undefined && object.name !== null) {\n            message.name = object.name;\n        }\n        else {\n            message.name = \"\";\n        }\n        if (object.uri !== undefined && object.uri !== null) {\n            message.uri = object.uri;\n        }\n        else {\n            message.uri = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = object.sender;\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.recipient !== undefined && object.recipient !== null) {\n            message.recipient = object.recipient;\n        }\n        else {\n            message.recipient = \"\";\n        }\n        return message;\n    },\n};\nconst baseMsgMintnftResponse = {};\nexport const MsgMintnftResponse = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgMintnftResponse };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = { ...baseMsgMintnftResponse };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = { ...baseMsgMintnftResponse };\n        return message;\n    },\n};\nconst baseMsgBurnnft = { id: \"\", denomId: \"\", sender: \"\" };\nexport const MsgBurnnft = {\n    encode(message, writer = Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        if (message.denomId !== \"\") {\n            writer.uint32(18).string(message.denomId);\n        }\n        if (message.sender !== \"\") {\n            writer.uint32(26).string(message.sender);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgBurnnft };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.denomId = reader.string();\n                    break;\n                case 3:\n                    message.sender = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseMsgBurnnft };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = String(object.id);\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.denomId !== undefined && object.denomId !== null) {\n            message.denomId = String(object.denomId);\n        }\n        else {\n            message.denomId = \"\";\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = String(object.sender);\n        }\n        else {\n            message.sender = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.id !== undefined && (obj.id = message.id);\n        message.denomId !== undefined && (obj.denomId = message.denomId);\n        message.sender !== undefined && (obj.sender = message.sender);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseMsgBurnnft };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = object.id;\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.denomId !== undefined && object.denomId !== null) {\n            message.denomId = object.denomId;\n        }\n        else {\n            message.denomId = \"\";\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = object.sender;\n        }\n        else {\n            message.sender = \"\";\n        }\n        return message;\n    },\n};\nconst baseMsgBurnnftResponse = {};\nexport const MsgBurnnftResponse = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgBurnnftResponse };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = { ...baseMsgBurnnftResponse };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = { ...baseMsgBurnnftResponse };\n        return message;\n    },\n};\nconst baseMsgTransferDenom = { id: \"\", sender: \"\", recipient: \"\" };\nexport const MsgTransferDenom = {\n    encode(message, writer = Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        if (message.sender !== \"\") {\n            writer.uint32(18).string(message.sender);\n        }\n        if (message.recipient !== \"\") {\n            writer.uint32(26).string(message.recipient);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgTransferDenom };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.sender = reader.string();\n                    break;\n                case 3:\n                    message.recipient = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseMsgTransferDenom };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = String(object.id);\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = String(object.sender);\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.recipient !== undefined && object.recipient !== null) {\n            message.recipient = String(object.recipient);\n        }\n        else {\n            message.recipient = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.id !== undefined && (obj.id = message.id);\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.recipient !== undefined && (obj.recipient = message.recipient);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseMsgTransferDenom };\n        if (object.id !== undefined && object.id !== null) {\n            message.id = object.id;\n        }\n        else {\n            message.id = \"\";\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = object.sender;\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.recipient !== undefined && object.recipient !== null) {\n            message.recipient = object.recipient;\n        }\n        else {\n            message.recipient = \"\";\n        }\n        return message;\n    },\n};\nconst baseMsgTransferDenomResponse = {};\nexport const MsgTransferDenomResponse = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseMsgTransferDenomResponse,\n        };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = {\n            ...baseMsgTransferDenomResponse,\n        };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = {\n            ...baseMsgTransferDenomResponse,\n        };\n        return message;\n    },\n};\nexport class MsgClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n    }\n    IssueDenom(request) {\n        const data = MsgIssueDenom.encode(request).finish();\n        const promise = this.rpc.request(\"irismod.nft.Msg\", \"IssueDenom\", data);\n        return promise.then((data) => MsgIssueDenomResponse.decode(new Reader(data)));\n    }\n    Mintnft(request) {\n        const data = MsgMintnft.encode(request).finish();\n        const promise = this.rpc.request(\"irismod.nft.Msg\", \"Mintnft\", data);\n        return promise.then((data) => MsgMintnftResponse.decode(new Reader(data)));\n    }\n    Editnft(request) {\n        const data = MsgEditnft.encode(request).finish();\n        const promise = this.rpc.request(\"irismod.nft.Msg\", \"Editnft\", data);\n        return promise.then((data) => MsgEditnftResponse.decode(new Reader(data)));\n    }\n    Transfernft(request) {\n        const data = MsgTransfernft.encode(request).finish();\n        const promise = this.rpc.request(\"irismod.nft.Msg\", \"Transfernft\", data);\n        return promise.then((data) => MsgTransfernftResponse.decode(new Reader(data)));\n    }\n    Burnnft(request) {\n        const data = MsgBurnnft.encode(request).finish();\n        const promise = this.rpc.request(\"irismod.nft.Msg\", \"Burnnft\", data);\n        return promise.then((data) => MsgBurnnftResponse.decode(new Reader(data)));\n    }\n    TransferDenom(request) {\n        const data = MsgTransferDenom.encode(request).finish();\n        const promise = this.rpc.request(\"irismod.nft.Msg\", \"TransferDenom\", data);\n        return promise.then((data) => MsgTransferDenomResponse.decode(new Reader(data)));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}