{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseCoins = void 0;\n\nconst math_1 = require(\"@cosmjs/math\");\n/**\n * Takes a coins list like \"819966000ucosm,700000000ustake\" and parses it.\n *\n * This is a Stargate ready version of parseCoins from @cosmjs/amino and @cosmjs/launchpad.\n * It supports more denoms.\n */\n\n\nfunction parseCoins(input) {\n  return input.replace(/\\s/g, \"\").split(\",\").filter(Boolean).map(part => {\n    // Denom regex from Stargate (https://github.com/cosmos/cosmos-sdk/blob/v0.42.7/types/coin.go#L599-L601)\n    const match = part.match(/^([0-9]+)([a-zA-Z][a-zA-Z0-9/]{2,127})$/);\n    if (!match) throw new Error(\"Got an invalid coin string\");\n    return {\n      amount: math_1.Uint64.fromString(match[1]).toString(),\n      denom: match[2]\n    };\n  });\n}\n\nexports.parseCoins = parseCoins;","map":{"version":3,"sources":["../src/coins.ts"],"names":[],"mappings":";;;;;;;;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAEA;;;;;AAKG;;;AACH,SAAgB,UAAhB,CAA2B,KAA3B,EAAwC;AACtC,SAAO,KAAK,CACT,OADI,CACI,KADJ,EACW,EADX,EAEJ,KAFI,CAEE,GAFF,EAGJ,MAHI,CAGG,OAHH,EAIJ,GAJI,CAIC,IAAD,IAAS;AACZ;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,yCAAX,CAAd;AACA,QAAI,CAAC,KAAL,EAAY,MAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACZ,WAAO;AACL,MAAA,MAAM,EAAE,MAAA,CAAA,MAAA,CAAO,UAAP,CAAkB,KAAK,CAAC,CAAD,CAAvB,EAA4B,QAA5B,EADH;AAEL,MAAA,KAAK,EAAE,KAAK,CAAC,CAAD;AAFP,KAAP;AAID,GAZI,CAAP;AAaD;;AAdD,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseCoins = void 0;\nconst math_1 = require(\"@cosmjs/math\");\n/**\n * Takes a coins list like \"819966000ucosm,700000000ustake\" and parses it.\n *\n * This is a Stargate ready version of parseCoins from @cosmjs/amino and @cosmjs/launchpad.\n * It supports more denoms.\n */\nfunction parseCoins(input) {\n    return input\n        .replace(/\\s/g, \"\")\n        .split(\",\")\n        .filter(Boolean)\n        .map((part) => {\n        // Denom regex from Stargate (https://github.com/cosmos/cosmos-sdk/blob/v0.42.7/types/coin.go#L599-L601)\n        const match = part.match(/^([0-9]+)([a-zA-Z][a-zA-Z0-9/]{2,127})$/);\n        if (!match)\n            throw new Error(\"Got an invalid coin string\");\n        return {\n            amount: math_1.Uint64.fromString(match[1]).toString(),\n            denom: match[2],\n        };\n    });\n}\nexports.parseCoins = parseCoins;\n//# sourceMappingURL=coins.js.map"]},"metadata":{},"sourceType":"script"}