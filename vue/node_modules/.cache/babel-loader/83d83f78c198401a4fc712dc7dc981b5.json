{"ast":null,"code":"import { txClient, queryClient, MissingWalletError, registry } from './module'; // @ts-ignore\n\nimport { SpVuexError } from '@starport/vuex';\nimport { Params } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { ValidatorHistoricalRewards } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { ValidatorCurrentRewards } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { ValidatorAccumulatedCommission } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { ValidatorOutstandingRewards } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { ValidatorSlashEvent } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { ValidatorSlashEvents } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { FeePool } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { CommunityPoolSpendProposal } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { DelegatorStartingInfo } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { DelegationDelegatorReward } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { CommunityPoolSpendProposalWithDeposit } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { DelegatorWithdrawInfo } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nimport { ValidatorOutstandingRewardsRecord } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nimport { ValidatorAccumulatedCommissionRecord } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nimport { ValidatorHistoricalRewardsRecord } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nimport { ValidatorCurrentRewardsRecord } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nimport { DelegatorStartingInfoRecord } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nimport { ValidatorSlashEventRecord } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nexport { Params, ValidatorHistoricalRewards, ValidatorCurrentRewards, ValidatorAccumulatedCommission, ValidatorOutstandingRewards, ValidatorSlashEvent, ValidatorSlashEvents, FeePool, CommunityPoolSpendProposal, DelegatorStartingInfo, DelegationDelegatorReward, CommunityPoolSpendProposalWithDeposit, DelegatorWithdrawInfo, ValidatorOutstandingRewardsRecord, ValidatorAccumulatedCommissionRecord, ValidatorHistoricalRewardsRecord, ValidatorCurrentRewardsRecord, DelegatorStartingInfoRecord, ValidatorSlashEventRecord };\n\nasync function initTxClient(vuexGetters) {\n  return await txClient(vuexGetters['common/wallet/signer'], {\n    addr: vuexGetters['common/env/apiTendermint']\n  });\n}\n\nasync function initQueryClient(vuexGetters) {\n  return await queryClient({\n    addr: vuexGetters['common/env/apiCosmos']\n  });\n}\n\nfunction mergeResults(value, next_values) {\n  for (let prop of Object.keys(next_values)) {\n    if (Array.isArray(next_values[prop])) {\n      value[prop] = [...value[prop], ...next_values[prop]];\n    } else {\n      value[prop] = next_values[prop];\n    }\n  }\n\n  return value;\n}\n\nfunction getStructure(template) {\n  let structure = {\n    fields: []\n  };\n\n  for (const [key, value] of Object.entries(template)) {\n    let field = {};\n    field.name = key;\n    field.type = typeof value;\n    structure.fields.push(field);\n  }\n\n  return structure;\n}\n\nconst getDefaultState = () => {\n  return {\n    Params: {},\n    ValidatorOutstandingRewards: {},\n    ValidatorCommission: {},\n    ValidatorSlashes: {},\n    DelegationRewards: {},\n    DelegationTotalRewards: {},\n    DelegatorValidators: {},\n    DelegatorWithdrawAddress: {},\n    CommunityPool: {},\n    _Structure: {\n      Params: getStructure(Params.fromPartial({})),\n      ValidatorHistoricalRewards: getStructure(ValidatorHistoricalRewards.fromPartial({})),\n      ValidatorCurrentRewards: getStructure(ValidatorCurrentRewards.fromPartial({})),\n      ValidatorAccumulatedCommission: getStructure(ValidatorAccumulatedCommission.fromPartial({})),\n      ValidatorOutstandingRewards: getStructure(ValidatorOutstandingRewards.fromPartial({})),\n      ValidatorSlashEvent: getStructure(ValidatorSlashEvent.fromPartial({})),\n      ValidatorSlashEvents: getStructure(ValidatorSlashEvents.fromPartial({})),\n      FeePool: getStructure(FeePool.fromPartial({})),\n      CommunityPoolSpendProposal: getStructure(CommunityPoolSpendProposal.fromPartial({})),\n      DelegatorStartingInfo: getStructure(DelegatorStartingInfo.fromPartial({})),\n      DelegationDelegatorReward: getStructure(DelegationDelegatorReward.fromPartial({})),\n      CommunityPoolSpendProposalWithDeposit: getStructure(CommunityPoolSpendProposalWithDeposit.fromPartial({})),\n      DelegatorWithdrawInfo: getStructure(DelegatorWithdrawInfo.fromPartial({})),\n      ValidatorOutstandingRewardsRecord: getStructure(ValidatorOutstandingRewardsRecord.fromPartial({})),\n      ValidatorAccumulatedCommissionRecord: getStructure(ValidatorAccumulatedCommissionRecord.fromPartial({})),\n      ValidatorHistoricalRewardsRecord: getStructure(ValidatorHistoricalRewardsRecord.fromPartial({})),\n      ValidatorCurrentRewardsRecord: getStructure(ValidatorCurrentRewardsRecord.fromPartial({})),\n      DelegatorStartingInfoRecord: getStructure(DelegatorStartingInfoRecord.fromPartial({})),\n      ValidatorSlashEventRecord: getStructure(ValidatorSlashEventRecord.fromPartial({}))\n    },\n    _Registry: registry,\n    _Subscriptions: new Set()\n  };\n}; // initial state\n\n\nconst state = getDefaultState();\nexport default {\n  namespaced: true,\n  state,\n  mutations: {\n    RESET_STATE(state) {\n      Object.assign(state, getDefaultState());\n    },\n\n    QUERY(state, {\n      query,\n      key,\n      value\n    }) {\n      state[query][JSON.stringify(key)] = value;\n    },\n\n    SUBSCRIBE(state, subscription) {\n      state._Subscriptions.add(JSON.stringify(subscription));\n    },\n\n    UNSUBSCRIBE(state, subscription) {\n      state._Subscriptions.delete(JSON.stringify(subscription));\n    }\n\n  },\n  getters: {\n    getParams: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Params[JSON.stringify(params)] ?? {};\n    },\n    getValidatorOutstandingRewards: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.ValidatorOutstandingRewards[JSON.stringify(params)] ?? {};\n    },\n    getValidatorCommission: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.ValidatorCommission[JSON.stringify(params)] ?? {};\n    },\n    getValidatorSlashes: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.ValidatorSlashes[JSON.stringify(params)] ?? {};\n    },\n    getDelegationRewards: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.DelegationRewards[JSON.stringify(params)] ?? {};\n    },\n    getDelegationTotalRewards: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.DelegationTotalRewards[JSON.stringify(params)] ?? {};\n    },\n    getDelegatorValidators: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.DelegatorValidators[JSON.stringify(params)] ?? {};\n    },\n    getDelegatorWithdrawAddress: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.DelegatorWithdrawAddress[JSON.stringify(params)] ?? {};\n    },\n    getCommunityPool: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.CommunityPool[JSON.stringify(params)] ?? {};\n    },\n    getTypeStructure: state => type => {\n      return state._Structure[type].fields;\n    },\n    getRegistry: state => {\n      return state._Registry;\n    }\n  },\n  actions: {\n    init({\n      dispatch,\n      rootGetters\n    }) {\n      console.log('Vuex module: cosmos.distribution.v1beta1 initialized!');\n\n      if (rootGetters['common/env/client']) {\n        rootGetters['common/env/client'].on('newblock', () => {\n          dispatch('StoreUpdate');\n        });\n      }\n    },\n\n    resetState({\n      commit\n    }) {\n      commit('RESET_STATE');\n    },\n\n    unsubscribe({\n      commit\n    }, subscription) {\n      commit('UNSUBSCRIBE', subscription);\n    },\n\n    async StoreUpdate({\n      state,\n      dispatch\n    }) {\n      state._Subscriptions.forEach(async subscription => {\n        try {\n          const sub = JSON.parse(subscription);\n          await dispatch(sub.action, sub.payload);\n        } catch (e) {\n          throw new SpVuexError('Subscriptions: ' + e.message);\n        }\n      });\n    },\n\n    async QueryParams({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryParams()).data;\n        commit('QUERY', {\n          query: 'Params',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryParams',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getParams']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryValidatorOutstandingRewards({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryValidatorOutstandingRewards(key.validator_address)).data;\n        commit('QUERY', {\n          query: 'ValidatorOutstandingRewards',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryValidatorOutstandingRewards',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getValidatorOutstandingRewards']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryValidatorOutstandingRewards', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryValidatorCommission({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryValidatorCommission(key.validator_address)).data;\n        commit('QUERY', {\n          query: 'ValidatorCommission',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryValidatorCommission',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getValidatorCommission']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryValidatorCommission', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryValidatorSlashes({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryValidatorSlashes(key.validator_address, query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryValidatorSlashes(key.validator_address, { ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'ValidatorSlashes',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryValidatorSlashes',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getValidatorSlashes']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryValidatorSlashes', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDelegationRewards({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDelegationRewards(key.delegator_address, key.validator_address)).data;\n        commit('QUERY', {\n          query: 'DelegationRewards',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDelegationRewards',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDelegationRewards']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDelegationRewards', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDelegationTotalRewards({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDelegationTotalRewards(key.delegator_address)).data;\n        commit('QUERY', {\n          query: 'DelegationTotalRewards',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDelegationTotalRewards',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDelegationTotalRewards']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDelegationTotalRewards', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDelegatorValidators({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDelegatorValidators(key.delegator_address)).data;\n        commit('QUERY', {\n          query: 'DelegatorValidators',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDelegatorValidators',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDelegatorValidators']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDelegatorValidators', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDelegatorWithdrawAddress({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDelegatorWithdrawAddress(key.delegator_address)).data;\n        commit('QUERY', {\n          query: 'DelegatorWithdrawAddress',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDelegatorWithdrawAddress',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDelegatorWithdrawAddress']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDelegatorWithdrawAddress', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryCommunityPool({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryCommunityPool()).data;\n        commit('QUERY', {\n          query: 'CommunityPool',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryCommunityPool',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getCommunityPool']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryCommunityPool', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async sendMsgWithdrawValidatorCommission({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgWithdrawValidatorCommission(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgWithdrawValidatorCommission:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgWithdrawValidatorCommission:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgSetWithdrawAddress({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgSetWithdrawAddress(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgSetWithdrawAddress:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgSetWithdrawAddress:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgWithdrawDelegatorReward({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgWithdrawDelegatorReward(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgWithdrawDelegatorReward:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgWithdrawDelegatorReward:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgFundCommunityPool({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgFundCommunityPool(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgFundCommunityPool:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgFundCommunityPool:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async MsgWithdrawValidatorCommission({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgWithdrawValidatorCommission(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgWithdrawValidatorCommission:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgWithdrawValidatorCommission:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgSetWithdrawAddress({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgSetWithdrawAddress(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgSetWithdrawAddress:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgSetWithdrawAddress:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgWithdrawDelegatorReward({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgWithdrawDelegatorReward(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgWithdrawDelegatorReward:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgWithdrawDelegatorReward:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgFundCommunityPool({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgFundCommunityPool(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgFundCommunityPool:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgFundCommunityPool:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/lisoleg/checkers/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.distribution.v1beta1/index.js"],"names":["txClient","queryClient","MissingWalletError","registry","SpVuexError","Params","ValidatorHistoricalRewards","ValidatorCurrentRewards","ValidatorAccumulatedCommission","ValidatorOutstandingRewards","ValidatorSlashEvent","ValidatorSlashEvents","FeePool","CommunityPoolSpendProposal","DelegatorStartingInfo","DelegationDelegatorReward","CommunityPoolSpendProposalWithDeposit","DelegatorWithdrawInfo","ValidatorOutstandingRewardsRecord","ValidatorAccumulatedCommissionRecord","ValidatorHistoricalRewardsRecord","ValidatorCurrentRewardsRecord","DelegatorStartingInfoRecord","ValidatorSlashEventRecord","initTxClient","vuexGetters","addr","initQueryClient","mergeResults","value","next_values","prop","Object","keys","Array","isArray","getStructure","template","structure","fields","key","entries","field","name","type","push","getDefaultState","ValidatorCommission","ValidatorSlashes","DelegationRewards","DelegationTotalRewards","DelegatorValidators","DelegatorWithdrawAddress","CommunityPool","_Structure","fromPartial","_Registry","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","delete","getters","getParams","params","getValidatorOutstandingRewards","getValidatorCommission","getValidatorSlashes","getDelegationRewards","getDelegationTotalRewards","getDelegatorValidators","getDelegatorWithdrawAddress","getCommunityPool","getTypeStructure","getRegistry","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","sub","parse","action","payload","e","message","QueryParams","options","subscribe","all","queryParams","data","QueryValidatorOutstandingRewards","queryValidatorOutstandingRewards","validator_address","QueryValidatorCommission","queryValidatorCommission","QueryValidatorSlashes","queryValidatorSlashes","pagination","next_key","QueryDelegationRewards","queryDelegationRewards","delegator_address","QueryDelegationTotalRewards","queryDelegationTotalRewards","QueryDelegatorValidators","queryDelegatorValidators","QueryDelegatorWithdrawAddress","queryDelegatorWithdrawAddress","QueryCommunityPool","queryCommunityPool","sendMsgWithdrawValidatorCommission","fee","memo","msg","msgWithdrawValidatorCommission","result","signAndBroadcast","amount","gas","sendMsgSetWithdrawAddress","msgSetWithdrawAddress","sendMsgWithdrawDelegatorReward","msgWithdrawDelegatorReward","sendMsgFundCommunityPool","msgFundCommunityPool","MsgWithdrawValidatorCommission","MsgSetWithdrawAddress","MsgWithdrawDelegatorReward","MsgFundCommunityPool"],"mappings":"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","sourcesContent":["import { txClient, queryClient, MissingWalletError, registry } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { Params } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { ValidatorHistoricalRewards } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { ValidatorCurrentRewards } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { ValidatorAccumulatedCommission } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { ValidatorOutstandingRewards } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { ValidatorSlashEvent } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { ValidatorSlashEvents } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { FeePool } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { CommunityPoolSpendProposal } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { DelegatorStartingInfo } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { DelegationDelegatorReward } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { CommunityPoolSpendProposalWithDeposit } from \"./module/types/cosmos/distribution/v1beta1/distribution\";\nimport { DelegatorWithdrawInfo } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nimport { ValidatorOutstandingRewardsRecord } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nimport { ValidatorAccumulatedCommissionRecord } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nimport { ValidatorHistoricalRewardsRecord } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nimport { ValidatorCurrentRewardsRecord } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nimport { DelegatorStartingInfoRecord } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nimport { ValidatorSlashEventRecord } from \"./module/types/cosmos/distribution/v1beta1/genesis\";\nexport { Params, ValidatorHistoricalRewards, ValidatorCurrentRewards, ValidatorAccumulatedCommission, ValidatorOutstandingRewards, ValidatorSlashEvent, ValidatorSlashEvents, FeePool, CommunityPoolSpendProposal, DelegatorStartingInfo, DelegationDelegatorReward, CommunityPoolSpendProposalWithDeposit, DelegatorWithdrawInfo, ValidatorOutstandingRewardsRecord, ValidatorAccumulatedCommissionRecord, ValidatorHistoricalRewardsRecord, ValidatorCurrentRewardsRecord, DelegatorStartingInfoRecord, ValidatorSlashEventRecord };\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction mergeResults(value, next_values) {\n    for (let prop of Object.keys(next_values)) {\n        if (Array.isArray(next_values[prop])) {\n            value[prop] = [...value[prop], ...next_values[prop]];\n        }\n        else {\n            value[prop] = next_values[prop];\n        }\n    }\n    return value;\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        Params: {},\n        ValidatorOutstandingRewards: {},\n        ValidatorCommission: {},\n        ValidatorSlashes: {},\n        DelegationRewards: {},\n        DelegationTotalRewards: {},\n        DelegatorValidators: {},\n        DelegatorWithdrawAddress: {},\n        CommunityPool: {},\n        _Structure: {\n            Params: getStructure(Params.fromPartial({})),\n            ValidatorHistoricalRewards: getStructure(ValidatorHistoricalRewards.fromPartial({})),\n            ValidatorCurrentRewards: getStructure(ValidatorCurrentRewards.fromPartial({})),\n            ValidatorAccumulatedCommission: getStructure(ValidatorAccumulatedCommission.fromPartial({})),\n            ValidatorOutstandingRewards: getStructure(ValidatorOutstandingRewards.fromPartial({})),\n            ValidatorSlashEvent: getStructure(ValidatorSlashEvent.fromPartial({})),\n            ValidatorSlashEvents: getStructure(ValidatorSlashEvents.fromPartial({})),\n            FeePool: getStructure(FeePool.fromPartial({})),\n            CommunityPoolSpendProposal: getStructure(CommunityPoolSpendProposal.fromPartial({})),\n            DelegatorStartingInfo: getStructure(DelegatorStartingInfo.fromPartial({})),\n            DelegationDelegatorReward: getStructure(DelegationDelegatorReward.fromPartial({})),\n            CommunityPoolSpendProposalWithDeposit: getStructure(CommunityPoolSpendProposalWithDeposit.fromPartial({})),\n            DelegatorWithdrawInfo: getStructure(DelegatorWithdrawInfo.fromPartial({})),\n            ValidatorOutstandingRewardsRecord: getStructure(ValidatorOutstandingRewardsRecord.fromPartial({})),\n            ValidatorAccumulatedCommissionRecord: getStructure(ValidatorAccumulatedCommissionRecord.fromPartial({})),\n            ValidatorHistoricalRewardsRecord: getStructure(ValidatorHistoricalRewardsRecord.fromPartial({})),\n            ValidatorCurrentRewardsRecord: getStructure(ValidatorCurrentRewardsRecord.fromPartial({})),\n            DelegatorStartingInfoRecord: getStructure(DelegatorStartingInfoRecord.fromPartial({})),\n            ValidatorSlashEventRecord: getStructure(ValidatorSlashEventRecord.fromPartial({})),\n        },\n        _Registry: registry,\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(JSON.stringify(subscription));\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(JSON.stringify(subscription));\n        }\n    },\n    getters: {\n        getParams: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Params[JSON.stringify(params)] ?? {};\n        },\n        getValidatorOutstandingRewards: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.ValidatorOutstandingRewards[JSON.stringify(params)] ?? {};\n        },\n        getValidatorCommission: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.ValidatorCommission[JSON.stringify(params)] ?? {};\n        },\n        getValidatorSlashes: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.ValidatorSlashes[JSON.stringify(params)] ?? {};\n        },\n        getDelegationRewards: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DelegationRewards[JSON.stringify(params)] ?? {};\n        },\n        getDelegationTotalRewards: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DelegationTotalRewards[JSON.stringify(params)] ?? {};\n        },\n        getDelegatorValidators: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DelegatorValidators[JSON.stringify(params)] ?? {};\n        },\n        getDelegatorWithdrawAddress: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DelegatorWithdrawAddress[JSON.stringify(params)] ?? {};\n        },\n        getCommunityPool: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.CommunityPool[JSON.stringify(params)] ?? {};\n        },\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        },\n        getRegistry: (state) => {\n            return state._Registry;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('Vuex module: cosmos.distribution.v1beta1 initialized!');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach(async (subscription) => {\n                try {\n                    const sub = JSON.parse(subscription);\n                    await dispatch(sub.action, sub.payload);\n                }\n                catch (e) {\n                    throw new SpVuexError('Subscriptions: ' + e.message);\n                }\n            });\n        },\n        async QueryParams({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryParams()).data;\n                commit('QUERY', { query: 'Params', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryParams', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getParams']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryValidatorOutstandingRewards({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryValidatorOutstandingRewards(key.validator_address)).data;\n                commit('QUERY', { query: 'ValidatorOutstandingRewards', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValidatorOutstandingRewards', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValidatorOutstandingRewards']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryValidatorOutstandingRewards', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryValidatorCommission({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryValidatorCommission(key.validator_address)).data;\n                commit('QUERY', { query: 'ValidatorCommission', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValidatorCommission', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValidatorCommission']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryValidatorCommission', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryValidatorSlashes({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryValidatorSlashes(key.validator_address, query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryValidatorSlashes(key.validator_address, { ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'ValidatorSlashes', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValidatorSlashes', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValidatorSlashes']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryValidatorSlashes', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDelegationRewards({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDelegationRewards(key.delegator_address, key.validator_address)).data;\n                commit('QUERY', { query: 'DelegationRewards', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegationRewards', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegationRewards']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDelegationRewards', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDelegationTotalRewards({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDelegationTotalRewards(key.delegator_address)).data;\n                commit('QUERY', { query: 'DelegationTotalRewards', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegationTotalRewards', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegationTotalRewards']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDelegationTotalRewards', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDelegatorValidators({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDelegatorValidators(key.delegator_address)).data;\n                commit('QUERY', { query: 'DelegatorValidators', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegatorValidators', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegatorValidators']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDelegatorValidators', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDelegatorWithdrawAddress({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDelegatorWithdrawAddress(key.delegator_address)).data;\n                commit('QUERY', { query: 'DelegatorWithdrawAddress', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegatorWithdrawAddress', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegatorWithdrawAddress']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDelegatorWithdrawAddress', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryCommunityPool({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryCommunityPool()).data;\n                commit('QUERY', { query: 'CommunityPool', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryCommunityPool', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getCommunityPool']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryCommunityPool', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async sendMsgWithdrawValidatorCommission({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgWithdrawValidatorCommission(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgWithdrawValidatorCommission:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgWithdrawValidatorCommission:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgSetWithdrawAddress({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgSetWithdrawAddress(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgSetWithdrawAddress:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSetWithdrawAddress:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgWithdrawDelegatorReward({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgWithdrawDelegatorReward(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgWithdrawDelegatorReward:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgWithdrawDelegatorReward:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgFundCommunityPool({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgFundCommunityPool(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgFundCommunityPool:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgFundCommunityPool:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async MsgWithdrawValidatorCommission({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgWithdrawValidatorCommission(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgWithdrawValidatorCommission:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgWithdrawValidatorCommission:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgSetWithdrawAddress({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgSetWithdrawAddress(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgSetWithdrawAddress:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSetWithdrawAddress:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgWithdrawDelegatorReward({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgWithdrawDelegatorReward(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgWithdrawDelegatorReward:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgWithdrawDelegatorReward:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgFundCommunityPool({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgFundCommunityPool(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgFundCommunityPool:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgFundCommunityPool:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n    }\n};\n"]},"metadata":{},"sourceType":"module"}