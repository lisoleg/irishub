{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/* eslint-disable */\nimport { Timestamp } from \"../../google/protobuf/timestamp\";\nimport * as Long from \"long\";\nimport { util, configure, Writer, Reader } from \"protobufjs/minimal\";\nimport { Proof } from \"../../tendermint/crypto/proof\";\nimport { Consensus } from \"../../tendermint/version/types\";\nimport { ValidatorSet } from \"../../tendermint/types/validator\";\nexport const protobufPackage = \"tendermint.types\";\n/** BlockIdFlag indicates which BlcokID the signature is for */\n\nexport var BlockIDFlag;\n\n(function (BlockIDFlag) {\n  BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_UNKNOWN\"] = 0] = \"BLOCK_ID_FLAG_UNKNOWN\";\n  BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_ABSENT\"] = 1] = \"BLOCK_ID_FLAG_ABSENT\";\n  BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_COMMIT\"] = 2] = \"BLOCK_ID_FLAG_COMMIT\";\n  BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_NIL\"] = 3] = \"BLOCK_ID_FLAG_NIL\";\n  BlockIDFlag[BlockIDFlag[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(BlockIDFlag || (BlockIDFlag = {}));\n\nexport function blockIDFlagFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"BLOCK_ID_FLAG_UNKNOWN\":\n      return BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN;\n\n    case 1:\n    case \"BLOCK_ID_FLAG_ABSENT\":\n      return BlockIDFlag.BLOCK_ID_FLAG_ABSENT;\n\n    case 2:\n    case \"BLOCK_ID_FLAG_COMMIT\":\n      return BlockIDFlag.BLOCK_ID_FLAG_COMMIT;\n\n    case 3:\n    case \"BLOCK_ID_FLAG_NIL\":\n      return BlockIDFlag.BLOCK_ID_FLAG_NIL;\n\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return BlockIDFlag.UNRECOGNIZED;\n  }\n}\nexport function blockIDFlagToJSON(object) {\n  switch (object) {\n    case BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN:\n      return \"BLOCK_ID_FLAG_UNKNOWN\";\n\n    case BlockIDFlag.BLOCK_ID_FLAG_ABSENT:\n      return \"BLOCK_ID_FLAG_ABSENT\";\n\n    case BlockIDFlag.BLOCK_ID_FLAG_COMMIT:\n      return \"BLOCK_ID_FLAG_COMMIT\";\n\n    case BlockIDFlag.BLOCK_ID_FLAG_NIL:\n      return \"BLOCK_ID_FLAG_NIL\";\n\n    default:\n      return \"UNKNOWN\";\n  }\n}\n/** SignedMsgType is a type of signed message in the consensus. */\n\nexport var SignedMsgType;\n\n(function (SignedMsgType) {\n  SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_UNKNOWN\"] = 0] = \"SIGNED_MSG_TYPE_UNKNOWN\";\n  /** SIGNED_MSG_TYPE_PREVOTE - Votes */\n\n  SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PREVOTE\"] = 1] = \"SIGNED_MSG_TYPE_PREVOTE\";\n  SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PRECOMMIT\"] = 2] = \"SIGNED_MSG_TYPE_PRECOMMIT\";\n  /** SIGNED_MSG_TYPE_PROPOSAL - Proposals */\n\n  SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PROPOSAL\"] = 32] = \"SIGNED_MSG_TYPE_PROPOSAL\";\n  SignedMsgType[SignedMsgType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SignedMsgType || (SignedMsgType = {}));\n\nexport function signedMsgTypeFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"SIGNED_MSG_TYPE_UNKNOWN\":\n      return SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN;\n\n    case 1:\n    case \"SIGNED_MSG_TYPE_PREVOTE\":\n      return SignedMsgType.SIGNED_MSG_TYPE_PREVOTE;\n\n    case 2:\n    case \"SIGNED_MSG_TYPE_PRECOMMIT\":\n      return SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT;\n\n    case 32:\n    case \"SIGNED_MSG_TYPE_PROPOSAL\":\n      return SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL;\n\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return SignedMsgType.UNRECOGNIZED;\n  }\n}\nexport function signedMsgTypeToJSON(object) {\n  switch (object) {\n    case SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN:\n      return \"SIGNED_MSG_TYPE_UNKNOWN\";\n\n    case SignedMsgType.SIGNED_MSG_TYPE_PREVOTE:\n      return \"SIGNED_MSG_TYPE_PREVOTE\";\n\n    case SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT:\n      return \"SIGNED_MSG_TYPE_PRECOMMIT\";\n\n    case SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL:\n      return \"SIGNED_MSG_TYPE_PROPOSAL\";\n\n    default:\n      return \"UNKNOWN\";\n  }\n}\nconst basePartSetHeader = {\n  total: 0\n};\nexport const PartSetHeader = {\n  encode(message, writer = Writer.create()) {\n    if (message.total !== 0) {\n      writer.uint32(8).uint32(message.total);\n    }\n\n    if (message.hash.length !== 0) {\n      writer.uint32(18).bytes(message.hash);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...basePartSetHeader\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.total = reader.uint32();\n          break;\n\n        case 2:\n          message.hash = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...basePartSetHeader\n    };\n\n    if (object.total !== undefined && object.total !== null) {\n      message.total = Number(object.total);\n    } else {\n      message.total = 0;\n    }\n\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = bytesFromBase64(object.hash);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.total !== undefined && (obj.total = message.total);\n    message.hash !== undefined && (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...basePartSetHeader\n    };\n\n    if (object.total !== undefined && object.total !== null) {\n      message.total = object.total;\n    } else {\n      message.total = 0;\n    }\n\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = object.hash;\n    } else {\n      message.hash = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst basePart = {\n  index: 0\n};\nexport const Part = {\n  encode(message, writer = Writer.create()) {\n    if (message.index !== 0) {\n      writer.uint32(8).uint32(message.index);\n    }\n\n    if (message.bytes.length !== 0) {\n      writer.uint32(18).bytes(message.bytes);\n    }\n\n    if (message.proof !== undefined) {\n      Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...basePart\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.index = reader.uint32();\n          break;\n\n        case 2:\n          message.bytes = reader.bytes();\n          break;\n\n        case 3:\n          message.proof = Proof.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...basePart\n    };\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = Number(object.index);\n    } else {\n      message.index = 0;\n    }\n\n    if (object.bytes !== undefined && object.bytes !== null) {\n      message.bytes = bytesFromBase64(object.bytes);\n    }\n\n    if (object.proof !== undefined && object.proof !== null) {\n      message.proof = Proof.fromJSON(object.proof);\n    } else {\n      message.proof = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.index !== undefined && (obj.index = message.index);\n    message.bytes !== undefined && (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n    message.proof !== undefined && (obj.proof = message.proof ? Proof.toJSON(message.proof) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...basePart\n    };\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = object.index;\n    } else {\n      message.index = 0;\n    }\n\n    if (object.bytes !== undefined && object.bytes !== null) {\n      message.bytes = object.bytes;\n    } else {\n      message.bytes = new Uint8Array();\n    }\n\n    if (object.proof !== undefined && object.proof !== null) {\n      message.proof = Proof.fromPartial(object.proof);\n    } else {\n      message.proof = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseBlockID = {};\nexport const BlockID = {\n  encode(message, writer = Writer.create()) {\n    if (message.hash.length !== 0) {\n      writer.uint32(10).bytes(message.hash);\n    }\n\n    if (message.partSetHeader !== undefined) {\n      PartSetHeader.encode(message.partSetHeader, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseBlockID\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.hash = reader.bytes();\n          break;\n\n        case 2:\n          message.partSetHeader = PartSetHeader.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseBlockID\n    };\n\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = bytesFromBase64(object.hash);\n    }\n\n    if (object.partSetHeader !== undefined && object.partSetHeader !== null) {\n      message.partSetHeader = PartSetHeader.fromJSON(object.partSetHeader);\n    } else {\n      message.partSetHeader = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.hash !== undefined && (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n    message.partSetHeader !== undefined && (obj.partSetHeader = message.partSetHeader ? PartSetHeader.toJSON(message.partSetHeader) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseBlockID\n    };\n\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = object.hash;\n    } else {\n      message.hash = new Uint8Array();\n    }\n\n    if (object.partSetHeader !== undefined && object.partSetHeader !== null) {\n      message.partSetHeader = PartSetHeader.fromPartial(object.partSetHeader);\n    } else {\n      message.partSetHeader = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseHeader = {\n  chainId: \"\",\n  height: 0\n};\nexport const Header = {\n  encode(message, writer = Writer.create()) {\n    if (message.version !== undefined) {\n      Consensus.encode(message.version, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.chainId !== \"\") {\n      writer.uint32(18).string(message.chainId);\n    }\n\n    if (message.height !== 0) {\n      writer.uint32(24).int64(message.height);\n    }\n\n    if (message.time !== undefined) {\n      Timestamp.encode(toTimestamp(message.time), writer.uint32(34).fork()).ldelim();\n    }\n\n    if (message.lastBlockId !== undefined) {\n      BlockID.encode(message.lastBlockId, writer.uint32(42).fork()).ldelim();\n    }\n\n    if (message.lastCommitHash.length !== 0) {\n      writer.uint32(50).bytes(message.lastCommitHash);\n    }\n\n    if (message.dataHash.length !== 0) {\n      writer.uint32(58).bytes(message.dataHash);\n    }\n\n    if (message.validatorsHash.length !== 0) {\n      writer.uint32(66).bytes(message.validatorsHash);\n    }\n\n    if (message.nextValidatorsHash.length !== 0) {\n      writer.uint32(74).bytes(message.nextValidatorsHash);\n    }\n\n    if (message.consensusHash.length !== 0) {\n      writer.uint32(82).bytes(message.consensusHash);\n    }\n\n    if (message.appHash.length !== 0) {\n      writer.uint32(90).bytes(message.appHash);\n    }\n\n    if (message.lastResultsHash.length !== 0) {\n      writer.uint32(98).bytes(message.lastResultsHash);\n    }\n\n    if (message.evidenceHash.length !== 0) {\n      writer.uint32(106).bytes(message.evidenceHash);\n    }\n\n    if (message.proposerAddress.length !== 0) {\n      writer.uint32(114).bytes(message.proposerAddress);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseHeader\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.version = Consensus.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.chainId = reader.string();\n          break;\n\n        case 3:\n          message.height = longToNumber(reader.int64());\n          break;\n\n        case 4:\n          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          break;\n\n        case 5:\n          message.lastBlockId = BlockID.decode(reader, reader.uint32());\n          break;\n\n        case 6:\n          message.lastCommitHash = reader.bytes();\n          break;\n\n        case 7:\n          message.dataHash = reader.bytes();\n          break;\n\n        case 8:\n          message.validatorsHash = reader.bytes();\n          break;\n\n        case 9:\n          message.nextValidatorsHash = reader.bytes();\n          break;\n\n        case 10:\n          message.consensusHash = reader.bytes();\n          break;\n\n        case 11:\n          message.appHash = reader.bytes();\n          break;\n\n        case 12:\n          message.lastResultsHash = reader.bytes();\n          break;\n\n        case 13:\n          message.evidenceHash = reader.bytes();\n          break;\n\n        case 14:\n          message.proposerAddress = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseHeader\n    };\n\n    if (object.version !== undefined && object.version !== null) {\n      message.version = Consensus.fromJSON(object.version);\n    } else {\n      message.version = undefined;\n    }\n\n    if (object.chainId !== undefined && object.chainId !== null) {\n      message.chainId = String(object.chainId);\n    } else {\n      message.chainId = \"\";\n    }\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = Number(object.height);\n    } else {\n      message.height = 0;\n    }\n\n    if (object.time !== undefined && object.time !== null) {\n      message.time = fromJsonTimestamp(object.time);\n    } else {\n      message.time = undefined;\n    }\n\n    if (object.lastBlockId !== undefined && object.lastBlockId !== null) {\n      message.lastBlockId = BlockID.fromJSON(object.lastBlockId);\n    } else {\n      message.lastBlockId = undefined;\n    }\n\n    if (object.lastCommitHash !== undefined && object.lastCommitHash !== null) {\n      message.lastCommitHash = bytesFromBase64(object.lastCommitHash);\n    }\n\n    if (object.dataHash !== undefined && object.dataHash !== null) {\n      message.dataHash = bytesFromBase64(object.dataHash);\n    }\n\n    if (object.validatorsHash !== undefined && object.validatorsHash !== null) {\n      message.validatorsHash = bytesFromBase64(object.validatorsHash);\n    }\n\n    if (object.nextValidatorsHash !== undefined && object.nextValidatorsHash !== null) {\n      message.nextValidatorsHash = bytesFromBase64(object.nextValidatorsHash);\n    }\n\n    if (object.consensusHash !== undefined && object.consensusHash !== null) {\n      message.consensusHash = bytesFromBase64(object.consensusHash);\n    }\n\n    if (object.appHash !== undefined && object.appHash !== null) {\n      message.appHash = bytesFromBase64(object.appHash);\n    }\n\n    if (object.lastResultsHash !== undefined && object.lastResultsHash !== null) {\n      message.lastResultsHash = bytesFromBase64(object.lastResultsHash);\n    }\n\n    if (object.evidenceHash !== undefined && object.evidenceHash !== null) {\n      message.evidenceHash = bytesFromBase64(object.evidenceHash);\n    }\n\n    if (object.proposerAddress !== undefined && object.proposerAddress !== null) {\n      message.proposerAddress = bytesFromBase64(object.proposerAddress);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.version !== undefined && (obj.version = message.version ? Consensus.toJSON(message.version) : undefined);\n    message.chainId !== undefined && (obj.chainId = message.chainId);\n    message.height !== undefined && (obj.height = message.height);\n    message.time !== undefined && (obj.time = message.time !== undefined ? message.time.toISOString() : null);\n    message.lastBlockId !== undefined && (obj.lastBlockId = message.lastBlockId ? BlockID.toJSON(message.lastBlockId) : undefined);\n    message.lastCommitHash !== undefined && (obj.lastCommitHash = base64FromBytes(message.lastCommitHash !== undefined ? message.lastCommitHash : new Uint8Array()));\n    message.dataHash !== undefined && (obj.dataHash = base64FromBytes(message.dataHash !== undefined ? message.dataHash : new Uint8Array()));\n    message.validatorsHash !== undefined && (obj.validatorsHash = base64FromBytes(message.validatorsHash !== undefined ? message.validatorsHash : new Uint8Array()));\n    message.nextValidatorsHash !== undefined && (obj.nextValidatorsHash = base64FromBytes(message.nextValidatorsHash !== undefined ? message.nextValidatorsHash : new Uint8Array()));\n    message.consensusHash !== undefined && (obj.consensusHash = base64FromBytes(message.consensusHash !== undefined ? message.consensusHash : new Uint8Array()));\n    message.appHash !== undefined && (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));\n    message.lastResultsHash !== undefined && (obj.lastResultsHash = base64FromBytes(message.lastResultsHash !== undefined ? message.lastResultsHash : new Uint8Array()));\n    message.evidenceHash !== undefined && (obj.evidenceHash = base64FromBytes(message.evidenceHash !== undefined ? message.evidenceHash : new Uint8Array()));\n    message.proposerAddress !== undefined && (obj.proposerAddress = base64FromBytes(message.proposerAddress !== undefined ? message.proposerAddress : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseHeader\n    };\n\n    if (object.version !== undefined && object.version !== null) {\n      message.version = Consensus.fromPartial(object.version);\n    } else {\n      message.version = undefined;\n    }\n\n    if (object.chainId !== undefined && object.chainId !== null) {\n      message.chainId = object.chainId;\n    } else {\n      message.chainId = \"\";\n    }\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = 0;\n    }\n\n    if (object.time !== undefined && object.time !== null) {\n      message.time = object.time;\n    } else {\n      message.time = undefined;\n    }\n\n    if (object.lastBlockId !== undefined && object.lastBlockId !== null) {\n      message.lastBlockId = BlockID.fromPartial(object.lastBlockId);\n    } else {\n      message.lastBlockId = undefined;\n    }\n\n    if (object.lastCommitHash !== undefined && object.lastCommitHash !== null) {\n      message.lastCommitHash = object.lastCommitHash;\n    } else {\n      message.lastCommitHash = new Uint8Array();\n    }\n\n    if (object.dataHash !== undefined && object.dataHash !== null) {\n      message.dataHash = object.dataHash;\n    } else {\n      message.dataHash = new Uint8Array();\n    }\n\n    if (object.validatorsHash !== undefined && object.validatorsHash !== null) {\n      message.validatorsHash = object.validatorsHash;\n    } else {\n      message.validatorsHash = new Uint8Array();\n    }\n\n    if (object.nextValidatorsHash !== undefined && object.nextValidatorsHash !== null) {\n      message.nextValidatorsHash = object.nextValidatorsHash;\n    } else {\n      message.nextValidatorsHash = new Uint8Array();\n    }\n\n    if (object.consensusHash !== undefined && object.consensusHash !== null) {\n      message.consensusHash = object.consensusHash;\n    } else {\n      message.consensusHash = new Uint8Array();\n    }\n\n    if (object.appHash !== undefined && object.appHash !== null) {\n      message.appHash = object.appHash;\n    } else {\n      message.appHash = new Uint8Array();\n    }\n\n    if (object.lastResultsHash !== undefined && object.lastResultsHash !== null) {\n      message.lastResultsHash = object.lastResultsHash;\n    } else {\n      message.lastResultsHash = new Uint8Array();\n    }\n\n    if (object.evidenceHash !== undefined && object.evidenceHash !== null) {\n      message.evidenceHash = object.evidenceHash;\n    } else {\n      message.evidenceHash = new Uint8Array();\n    }\n\n    if (object.proposerAddress !== undefined && object.proposerAddress !== null) {\n      message.proposerAddress = object.proposerAddress;\n    } else {\n      message.proposerAddress = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseData = {};\nexport const Data = {\n  encode(message, writer = Writer.create()) {\n    for (const v of message.txs) {\n      writer.uint32(10).bytes(v);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseData\n    };\n    message.txs = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.txs.push(reader.bytes());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseData\n    };\n    message.txs = [];\n\n    if (object.txs !== undefined && object.txs !== null) {\n      for (const e of object.txs) {\n        message.txs.push(bytesFromBase64(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.txs) {\n      obj.txs = message.txs.map(e => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n    } else {\n      obj.txs = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseData\n    };\n    message.txs = [];\n\n    if (object.txs !== undefined && object.txs !== null) {\n      for (const e of object.txs) {\n        message.txs.push(e);\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseVote = {\n  type: 0,\n  height: 0,\n  round: 0,\n  validatorIndex: 0\n};\nexport const Vote = {\n  encode(message, writer = Writer.create()) {\n    if (message.type !== 0) {\n      writer.uint32(8).int32(message.type);\n    }\n\n    if (message.height !== 0) {\n      writer.uint32(16).int64(message.height);\n    }\n\n    if (message.round !== 0) {\n      writer.uint32(24).int32(message.round);\n    }\n\n    if (message.blockId !== undefined) {\n      BlockID.encode(message.blockId, writer.uint32(34).fork()).ldelim();\n    }\n\n    if (message.timestamp !== undefined) {\n      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(42).fork()).ldelim();\n    }\n\n    if (message.validatorAddress.length !== 0) {\n      writer.uint32(50).bytes(message.validatorAddress);\n    }\n\n    if (message.validatorIndex !== 0) {\n      writer.uint32(56).int32(message.validatorIndex);\n    }\n\n    if (message.signature.length !== 0) {\n      writer.uint32(66).bytes(message.signature);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseVote\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32();\n          break;\n\n        case 2:\n          message.height = longToNumber(reader.int64());\n          break;\n\n        case 3:\n          message.round = reader.int32();\n          break;\n\n        case 4:\n          message.blockId = BlockID.decode(reader, reader.uint32());\n          break;\n\n        case 5:\n          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          break;\n\n        case 6:\n          message.validatorAddress = reader.bytes();\n          break;\n\n        case 7:\n          message.validatorIndex = reader.int32();\n          break;\n\n        case 8:\n          message.signature = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseVote\n    };\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = signedMsgTypeFromJSON(object.type);\n    } else {\n      message.type = 0;\n    }\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = Number(object.height);\n    } else {\n      message.height = 0;\n    }\n\n    if (object.round !== undefined && object.round !== null) {\n      message.round = Number(object.round);\n    } else {\n      message.round = 0;\n    }\n\n    if (object.blockId !== undefined && object.blockId !== null) {\n      message.blockId = BlockID.fromJSON(object.blockId);\n    } else {\n      message.blockId = undefined;\n    }\n\n    if (object.timestamp !== undefined && object.timestamp !== null) {\n      message.timestamp = fromJsonTimestamp(object.timestamp);\n    } else {\n      message.timestamp = undefined;\n    }\n\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = bytesFromBase64(object.validatorAddress);\n    }\n\n    if (object.validatorIndex !== undefined && object.validatorIndex !== null) {\n      message.validatorIndex = Number(object.validatorIndex);\n    } else {\n      message.validatorIndex = 0;\n    }\n\n    if (object.signature !== undefined && object.signature !== null) {\n      message.signature = bytesFromBase64(object.signature);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.type !== undefined && (obj.type = signedMsgTypeToJSON(message.type));\n    message.height !== undefined && (obj.height = message.height);\n    message.round !== undefined && (obj.round = message.round);\n    message.blockId !== undefined && (obj.blockId = message.blockId ? BlockID.toJSON(message.blockId) : undefined);\n    message.timestamp !== undefined && (obj.timestamp = message.timestamp !== undefined ? message.timestamp.toISOString() : null);\n    message.validatorAddress !== undefined && (obj.validatorAddress = base64FromBytes(message.validatorAddress !== undefined ? message.validatorAddress : new Uint8Array()));\n    message.validatorIndex !== undefined && (obj.validatorIndex = message.validatorIndex);\n    message.signature !== undefined && (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseVote\n    };\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = object.type;\n    } else {\n      message.type = 0;\n    }\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = 0;\n    }\n\n    if (object.round !== undefined && object.round !== null) {\n      message.round = object.round;\n    } else {\n      message.round = 0;\n    }\n\n    if (object.blockId !== undefined && object.blockId !== null) {\n      message.blockId = BlockID.fromPartial(object.blockId);\n    } else {\n      message.blockId = undefined;\n    }\n\n    if (object.timestamp !== undefined && object.timestamp !== null) {\n      message.timestamp = object.timestamp;\n    } else {\n      message.timestamp = undefined;\n    }\n\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = object.validatorAddress;\n    } else {\n      message.validatorAddress = new Uint8Array();\n    }\n\n    if (object.validatorIndex !== undefined && object.validatorIndex !== null) {\n      message.validatorIndex = object.validatorIndex;\n    } else {\n      message.validatorIndex = 0;\n    }\n\n    if (object.signature !== undefined && object.signature !== null) {\n      message.signature = object.signature;\n    } else {\n      message.signature = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseCommit = {\n  height: 0,\n  round: 0\n};\nexport const Commit = {\n  encode(message, writer = Writer.create()) {\n    if (message.height !== 0) {\n      writer.uint32(8).int64(message.height);\n    }\n\n    if (message.round !== 0) {\n      writer.uint32(16).int32(message.round);\n    }\n\n    if (message.blockId !== undefined) {\n      BlockID.encode(message.blockId, writer.uint32(26).fork()).ldelim();\n    }\n\n    for (const v of message.signatures) {\n      CommitSig.encode(v, writer.uint32(34).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseCommit\n    };\n    message.signatures = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.height = longToNumber(reader.int64());\n          break;\n\n        case 2:\n          message.round = reader.int32();\n          break;\n\n        case 3:\n          message.blockId = BlockID.decode(reader, reader.uint32());\n          break;\n\n        case 4:\n          message.signatures.push(CommitSig.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseCommit\n    };\n    message.signatures = [];\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = Number(object.height);\n    } else {\n      message.height = 0;\n    }\n\n    if (object.round !== undefined && object.round !== null) {\n      message.round = Number(object.round);\n    } else {\n      message.round = 0;\n    }\n\n    if (object.blockId !== undefined && object.blockId !== null) {\n      message.blockId = BlockID.fromJSON(object.blockId);\n    } else {\n      message.blockId = undefined;\n    }\n\n    if (object.signatures !== undefined && object.signatures !== null) {\n      for (const e of object.signatures) {\n        message.signatures.push(CommitSig.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.height !== undefined && (obj.height = message.height);\n    message.round !== undefined && (obj.round = message.round);\n    message.blockId !== undefined && (obj.blockId = message.blockId ? BlockID.toJSON(message.blockId) : undefined);\n\n    if (message.signatures) {\n      obj.signatures = message.signatures.map(e => e ? CommitSig.toJSON(e) : undefined);\n    } else {\n      obj.signatures = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseCommit\n    };\n    message.signatures = [];\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = 0;\n    }\n\n    if (object.round !== undefined && object.round !== null) {\n      message.round = object.round;\n    } else {\n      message.round = 0;\n    }\n\n    if (object.blockId !== undefined && object.blockId !== null) {\n      message.blockId = BlockID.fromPartial(object.blockId);\n    } else {\n      message.blockId = undefined;\n    }\n\n    if (object.signatures !== undefined && object.signatures !== null) {\n      for (const e of object.signatures) {\n        message.signatures.push(CommitSig.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseCommitSig = {\n  blockIdFlag: 0\n};\nexport const CommitSig = {\n  encode(message, writer = Writer.create()) {\n    if (message.blockIdFlag !== 0) {\n      writer.uint32(8).int32(message.blockIdFlag);\n    }\n\n    if (message.validatorAddress.length !== 0) {\n      writer.uint32(18).bytes(message.validatorAddress);\n    }\n\n    if (message.timestamp !== undefined) {\n      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).ldelim();\n    }\n\n    if (message.signature.length !== 0) {\n      writer.uint32(34).bytes(message.signature);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseCommitSig\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.blockIdFlag = reader.int32();\n          break;\n\n        case 2:\n          message.validatorAddress = reader.bytes();\n          break;\n\n        case 3:\n          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          break;\n\n        case 4:\n          message.signature = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseCommitSig\n    };\n\n    if (object.blockIdFlag !== undefined && object.blockIdFlag !== null) {\n      message.blockIdFlag = blockIDFlagFromJSON(object.blockIdFlag);\n    } else {\n      message.blockIdFlag = 0;\n    }\n\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = bytesFromBase64(object.validatorAddress);\n    }\n\n    if (object.timestamp !== undefined && object.timestamp !== null) {\n      message.timestamp = fromJsonTimestamp(object.timestamp);\n    } else {\n      message.timestamp = undefined;\n    }\n\n    if (object.signature !== undefined && object.signature !== null) {\n      message.signature = bytesFromBase64(object.signature);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.blockIdFlag !== undefined && (obj.blockIdFlag = blockIDFlagToJSON(message.blockIdFlag));\n    message.validatorAddress !== undefined && (obj.validatorAddress = base64FromBytes(message.validatorAddress !== undefined ? message.validatorAddress : new Uint8Array()));\n    message.timestamp !== undefined && (obj.timestamp = message.timestamp !== undefined ? message.timestamp.toISOString() : null);\n    message.signature !== undefined && (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseCommitSig\n    };\n\n    if (object.blockIdFlag !== undefined && object.blockIdFlag !== null) {\n      message.blockIdFlag = object.blockIdFlag;\n    } else {\n      message.blockIdFlag = 0;\n    }\n\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = object.validatorAddress;\n    } else {\n      message.validatorAddress = new Uint8Array();\n    }\n\n    if (object.timestamp !== undefined && object.timestamp !== null) {\n      message.timestamp = object.timestamp;\n    } else {\n      message.timestamp = undefined;\n    }\n\n    if (object.signature !== undefined && object.signature !== null) {\n      message.signature = object.signature;\n    } else {\n      message.signature = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseProposal = {\n  type: 0,\n  height: 0,\n  round: 0,\n  polRound: 0\n};\nexport const Proposal = {\n  encode(message, writer = Writer.create()) {\n    if (message.type !== 0) {\n      writer.uint32(8).int32(message.type);\n    }\n\n    if (message.height !== 0) {\n      writer.uint32(16).int64(message.height);\n    }\n\n    if (message.round !== 0) {\n      writer.uint32(24).int32(message.round);\n    }\n\n    if (message.polRound !== 0) {\n      writer.uint32(32).int32(message.polRound);\n    }\n\n    if (message.blockId !== undefined) {\n      BlockID.encode(message.blockId, writer.uint32(42).fork()).ldelim();\n    }\n\n    if (message.timestamp !== undefined) {\n      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(50).fork()).ldelim();\n    }\n\n    if (message.signature.length !== 0) {\n      writer.uint32(58).bytes(message.signature);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseProposal\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32();\n          break;\n\n        case 2:\n          message.height = longToNumber(reader.int64());\n          break;\n\n        case 3:\n          message.round = reader.int32();\n          break;\n\n        case 4:\n          message.polRound = reader.int32();\n          break;\n\n        case 5:\n          message.blockId = BlockID.decode(reader, reader.uint32());\n          break;\n\n        case 6:\n          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          break;\n\n        case 7:\n          message.signature = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseProposal\n    };\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = signedMsgTypeFromJSON(object.type);\n    } else {\n      message.type = 0;\n    }\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = Number(object.height);\n    } else {\n      message.height = 0;\n    }\n\n    if (object.round !== undefined && object.round !== null) {\n      message.round = Number(object.round);\n    } else {\n      message.round = 0;\n    }\n\n    if (object.polRound !== undefined && object.polRound !== null) {\n      message.polRound = Number(object.polRound);\n    } else {\n      message.polRound = 0;\n    }\n\n    if (object.blockId !== undefined && object.blockId !== null) {\n      message.blockId = BlockID.fromJSON(object.blockId);\n    } else {\n      message.blockId = undefined;\n    }\n\n    if (object.timestamp !== undefined && object.timestamp !== null) {\n      message.timestamp = fromJsonTimestamp(object.timestamp);\n    } else {\n      message.timestamp = undefined;\n    }\n\n    if (object.signature !== undefined && object.signature !== null) {\n      message.signature = bytesFromBase64(object.signature);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.type !== undefined && (obj.type = signedMsgTypeToJSON(message.type));\n    message.height !== undefined && (obj.height = message.height);\n    message.round !== undefined && (obj.round = message.round);\n    message.polRound !== undefined && (obj.polRound = message.polRound);\n    message.blockId !== undefined && (obj.blockId = message.blockId ? BlockID.toJSON(message.blockId) : undefined);\n    message.timestamp !== undefined && (obj.timestamp = message.timestamp !== undefined ? message.timestamp.toISOString() : null);\n    message.signature !== undefined && (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseProposal\n    };\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = object.type;\n    } else {\n      message.type = 0;\n    }\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = 0;\n    }\n\n    if (object.round !== undefined && object.round !== null) {\n      message.round = object.round;\n    } else {\n      message.round = 0;\n    }\n\n    if (object.polRound !== undefined && object.polRound !== null) {\n      message.polRound = object.polRound;\n    } else {\n      message.polRound = 0;\n    }\n\n    if (object.blockId !== undefined && object.blockId !== null) {\n      message.blockId = BlockID.fromPartial(object.blockId);\n    } else {\n      message.blockId = undefined;\n    }\n\n    if (object.timestamp !== undefined && object.timestamp !== null) {\n      message.timestamp = object.timestamp;\n    } else {\n      message.timestamp = undefined;\n    }\n\n    if (object.signature !== undefined && object.signature !== null) {\n      message.signature = object.signature;\n    } else {\n      message.signature = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseSignedHeader = {};\nexport const SignedHeader = {\n  encode(message, writer = Writer.create()) {\n    if (message.header !== undefined) {\n      Header.encode(message.header, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.commit !== undefined) {\n      Commit.encode(message.commit, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseSignedHeader\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.header = Header.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.commit = Commit.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseSignedHeader\n    };\n\n    if (object.header !== undefined && object.header !== null) {\n      message.header = Header.fromJSON(object.header);\n    } else {\n      message.header = undefined;\n    }\n\n    if (object.commit !== undefined && object.commit !== null) {\n      message.commit = Commit.fromJSON(object.commit);\n    } else {\n      message.commit = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.header !== undefined && (obj.header = message.header ? Header.toJSON(message.header) : undefined);\n    message.commit !== undefined && (obj.commit = message.commit ? Commit.toJSON(message.commit) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseSignedHeader\n    };\n\n    if (object.header !== undefined && object.header !== null) {\n      message.header = Header.fromPartial(object.header);\n    } else {\n      message.header = undefined;\n    }\n\n    if (object.commit !== undefined && object.commit !== null) {\n      message.commit = Commit.fromPartial(object.commit);\n    } else {\n      message.commit = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseLightBlock = {};\nexport const LightBlock = {\n  encode(message, writer = Writer.create()) {\n    if (message.signedHeader !== undefined) {\n      SignedHeader.encode(message.signedHeader, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.validatorSet !== undefined) {\n      ValidatorSet.encode(message.validatorSet, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseLightBlock\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.signedHeader = SignedHeader.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.validatorSet = ValidatorSet.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseLightBlock\n    };\n\n    if (object.signedHeader !== undefined && object.signedHeader !== null) {\n      message.signedHeader = SignedHeader.fromJSON(object.signedHeader);\n    } else {\n      message.signedHeader = undefined;\n    }\n\n    if (object.validatorSet !== undefined && object.validatorSet !== null) {\n      message.validatorSet = ValidatorSet.fromJSON(object.validatorSet);\n    } else {\n      message.validatorSet = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.signedHeader !== undefined && (obj.signedHeader = message.signedHeader ? SignedHeader.toJSON(message.signedHeader) : undefined);\n    message.validatorSet !== undefined && (obj.validatorSet = message.validatorSet ? ValidatorSet.toJSON(message.validatorSet) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseLightBlock\n    };\n\n    if (object.signedHeader !== undefined && object.signedHeader !== null) {\n      message.signedHeader = SignedHeader.fromPartial(object.signedHeader);\n    } else {\n      message.signedHeader = undefined;\n    }\n\n    if (object.validatorSet !== undefined && object.validatorSet !== null) {\n      message.validatorSet = ValidatorSet.fromPartial(object.validatorSet);\n    } else {\n      message.validatorSet = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseBlockMeta = {\n  blockSize: 0,\n  numTxs: 0\n};\nexport const BlockMeta = {\n  encode(message, writer = Writer.create()) {\n    if (message.blockId !== undefined) {\n      BlockID.encode(message.blockId, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.blockSize !== 0) {\n      writer.uint32(16).int64(message.blockSize);\n    }\n\n    if (message.header !== undefined) {\n      Header.encode(message.header, writer.uint32(26).fork()).ldelim();\n    }\n\n    if (message.numTxs !== 0) {\n      writer.uint32(32).int64(message.numTxs);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseBlockMeta\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.blockId = BlockID.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.blockSize = longToNumber(reader.int64());\n          break;\n\n        case 3:\n          message.header = Header.decode(reader, reader.uint32());\n          break;\n\n        case 4:\n          message.numTxs = longToNumber(reader.int64());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseBlockMeta\n    };\n\n    if (object.blockId !== undefined && object.blockId !== null) {\n      message.blockId = BlockID.fromJSON(object.blockId);\n    } else {\n      message.blockId = undefined;\n    }\n\n    if (object.blockSize !== undefined && object.blockSize !== null) {\n      message.blockSize = Number(object.blockSize);\n    } else {\n      message.blockSize = 0;\n    }\n\n    if (object.header !== undefined && object.header !== null) {\n      message.header = Header.fromJSON(object.header);\n    } else {\n      message.header = undefined;\n    }\n\n    if (object.numTxs !== undefined && object.numTxs !== null) {\n      message.numTxs = Number(object.numTxs);\n    } else {\n      message.numTxs = 0;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.blockId !== undefined && (obj.blockId = message.blockId ? BlockID.toJSON(message.blockId) : undefined);\n    message.blockSize !== undefined && (obj.blockSize = message.blockSize);\n    message.header !== undefined && (obj.header = message.header ? Header.toJSON(message.header) : undefined);\n    message.numTxs !== undefined && (obj.numTxs = message.numTxs);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseBlockMeta\n    };\n\n    if (object.blockId !== undefined && object.blockId !== null) {\n      message.blockId = BlockID.fromPartial(object.blockId);\n    } else {\n      message.blockId = undefined;\n    }\n\n    if (object.blockSize !== undefined && object.blockSize !== null) {\n      message.blockSize = object.blockSize;\n    } else {\n      message.blockSize = 0;\n    }\n\n    if (object.header !== undefined && object.header !== null) {\n      message.header = Header.fromPartial(object.header);\n    } else {\n      message.header = undefined;\n    }\n\n    if (object.numTxs !== undefined && object.numTxs !== null) {\n      message.numTxs = object.numTxs;\n    } else {\n      message.numTxs = 0;\n    }\n\n    return message;\n  }\n\n};\nconst baseTxProof = {};\nexport const TxProof = {\n  encode(message, writer = Writer.create()) {\n    if (message.rootHash.length !== 0) {\n      writer.uint32(10).bytes(message.rootHash);\n    }\n\n    if (message.data.length !== 0) {\n      writer.uint32(18).bytes(message.data);\n    }\n\n    if (message.proof !== undefined) {\n      Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseTxProof\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.rootHash = reader.bytes();\n          break;\n\n        case 2:\n          message.data = reader.bytes();\n          break;\n\n        case 3:\n          message.proof = Proof.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseTxProof\n    };\n\n    if (object.rootHash !== undefined && object.rootHash !== null) {\n      message.rootHash = bytesFromBase64(object.rootHash);\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n\n    if (object.proof !== undefined && object.proof !== null) {\n      message.proof = Proof.fromJSON(object.proof);\n    } else {\n      message.proof = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.rootHash !== undefined && (obj.rootHash = base64FromBytes(message.rootHash !== undefined ? message.rootHash : new Uint8Array()));\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    message.proof !== undefined && (obj.proof = message.proof ? Proof.toJSON(message.proof) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseTxProof\n    };\n\n    if (object.rootHash !== undefined && object.rootHash !== null) {\n      message.rootHash = object.rootHash;\n    } else {\n      message.rootHash = new Uint8Array();\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n\n    if (object.proof !== undefined && object.proof !== null) {\n      message.proof = Proof.fromPartial(object.proof);\n    } else {\n      message.proof = undefined;\n    }\n\n    return message;\n  }\n\n};\n\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\n\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n\n  return arr;\n}\n\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\n\nfunction base64FromBytes(arr) {\n  const bin = [];\n\n  for (let i = 0; i < arr.byteLength; ++i) {\n    bin.push(String.fromCharCode(arr[i]));\n  }\n\n  return btoa(bin.join(\"\"));\n}\n\nfunction toTimestamp(date) {\n  const seconds = date.getTime() / 1000;\n  const nanos = date.getTime() % 1000 * 1000000;\n  return {\n    seconds,\n    nanos\n  };\n}\n\nfunction fromTimestamp(t) {\n  let millis = t.seconds * 1000;\n  millis += t.nanos / 1000000;\n  return new Date(millis);\n}\n\nfunction fromJsonTimestamp(o) {\n  if (o instanceof Date) {\n    return o;\n  } else if (typeof o === \"string\") {\n    return new Date(o);\n  } else {\n    return fromTimestamp(Timestamp.fromJSON(o));\n  }\n}\n\nfunction longToNumber(long) {\n  if (long.gt(Number.MAX_SAFE_INTEGER)) {\n    throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n  }\n\n  return long.toNumber();\n}\n\nif (util.Long !== Long) {\n  util.Long = Long;\n  configure();\n}","map":{"version":3,"sources":["/home/lisoleg/cosmos/checkers/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.staking.v1beta1/module/types/tendermint/types/types.js"],"names":["Timestamp","Long","util","configure","Writer","Reader","Proof","Consensus","ValidatorSet","protobufPackage","BlockIDFlag","blockIDFlagFromJSON","object","BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL","UNRECOGNIZED","blockIDFlagToJSON","SignedMsgType","signedMsgTypeFromJSON","SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL","signedMsgTypeToJSON","basePartSetHeader","total","PartSetHeader","encode","message","writer","create","uint32","hash","length","bytes","decode","input","reader","Uint8Array","end","undefined","len","pos","tag","skipType","fromJSON","Number","bytesFromBase64","toJSON","obj","base64FromBytes","fromPartial","basePart","index","Part","proof","fork","ldelim","baseBlockID","BlockID","partSetHeader","baseHeader","chainId","height","Header","version","string","int64","time","toTimestamp","lastBlockId","lastCommitHash","dataHash","validatorsHash","nextValidatorsHash","consensusHash","appHash","lastResultsHash","evidenceHash","proposerAddress","longToNumber","fromTimestamp","String","fromJsonTimestamp","toISOString","baseData","Data","v","txs","push","e","map","baseVote","type","round","validatorIndex","Vote","int32","blockId","timestamp","validatorAddress","signature","baseCommit","Commit","signatures","CommitSig","baseCommitSig","blockIdFlag","baseProposal","polRound","Proposal","baseSignedHeader","SignedHeader","header","commit","baseLightBlock","LightBlock","signedHeader","validatorSet","baseBlockMeta","blockSize","numTxs","BlockMeta","baseTxProof","TxProof","rootHash","data","globalThis","self","window","global","atob","b64","Buffer","from","toString","bin","arr","i","charCodeAt","btoa","byteLength","fromCharCode","join","date","seconds","getTime","nanos","t","millis","Date","o","long","gt","MAX_SAFE_INTEGER","Error","toNumber"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { Timestamp } from \"../../google/protobuf/timestamp\";\nimport * as Long from \"long\";\nimport { util, configure, Writer, Reader } from \"protobufjs/minimal\";\nimport { Proof } from \"../../tendermint/crypto/proof\";\nimport { Consensus } from \"../../tendermint/version/types\";\nimport { ValidatorSet } from \"../../tendermint/types/validator\";\nexport const protobufPackage = \"tendermint.types\";\n/** BlockIdFlag indicates which BlcokID the signature is for */\nexport var BlockIDFlag;\n(function (BlockIDFlag) {\n    BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_UNKNOWN\"] = 0] = \"BLOCK_ID_FLAG_UNKNOWN\";\n    BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_ABSENT\"] = 1] = \"BLOCK_ID_FLAG_ABSENT\";\n    BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_COMMIT\"] = 2] = \"BLOCK_ID_FLAG_COMMIT\";\n    BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_NIL\"] = 3] = \"BLOCK_ID_FLAG_NIL\";\n    BlockIDFlag[BlockIDFlag[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(BlockIDFlag || (BlockIDFlag = {}));\nexport function blockIDFlagFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"BLOCK_ID_FLAG_UNKNOWN\":\n            return BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN;\n        case 1:\n        case \"BLOCK_ID_FLAG_ABSENT\":\n            return BlockIDFlag.BLOCK_ID_FLAG_ABSENT;\n        case 2:\n        case \"BLOCK_ID_FLAG_COMMIT\":\n            return BlockIDFlag.BLOCK_ID_FLAG_COMMIT;\n        case 3:\n        case \"BLOCK_ID_FLAG_NIL\":\n            return BlockIDFlag.BLOCK_ID_FLAG_NIL;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return BlockIDFlag.UNRECOGNIZED;\n    }\n}\nexport function blockIDFlagToJSON(object) {\n    switch (object) {\n        case BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN:\n            return \"BLOCK_ID_FLAG_UNKNOWN\";\n        case BlockIDFlag.BLOCK_ID_FLAG_ABSENT:\n            return \"BLOCK_ID_FLAG_ABSENT\";\n        case BlockIDFlag.BLOCK_ID_FLAG_COMMIT:\n            return \"BLOCK_ID_FLAG_COMMIT\";\n        case BlockIDFlag.BLOCK_ID_FLAG_NIL:\n            return \"BLOCK_ID_FLAG_NIL\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\n/** SignedMsgType is a type of signed message in the consensus. */\nexport var SignedMsgType;\n(function (SignedMsgType) {\n    SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_UNKNOWN\"] = 0] = \"SIGNED_MSG_TYPE_UNKNOWN\";\n    /** SIGNED_MSG_TYPE_PREVOTE - Votes */\n    SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PREVOTE\"] = 1] = \"SIGNED_MSG_TYPE_PREVOTE\";\n    SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PRECOMMIT\"] = 2] = \"SIGNED_MSG_TYPE_PRECOMMIT\";\n    /** SIGNED_MSG_TYPE_PROPOSAL - Proposals */\n    SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PROPOSAL\"] = 32] = \"SIGNED_MSG_TYPE_PROPOSAL\";\n    SignedMsgType[SignedMsgType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SignedMsgType || (SignedMsgType = {}));\nexport function signedMsgTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"SIGNED_MSG_TYPE_UNKNOWN\":\n            return SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN;\n        case 1:\n        case \"SIGNED_MSG_TYPE_PREVOTE\":\n            return SignedMsgType.SIGNED_MSG_TYPE_PREVOTE;\n        case 2:\n        case \"SIGNED_MSG_TYPE_PRECOMMIT\":\n            return SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT;\n        case 32:\n        case \"SIGNED_MSG_TYPE_PROPOSAL\":\n            return SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SignedMsgType.UNRECOGNIZED;\n    }\n}\nexport function signedMsgTypeToJSON(object) {\n    switch (object) {\n        case SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN:\n            return \"SIGNED_MSG_TYPE_UNKNOWN\";\n        case SignedMsgType.SIGNED_MSG_TYPE_PREVOTE:\n            return \"SIGNED_MSG_TYPE_PREVOTE\";\n        case SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT:\n            return \"SIGNED_MSG_TYPE_PRECOMMIT\";\n        case SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL:\n            return \"SIGNED_MSG_TYPE_PROPOSAL\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nconst basePartSetHeader = { total: 0 };\nexport const PartSetHeader = {\n    encode(message, writer = Writer.create()) {\n        if (message.total !== 0) {\n            writer.uint32(8).uint32(message.total);\n        }\n        if (message.hash.length !== 0) {\n            writer.uint32(18).bytes(message.hash);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...basePartSetHeader };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.total = reader.uint32();\n                    break;\n                case 2:\n                    message.hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...basePartSetHeader };\n        if (object.total !== undefined && object.total !== null) {\n            message.total = Number(object.total);\n        }\n        else {\n            message.total = 0;\n        }\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = bytesFromBase64(object.hash);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.total !== undefined && (obj.total = message.total);\n        message.hash !== undefined &&\n            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...basePartSetHeader };\n        if (object.total !== undefined && object.total !== null) {\n            message.total = object.total;\n        }\n        else {\n            message.total = 0;\n        }\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = object.hash;\n        }\n        else {\n            message.hash = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst basePart = { index: 0 };\nexport const Part = {\n    encode(message, writer = Writer.create()) {\n        if (message.index !== 0) {\n            writer.uint32(8).uint32(message.index);\n        }\n        if (message.bytes.length !== 0) {\n            writer.uint32(18).bytes(message.bytes);\n        }\n        if (message.proof !== undefined) {\n            Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...basePart };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.index = reader.uint32();\n                    break;\n                case 2:\n                    message.bytes = reader.bytes();\n                    break;\n                case 3:\n                    message.proof = Proof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...basePart };\n        if (object.index !== undefined && object.index !== null) {\n            message.index = Number(object.index);\n        }\n        else {\n            message.index = 0;\n        }\n        if (object.bytes !== undefined && object.bytes !== null) {\n            message.bytes = bytesFromBase64(object.bytes);\n        }\n        if (object.proof !== undefined && object.proof !== null) {\n            message.proof = Proof.fromJSON(object.proof);\n        }\n        else {\n            message.proof = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.index !== undefined && (obj.index = message.index);\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        message.proof !== undefined &&\n            (obj.proof = message.proof ? Proof.toJSON(message.proof) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...basePart };\n        if (object.index !== undefined && object.index !== null) {\n            message.index = object.index;\n        }\n        else {\n            message.index = 0;\n        }\n        if (object.bytes !== undefined && object.bytes !== null) {\n            message.bytes = object.bytes;\n        }\n        else {\n            message.bytes = new Uint8Array();\n        }\n        if (object.proof !== undefined && object.proof !== null) {\n            message.proof = Proof.fromPartial(object.proof);\n        }\n        else {\n            message.proof = undefined;\n        }\n        return message;\n    },\n};\nconst baseBlockID = {};\nexport const BlockID = {\n    encode(message, writer = Writer.create()) {\n        if (message.hash.length !== 0) {\n            writer.uint32(10).bytes(message.hash);\n        }\n        if (message.partSetHeader !== undefined) {\n            PartSetHeader.encode(message.partSetHeader, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseBlockID };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.bytes();\n                    break;\n                case 2:\n                    message.partSetHeader = PartSetHeader.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseBlockID };\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = bytesFromBase64(object.hash);\n        }\n        if (object.partSetHeader !== undefined && object.partSetHeader !== null) {\n            message.partSetHeader = PartSetHeader.fromJSON(object.partSetHeader);\n        }\n        else {\n            message.partSetHeader = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.hash !== undefined &&\n            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n        message.partSetHeader !== undefined &&\n            (obj.partSetHeader = message.partSetHeader\n                ? PartSetHeader.toJSON(message.partSetHeader)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseBlockID };\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = object.hash;\n        }\n        else {\n            message.hash = new Uint8Array();\n        }\n        if (object.partSetHeader !== undefined && object.partSetHeader !== null) {\n            message.partSetHeader = PartSetHeader.fromPartial(object.partSetHeader);\n        }\n        else {\n            message.partSetHeader = undefined;\n        }\n        return message;\n    },\n};\nconst baseHeader = { chainId: \"\", height: 0 };\nexport const Header = {\n    encode(message, writer = Writer.create()) {\n        if (message.version !== undefined) {\n            Consensus.encode(message.version, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.chainId !== \"\") {\n            writer.uint32(18).string(message.chainId);\n        }\n        if (message.height !== 0) {\n            writer.uint32(24).int64(message.height);\n        }\n        if (message.time !== undefined) {\n            Timestamp.encode(toTimestamp(message.time), writer.uint32(34).fork()).ldelim();\n        }\n        if (message.lastBlockId !== undefined) {\n            BlockID.encode(message.lastBlockId, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.lastCommitHash.length !== 0) {\n            writer.uint32(50).bytes(message.lastCommitHash);\n        }\n        if (message.dataHash.length !== 0) {\n            writer.uint32(58).bytes(message.dataHash);\n        }\n        if (message.validatorsHash.length !== 0) {\n            writer.uint32(66).bytes(message.validatorsHash);\n        }\n        if (message.nextValidatorsHash.length !== 0) {\n            writer.uint32(74).bytes(message.nextValidatorsHash);\n        }\n        if (message.consensusHash.length !== 0) {\n            writer.uint32(82).bytes(message.consensusHash);\n        }\n        if (message.appHash.length !== 0) {\n            writer.uint32(90).bytes(message.appHash);\n        }\n        if (message.lastResultsHash.length !== 0) {\n            writer.uint32(98).bytes(message.lastResultsHash);\n        }\n        if (message.evidenceHash.length !== 0) {\n            writer.uint32(106).bytes(message.evidenceHash);\n        }\n        if (message.proposerAddress.length !== 0) {\n            writer.uint32(114).bytes(message.proposerAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseHeader };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.version = Consensus.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.chainId = reader.string();\n                    break;\n                case 3:\n                    message.height = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.lastBlockId = BlockID.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.lastCommitHash = reader.bytes();\n                    break;\n                case 7:\n                    message.dataHash = reader.bytes();\n                    break;\n                case 8:\n                    message.validatorsHash = reader.bytes();\n                    break;\n                case 9:\n                    message.nextValidatorsHash = reader.bytes();\n                    break;\n                case 10:\n                    message.consensusHash = reader.bytes();\n                    break;\n                case 11:\n                    message.appHash = reader.bytes();\n                    break;\n                case 12:\n                    message.lastResultsHash = reader.bytes();\n                    break;\n                case 13:\n                    message.evidenceHash = reader.bytes();\n                    break;\n                case 14:\n                    message.proposerAddress = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseHeader };\n        if (object.version !== undefined && object.version !== null) {\n            message.version = Consensus.fromJSON(object.version);\n        }\n        else {\n            message.version = undefined;\n        }\n        if (object.chainId !== undefined && object.chainId !== null) {\n            message.chainId = String(object.chainId);\n        }\n        else {\n            message.chainId = \"\";\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = Number(object.height);\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.time !== undefined && object.time !== null) {\n            message.time = fromJsonTimestamp(object.time);\n        }\n        else {\n            message.time = undefined;\n        }\n        if (object.lastBlockId !== undefined && object.lastBlockId !== null) {\n            message.lastBlockId = BlockID.fromJSON(object.lastBlockId);\n        }\n        else {\n            message.lastBlockId = undefined;\n        }\n        if (object.lastCommitHash !== undefined && object.lastCommitHash !== null) {\n            message.lastCommitHash = bytesFromBase64(object.lastCommitHash);\n        }\n        if (object.dataHash !== undefined && object.dataHash !== null) {\n            message.dataHash = bytesFromBase64(object.dataHash);\n        }\n        if (object.validatorsHash !== undefined && object.validatorsHash !== null) {\n            message.validatorsHash = bytesFromBase64(object.validatorsHash);\n        }\n        if (object.nextValidatorsHash !== undefined &&\n            object.nextValidatorsHash !== null) {\n            message.nextValidatorsHash = bytesFromBase64(object.nextValidatorsHash);\n        }\n        if (object.consensusHash !== undefined && object.consensusHash !== null) {\n            message.consensusHash = bytesFromBase64(object.consensusHash);\n        }\n        if (object.appHash !== undefined && object.appHash !== null) {\n            message.appHash = bytesFromBase64(object.appHash);\n        }\n        if (object.lastResultsHash !== undefined &&\n            object.lastResultsHash !== null) {\n            message.lastResultsHash = bytesFromBase64(object.lastResultsHash);\n        }\n        if (object.evidenceHash !== undefined && object.evidenceHash !== null) {\n            message.evidenceHash = bytesFromBase64(object.evidenceHash);\n        }\n        if (object.proposerAddress !== undefined &&\n            object.proposerAddress !== null) {\n            message.proposerAddress = bytesFromBase64(object.proposerAddress);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.version !== undefined &&\n            (obj.version = message.version\n                ? Consensus.toJSON(message.version)\n                : undefined);\n        message.chainId !== undefined && (obj.chainId = message.chainId);\n        message.height !== undefined && (obj.height = message.height);\n        message.time !== undefined &&\n            (obj.time =\n                message.time !== undefined ? message.time.toISOString() : null);\n        message.lastBlockId !== undefined &&\n            (obj.lastBlockId = message.lastBlockId\n                ? BlockID.toJSON(message.lastBlockId)\n                : undefined);\n        message.lastCommitHash !== undefined &&\n            (obj.lastCommitHash = base64FromBytes(message.lastCommitHash !== undefined\n                ? message.lastCommitHash\n                : new Uint8Array()));\n        message.dataHash !== undefined &&\n            (obj.dataHash = base64FromBytes(message.dataHash !== undefined ? message.dataHash : new Uint8Array()));\n        message.validatorsHash !== undefined &&\n            (obj.validatorsHash = base64FromBytes(message.validatorsHash !== undefined\n                ? message.validatorsHash\n                : new Uint8Array()));\n        message.nextValidatorsHash !== undefined &&\n            (obj.nextValidatorsHash = base64FromBytes(message.nextValidatorsHash !== undefined\n                ? message.nextValidatorsHash\n                : new Uint8Array()));\n        message.consensusHash !== undefined &&\n            (obj.consensusHash = base64FromBytes(message.consensusHash !== undefined\n                ? message.consensusHash\n                : new Uint8Array()));\n        message.appHash !== undefined &&\n            (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));\n        message.lastResultsHash !== undefined &&\n            (obj.lastResultsHash = base64FromBytes(message.lastResultsHash !== undefined\n                ? message.lastResultsHash\n                : new Uint8Array()));\n        message.evidenceHash !== undefined &&\n            (obj.evidenceHash = base64FromBytes(message.evidenceHash !== undefined\n                ? message.evidenceHash\n                : new Uint8Array()));\n        message.proposerAddress !== undefined &&\n            (obj.proposerAddress = base64FromBytes(message.proposerAddress !== undefined\n                ? message.proposerAddress\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseHeader };\n        if (object.version !== undefined && object.version !== null) {\n            message.version = Consensus.fromPartial(object.version);\n        }\n        else {\n            message.version = undefined;\n        }\n        if (object.chainId !== undefined && object.chainId !== null) {\n            message.chainId = object.chainId;\n        }\n        else {\n            message.chainId = \"\";\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.time !== undefined && object.time !== null) {\n            message.time = object.time;\n        }\n        else {\n            message.time = undefined;\n        }\n        if (object.lastBlockId !== undefined && object.lastBlockId !== null) {\n            message.lastBlockId = BlockID.fromPartial(object.lastBlockId);\n        }\n        else {\n            message.lastBlockId = undefined;\n        }\n        if (object.lastCommitHash !== undefined && object.lastCommitHash !== null) {\n            message.lastCommitHash = object.lastCommitHash;\n        }\n        else {\n            message.lastCommitHash = new Uint8Array();\n        }\n        if (object.dataHash !== undefined && object.dataHash !== null) {\n            message.dataHash = object.dataHash;\n        }\n        else {\n            message.dataHash = new Uint8Array();\n        }\n        if (object.validatorsHash !== undefined && object.validatorsHash !== null) {\n            message.validatorsHash = object.validatorsHash;\n        }\n        else {\n            message.validatorsHash = new Uint8Array();\n        }\n        if (object.nextValidatorsHash !== undefined &&\n            object.nextValidatorsHash !== null) {\n            message.nextValidatorsHash = object.nextValidatorsHash;\n        }\n        else {\n            message.nextValidatorsHash = new Uint8Array();\n        }\n        if (object.consensusHash !== undefined && object.consensusHash !== null) {\n            message.consensusHash = object.consensusHash;\n        }\n        else {\n            message.consensusHash = new Uint8Array();\n        }\n        if (object.appHash !== undefined && object.appHash !== null) {\n            message.appHash = object.appHash;\n        }\n        else {\n            message.appHash = new Uint8Array();\n        }\n        if (object.lastResultsHash !== undefined &&\n            object.lastResultsHash !== null) {\n            message.lastResultsHash = object.lastResultsHash;\n        }\n        else {\n            message.lastResultsHash = new Uint8Array();\n        }\n        if (object.evidenceHash !== undefined && object.evidenceHash !== null) {\n            message.evidenceHash = object.evidenceHash;\n        }\n        else {\n            message.evidenceHash = new Uint8Array();\n        }\n        if (object.proposerAddress !== undefined &&\n            object.proposerAddress !== null) {\n            message.proposerAddress = object.proposerAddress;\n        }\n        else {\n            message.proposerAddress = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseData = {};\nexport const Data = {\n    encode(message, writer = Writer.create()) {\n        for (const v of message.txs) {\n            writer.uint32(10).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseData };\n        message.txs = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.txs.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseData };\n        message.txs = [];\n        if (object.txs !== undefined && object.txs !== null) {\n            for (const e of object.txs) {\n                message.txs.push(bytesFromBase64(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.txs) {\n            obj.txs = message.txs.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.txs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseData };\n        message.txs = [];\n        if (object.txs !== undefined && object.txs !== null) {\n            for (const e of object.txs) {\n                message.txs.push(e);\n            }\n        }\n        return message;\n    },\n};\nconst baseVote = { type: 0, height: 0, round: 0, validatorIndex: 0 };\nexport const Vote = {\n    encode(message, writer = Writer.create()) {\n        if (message.type !== 0) {\n            writer.uint32(8).int32(message.type);\n        }\n        if (message.height !== 0) {\n            writer.uint32(16).int64(message.height);\n        }\n        if (message.round !== 0) {\n            writer.uint32(24).int32(message.round);\n        }\n        if (message.blockId !== undefined) {\n            BlockID.encode(message.blockId, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.timestamp !== undefined) {\n            Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(42).fork()).ldelim();\n        }\n        if (message.validatorAddress.length !== 0) {\n            writer.uint32(50).bytes(message.validatorAddress);\n        }\n        if (message.validatorIndex !== 0) {\n            writer.uint32(56).int32(message.validatorIndex);\n        }\n        if (message.signature.length !== 0) {\n            writer.uint32(66).bytes(message.signature);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseVote };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.height = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.round = reader.int32();\n                    break;\n                case 4:\n                    message.blockId = BlockID.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.validatorAddress = reader.bytes();\n                    break;\n                case 7:\n                    message.validatorIndex = reader.int32();\n                    break;\n                case 8:\n                    message.signature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseVote };\n        if (object.type !== undefined && object.type !== null) {\n            message.type = signedMsgTypeFromJSON(object.type);\n        }\n        else {\n            message.type = 0;\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = Number(object.height);\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.round !== undefined && object.round !== null) {\n            message.round = Number(object.round);\n        }\n        else {\n            message.round = 0;\n        }\n        if (object.blockId !== undefined && object.blockId !== null) {\n            message.blockId = BlockID.fromJSON(object.blockId);\n        }\n        else {\n            message.blockId = undefined;\n        }\n        if (object.timestamp !== undefined && object.timestamp !== null) {\n            message.timestamp = fromJsonTimestamp(object.timestamp);\n        }\n        else {\n            message.timestamp = undefined;\n        }\n        if (object.validatorAddress !== undefined &&\n            object.validatorAddress !== null) {\n            message.validatorAddress = bytesFromBase64(object.validatorAddress);\n        }\n        if (object.validatorIndex !== undefined && object.validatorIndex !== null) {\n            message.validatorIndex = Number(object.validatorIndex);\n        }\n        else {\n            message.validatorIndex = 0;\n        }\n        if (object.signature !== undefined && object.signature !== null) {\n            message.signature = bytesFromBase64(object.signature);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined &&\n            (obj.type = signedMsgTypeToJSON(message.type));\n        message.height !== undefined && (obj.height = message.height);\n        message.round !== undefined && (obj.round = message.round);\n        message.blockId !== undefined &&\n            (obj.blockId = message.blockId\n                ? BlockID.toJSON(message.blockId)\n                : undefined);\n        message.timestamp !== undefined &&\n            (obj.timestamp =\n                message.timestamp !== undefined\n                    ? message.timestamp.toISOString()\n                    : null);\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = base64FromBytes(message.validatorAddress !== undefined\n                ? message.validatorAddress\n                : new Uint8Array()));\n        message.validatorIndex !== undefined &&\n            (obj.validatorIndex = message.validatorIndex);\n        message.signature !== undefined &&\n            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseVote };\n        if (object.type !== undefined && object.type !== null) {\n            message.type = object.type;\n        }\n        else {\n            message.type = 0;\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.round !== undefined && object.round !== null) {\n            message.round = object.round;\n        }\n        else {\n            message.round = 0;\n        }\n        if (object.blockId !== undefined && object.blockId !== null) {\n            message.blockId = BlockID.fromPartial(object.blockId);\n        }\n        else {\n            message.blockId = undefined;\n        }\n        if (object.timestamp !== undefined && object.timestamp !== null) {\n            message.timestamp = object.timestamp;\n        }\n        else {\n            message.timestamp = undefined;\n        }\n        if (object.validatorAddress !== undefined &&\n            object.validatorAddress !== null) {\n            message.validatorAddress = object.validatorAddress;\n        }\n        else {\n            message.validatorAddress = new Uint8Array();\n        }\n        if (object.validatorIndex !== undefined && object.validatorIndex !== null) {\n            message.validatorIndex = object.validatorIndex;\n        }\n        else {\n            message.validatorIndex = 0;\n        }\n        if (object.signature !== undefined && object.signature !== null) {\n            message.signature = object.signature;\n        }\n        else {\n            message.signature = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseCommit = { height: 0, round: 0 };\nexport const Commit = {\n    encode(message, writer = Writer.create()) {\n        if (message.height !== 0) {\n            writer.uint32(8).int64(message.height);\n        }\n        if (message.round !== 0) {\n            writer.uint32(16).int32(message.round);\n        }\n        if (message.blockId !== undefined) {\n            BlockID.encode(message.blockId, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.signatures) {\n            CommitSig.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseCommit };\n        message.signatures = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.round = reader.int32();\n                    break;\n                case 3:\n                    message.blockId = BlockID.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.signatures.push(CommitSig.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseCommit };\n        message.signatures = [];\n        if (object.height !== undefined && object.height !== null) {\n            message.height = Number(object.height);\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.round !== undefined && object.round !== null) {\n            message.round = Number(object.round);\n        }\n        else {\n            message.round = 0;\n        }\n        if (object.blockId !== undefined && object.blockId !== null) {\n            message.blockId = BlockID.fromJSON(object.blockId);\n        }\n        else {\n            message.blockId = undefined;\n        }\n        if (object.signatures !== undefined && object.signatures !== null) {\n            for (const e of object.signatures) {\n                message.signatures.push(CommitSig.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = message.height);\n        message.round !== undefined && (obj.round = message.round);\n        message.blockId !== undefined &&\n            (obj.blockId = message.blockId\n                ? BlockID.toJSON(message.blockId)\n                : undefined);\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => e ? CommitSig.toJSON(e) : undefined);\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseCommit };\n        message.signatures = [];\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.round !== undefined && object.round !== null) {\n            message.round = object.round;\n        }\n        else {\n            message.round = 0;\n        }\n        if (object.blockId !== undefined && object.blockId !== null) {\n            message.blockId = BlockID.fromPartial(object.blockId);\n        }\n        else {\n            message.blockId = undefined;\n        }\n        if (object.signatures !== undefined && object.signatures !== null) {\n            for (const e of object.signatures) {\n                message.signatures.push(CommitSig.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseCommitSig = { blockIdFlag: 0 };\nexport const CommitSig = {\n    encode(message, writer = Writer.create()) {\n        if (message.blockIdFlag !== 0) {\n            writer.uint32(8).int32(message.blockIdFlag);\n        }\n        if (message.validatorAddress.length !== 0) {\n            writer.uint32(18).bytes(message.validatorAddress);\n        }\n        if (message.timestamp !== undefined) {\n            Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).ldelim();\n        }\n        if (message.signature.length !== 0) {\n            writer.uint32(34).bytes(message.signature);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseCommitSig };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.blockIdFlag = reader.int32();\n                    break;\n                case 2:\n                    message.validatorAddress = reader.bytes();\n                    break;\n                case 3:\n                    message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.signature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseCommitSig };\n        if (object.blockIdFlag !== undefined && object.blockIdFlag !== null) {\n            message.blockIdFlag = blockIDFlagFromJSON(object.blockIdFlag);\n        }\n        else {\n            message.blockIdFlag = 0;\n        }\n        if (object.validatorAddress !== undefined &&\n            object.validatorAddress !== null) {\n            message.validatorAddress = bytesFromBase64(object.validatorAddress);\n        }\n        if (object.timestamp !== undefined && object.timestamp !== null) {\n            message.timestamp = fromJsonTimestamp(object.timestamp);\n        }\n        else {\n            message.timestamp = undefined;\n        }\n        if (object.signature !== undefined && object.signature !== null) {\n            message.signature = bytesFromBase64(object.signature);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.blockIdFlag !== undefined &&\n            (obj.blockIdFlag = blockIDFlagToJSON(message.blockIdFlag));\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = base64FromBytes(message.validatorAddress !== undefined\n                ? message.validatorAddress\n                : new Uint8Array()));\n        message.timestamp !== undefined &&\n            (obj.timestamp =\n                message.timestamp !== undefined\n                    ? message.timestamp.toISOString()\n                    : null);\n        message.signature !== undefined &&\n            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseCommitSig };\n        if (object.blockIdFlag !== undefined && object.blockIdFlag !== null) {\n            message.blockIdFlag = object.blockIdFlag;\n        }\n        else {\n            message.blockIdFlag = 0;\n        }\n        if (object.validatorAddress !== undefined &&\n            object.validatorAddress !== null) {\n            message.validatorAddress = object.validatorAddress;\n        }\n        else {\n            message.validatorAddress = new Uint8Array();\n        }\n        if (object.timestamp !== undefined && object.timestamp !== null) {\n            message.timestamp = object.timestamp;\n        }\n        else {\n            message.timestamp = undefined;\n        }\n        if (object.signature !== undefined && object.signature !== null) {\n            message.signature = object.signature;\n        }\n        else {\n            message.signature = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseProposal = { type: 0, height: 0, round: 0, polRound: 0 };\nexport const Proposal = {\n    encode(message, writer = Writer.create()) {\n        if (message.type !== 0) {\n            writer.uint32(8).int32(message.type);\n        }\n        if (message.height !== 0) {\n            writer.uint32(16).int64(message.height);\n        }\n        if (message.round !== 0) {\n            writer.uint32(24).int32(message.round);\n        }\n        if (message.polRound !== 0) {\n            writer.uint32(32).int32(message.polRound);\n        }\n        if (message.blockId !== undefined) {\n            BlockID.encode(message.blockId, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.timestamp !== undefined) {\n            Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(50).fork()).ldelim();\n        }\n        if (message.signature.length !== 0) {\n            writer.uint32(58).bytes(message.signature);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseProposal };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.height = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.round = reader.int32();\n                    break;\n                case 4:\n                    message.polRound = reader.int32();\n                    break;\n                case 5:\n                    message.blockId = BlockID.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.signature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseProposal };\n        if (object.type !== undefined && object.type !== null) {\n            message.type = signedMsgTypeFromJSON(object.type);\n        }\n        else {\n            message.type = 0;\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = Number(object.height);\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.round !== undefined && object.round !== null) {\n            message.round = Number(object.round);\n        }\n        else {\n            message.round = 0;\n        }\n        if (object.polRound !== undefined && object.polRound !== null) {\n            message.polRound = Number(object.polRound);\n        }\n        else {\n            message.polRound = 0;\n        }\n        if (object.blockId !== undefined && object.blockId !== null) {\n            message.blockId = BlockID.fromJSON(object.blockId);\n        }\n        else {\n            message.blockId = undefined;\n        }\n        if (object.timestamp !== undefined && object.timestamp !== null) {\n            message.timestamp = fromJsonTimestamp(object.timestamp);\n        }\n        else {\n            message.timestamp = undefined;\n        }\n        if (object.signature !== undefined && object.signature !== null) {\n            message.signature = bytesFromBase64(object.signature);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined &&\n            (obj.type = signedMsgTypeToJSON(message.type));\n        message.height !== undefined && (obj.height = message.height);\n        message.round !== undefined && (obj.round = message.round);\n        message.polRound !== undefined && (obj.polRound = message.polRound);\n        message.blockId !== undefined &&\n            (obj.blockId = message.blockId\n                ? BlockID.toJSON(message.blockId)\n                : undefined);\n        message.timestamp !== undefined &&\n            (obj.timestamp =\n                message.timestamp !== undefined\n                    ? message.timestamp.toISOString()\n                    : null);\n        message.signature !== undefined &&\n            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseProposal };\n        if (object.type !== undefined && object.type !== null) {\n            message.type = object.type;\n        }\n        else {\n            message.type = 0;\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.round !== undefined && object.round !== null) {\n            message.round = object.round;\n        }\n        else {\n            message.round = 0;\n        }\n        if (object.polRound !== undefined && object.polRound !== null) {\n            message.polRound = object.polRound;\n        }\n        else {\n            message.polRound = 0;\n        }\n        if (object.blockId !== undefined && object.blockId !== null) {\n            message.blockId = BlockID.fromPartial(object.blockId);\n        }\n        else {\n            message.blockId = undefined;\n        }\n        if (object.timestamp !== undefined && object.timestamp !== null) {\n            message.timestamp = object.timestamp;\n        }\n        else {\n            message.timestamp = undefined;\n        }\n        if (object.signature !== undefined && object.signature !== null) {\n            message.signature = object.signature;\n        }\n        else {\n            message.signature = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseSignedHeader = {};\nexport const SignedHeader = {\n    encode(message, writer = Writer.create()) {\n        if (message.header !== undefined) {\n            Header.encode(message.header, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.commit !== undefined) {\n            Commit.encode(message.commit, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseSignedHeader };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.header = Header.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.commit = Commit.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseSignedHeader };\n        if (object.header !== undefined && object.header !== null) {\n            message.header = Header.fromJSON(object.header);\n        }\n        else {\n            message.header = undefined;\n        }\n        if (object.commit !== undefined && object.commit !== null) {\n            message.commit = Commit.fromJSON(object.commit);\n        }\n        else {\n            message.commit = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.header !== undefined &&\n            (obj.header = message.header ? Header.toJSON(message.header) : undefined);\n        message.commit !== undefined &&\n            (obj.commit = message.commit ? Commit.toJSON(message.commit) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseSignedHeader };\n        if (object.header !== undefined && object.header !== null) {\n            message.header = Header.fromPartial(object.header);\n        }\n        else {\n            message.header = undefined;\n        }\n        if (object.commit !== undefined && object.commit !== null) {\n            message.commit = Commit.fromPartial(object.commit);\n        }\n        else {\n            message.commit = undefined;\n        }\n        return message;\n    },\n};\nconst baseLightBlock = {};\nexport const LightBlock = {\n    encode(message, writer = Writer.create()) {\n        if (message.signedHeader !== undefined) {\n            SignedHeader.encode(message.signedHeader, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.validatorSet !== undefined) {\n            ValidatorSet.encode(message.validatorSet, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseLightBlock };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signedHeader = SignedHeader.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.validatorSet = ValidatorSet.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseLightBlock };\n        if (object.signedHeader !== undefined && object.signedHeader !== null) {\n            message.signedHeader = SignedHeader.fromJSON(object.signedHeader);\n        }\n        else {\n            message.signedHeader = undefined;\n        }\n        if (object.validatorSet !== undefined && object.validatorSet !== null) {\n            message.validatorSet = ValidatorSet.fromJSON(object.validatorSet);\n        }\n        else {\n            message.validatorSet = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.signedHeader !== undefined &&\n            (obj.signedHeader = message.signedHeader\n                ? SignedHeader.toJSON(message.signedHeader)\n                : undefined);\n        message.validatorSet !== undefined &&\n            (obj.validatorSet = message.validatorSet\n                ? ValidatorSet.toJSON(message.validatorSet)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseLightBlock };\n        if (object.signedHeader !== undefined && object.signedHeader !== null) {\n            message.signedHeader = SignedHeader.fromPartial(object.signedHeader);\n        }\n        else {\n            message.signedHeader = undefined;\n        }\n        if (object.validatorSet !== undefined && object.validatorSet !== null) {\n            message.validatorSet = ValidatorSet.fromPartial(object.validatorSet);\n        }\n        else {\n            message.validatorSet = undefined;\n        }\n        return message;\n    },\n};\nconst baseBlockMeta = { blockSize: 0, numTxs: 0 };\nexport const BlockMeta = {\n    encode(message, writer = Writer.create()) {\n        if (message.blockId !== undefined) {\n            BlockID.encode(message.blockId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.blockSize !== 0) {\n            writer.uint32(16).int64(message.blockSize);\n        }\n        if (message.header !== undefined) {\n            Header.encode(message.header, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.numTxs !== 0) {\n            writer.uint32(32).int64(message.numTxs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseBlockMeta };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.blockId = BlockID.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.blockSize = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.header = Header.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.numTxs = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseBlockMeta };\n        if (object.blockId !== undefined && object.blockId !== null) {\n            message.blockId = BlockID.fromJSON(object.blockId);\n        }\n        else {\n            message.blockId = undefined;\n        }\n        if (object.blockSize !== undefined && object.blockSize !== null) {\n            message.blockSize = Number(object.blockSize);\n        }\n        else {\n            message.blockSize = 0;\n        }\n        if (object.header !== undefined && object.header !== null) {\n            message.header = Header.fromJSON(object.header);\n        }\n        else {\n            message.header = undefined;\n        }\n        if (object.numTxs !== undefined && object.numTxs !== null) {\n            message.numTxs = Number(object.numTxs);\n        }\n        else {\n            message.numTxs = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.blockId !== undefined &&\n            (obj.blockId = message.blockId\n                ? BlockID.toJSON(message.blockId)\n                : undefined);\n        message.blockSize !== undefined && (obj.blockSize = message.blockSize);\n        message.header !== undefined &&\n            (obj.header = message.header ? Header.toJSON(message.header) : undefined);\n        message.numTxs !== undefined && (obj.numTxs = message.numTxs);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseBlockMeta };\n        if (object.blockId !== undefined && object.blockId !== null) {\n            message.blockId = BlockID.fromPartial(object.blockId);\n        }\n        else {\n            message.blockId = undefined;\n        }\n        if (object.blockSize !== undefined && object.blockSize !== null) {\n            message.blockSize = object.blockSize;\n        }\n        else {\n            message.blockSize = 0;\n        }\n        if (object.header !== undefined && object.header !== null) {\n            message.header = Header.fromPartial(object.header);\n        }\n        else {\n            message.header = undefined;\n        }\n        if (object.numTxs !== undefined && object.numTxs !== null) {\n            message.numTxs = object.numTxs;\n        }\n        else {\n            message.numTxs = 0;\n        }\n        return message;\n    },\n};\nconst baseTxProof = {};\nexport const TxProof = {\n    encode(message, writer = Writer.create()) {\n        if (message.rootHash.length !== 0) {\n            writer.uint32(10).bytes(message.rootHash);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (message.proof !== undefined) {\n            Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseTxProof };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.rootHash = reader.bytes();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.proof = Proof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseTxProof };\n        if (object.rootHash !== undefined && object.rootHash !== null) {\n            message.rootHash = bytesFromBase64(object.rootHash);\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        if (object.proof !== undefined && object.proof !== null) {\n            message.proof = Proof.fromJSON(object.proof);\n        }\n        else {\n            message.proof = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.rootHash !== undefined &&\n            (obj.rootHash = base64FromBytes(message.rootHash !== undefined ? message.rootHash : new Uint8Array()));\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.proof !== undefined &&\n            (obj.proof = message.proof ? Proof.toJSON(message.proof) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseTxProof };\n        if (object.rootHash !== undefined && object.rootHash !== null) {\n            message.rootHash = object.rootHash;\n        }\n        else {\n            message.rootHash = new Uint8Array();\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        if (object.proof !== undefined && object.proof !== null) {\n            message.proof = Proof.fromPartial(object.proof);\n        }\n        else {\n            message.proof = undefined;\n        }\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (let i = 0; i < arr.byteLength; ++i) {\n        bin.push(String.fromCharCode(arr[i]));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction toTimestamp(date) {\n    const seconds = date.getTime() / 1000;\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return { seconds, nanos };\n}\nfunction fromTimestamp(t) {\n    let millis = t.seconds * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return o;\n    }\n    else if (typeof o === \"string\") {\n        return new Date(o);\n    }\n    else {\n        return fromTimestamp(Timestamp.fromJSON(o));\n    }\n}\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (util.Long !== Long) {\n    util.Long = Long;\n    configure();\n}\n"]},"metadata":{},"sourceType":"module"}