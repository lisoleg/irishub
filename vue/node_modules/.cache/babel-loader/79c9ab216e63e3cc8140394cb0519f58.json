{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// THIS FILE IS GENERATED AUTOMATICALLY. DO NOT MODIFY.\nimport { SigningStargateClient } from \"@cosmjs/stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { Api } from \"./rest\";\nimport { MsgBurnnft } from \"./types/nft/tx\";\nimport { MsgEditnft } from \"./types/nft/tx\";\nimport { MsgMintnft } from \"./types/nft/tx\";\nimport { MsgTransfernft } from \"./types/nft/tx\";\nimport { MsgIssueDenom } from \"./types/nft/tx\";\nimport { MsgTransferDenom } from \"./types/nft/tx\";\nconst types = [[\"/irismod.nft.MsgBurnnft\", MsgBurnnft], [\"/irismod.nft.MsgEditnft\", MsgEditnft], [\"/irismod.nft.MsgMintnft\", MsgMintnft], [\"/irismod.nft.MsgTransfernft\", MsgTransfernft], [\"/irismod.nft.MsgIssueDenom\", MsgIssueDenom], [\"/irismod.nft.MsgTransferDenom\", MsgTransferDenom]];\nexport const MissingWalletError = new Error(\"wallet is required\");\nexport const registry = new Registry(types);\nconst defaultFee = {\n  amount: [],\n  gas: \"200000\"\n};\n\nconst txClient = async (wallet, {\n  addr: addr\n} = {\n  addr: \"http://localhost:26657\"\n}) => {\n  if (!wallet) throw MissingWalletError;\n  let client;\n\n  if (addr) {\n    client = await SigningStargateClient.connectWithSigner(addr, wallet, {\n      registry\n    });\n  } else {\n    client = await SigningStargateClient.offline(wallet, {\n      registry\n    });\n  }\n\n  const {\n    address\n  } = (await wallet.getAccounts())[0];\n  return {\n    signAndBroadcast: (msgs, {\n      fee,\n      memo\n    } = {\n      fee: defaultFee,\n      memo: \"\"\n    }) => client.signAndBroadcast(address, msgs, fee, memo),\n    msgBurnnft: data => ({\n      typeUrl: \"/irismod.nft.MsgBurnnft\",\n      value: MsgBurnnft.fromPartial(data)\n    }),\n    msgEditnft: data => ({\n      typeUrl: \"/irismod.nft.MsgEditnft\",\n      value: MsgEditnft.fromPartial(data)\n    }),\n    msgMintnft: data => ({\n      typeUrl: \"/irismod.nft.MsgMintnft\",\n      value: MsgMintnft.fromPartial(data)\n    }),\n    msgTransfernft: data => ({\n      typeUrl: \"/irismod.nft.MsgTransfernft\",\n      value: MsgTransfernft.fromPartial(data)\n    }),\n    msgIssueDenom: data => ({\n      typeUrl: \"/irismod.nft.MsgIssueDenom\",\n      value: MsgIssueDenom.fromPartial(data)\n    }),\n    msgTransferDenom: data => ({\n      typeUrl: \"/irismod.nft.MsgTransferDenom\",\n      value: MsgTransferDenom.fromPartial(data)\n    })\n  };\n};\n\nconst queryClient = async ({\n  addr: addr\n} = {\n  addr: \"http://localhost:1317\"\n}) => {\n  return new Api({\n    baseUrl: addr\n  });\n};\n\nexport { txClient, queryClient };","map":{"version":3,"sources":["/home/lisoleg/checkers/vue/src/store/generated/alice/checkers/irismod.nft/module/index.js"],"names":["SigningStargateClient","Registry","Api","MsgBurnnft","MsgEditnft","MsgMintnft","MsgTransfernft","MsgIssueDenom","MsgTransferDenom","types","MissingWalletError","Error","registry","defaultFee","amount","gas","txClient","wallet","addr","client","connectWithSigner","offline","address","getAccounts","signAndBroadcast","msgs","fee","memo","msgBurnnft","data","typeUrl","value","fromPartial","msgEditnft","msgMintnft","msgTransfernft","msgIssueDenom","msgTransferDenom","queryClient","baseUrl"],"mappings":"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","sourcesContent":["// THIS FILE IS GENERATED AUTOMATICALLY. DO NOT MODIFY.\nimport { SigningStargateClient } from \"@cosmjs/stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { Api } from \"./rest\";\nimport { MsgBurnnft } from \"./types/nft/tx\";\nimport { MsgEditnft } from \"./types/nft/tx\";\nimport { MsgMintnft } from \"./types/nft/tx\";\nimport { MsgTransfernft } from \"./types/nft/tx\";\nimport { MsgIssueDenom } from \"./types/nft/tx\";\nimport { MsgTransferDenom } from \"./types/nft/tx\";\nconst types = [\n    [\"/irismod.nft.MsgBurnnft\", MsgBurnnft],\n    [\"/irismod.nft.MsgEditnft\", MsgEditnft],\n    [\"/irismod.nft.MsgMintnft\", MsgMintnft],\n    [\"/irismod.nft.MsgTransfernft\", MsgTransfernft],\n    [\"/irismod.nft.MsgIssueDenom\", MsgIssueDenom],\n    [\"/irismod.nft.MsgTransferDenom\", MsgTransferDenom],\n];\nexport const MissingWalletError = new Error(\"wallet is required\");\nexport const registry = new Registry(types);\nconst defaultFee = {\n    amount: [],\n    gas: \"200000\",\n};\nconst txClient = async (wallet, { addr: addr } = { addr: \"http://localhost:26657\" }) => {\n    if (!wallet)\n        throw MissingWalletError;\n    let client;\n    if (addr) {\n        client = await SigningStargateClient.connectWithSigner(addr, wallet, { registry });\n    }\n    else {\n        client = await SigningStargateClient.offline(wallet, { registry });\n    }\n    const { address } = (await wallet.getAccounts())[0];\n    return {\n        signAndBroadcast: (msgs, { fee, memo } = { fee: defaultFee, memo: \"\" }) => client.signAndBroadcast(address, msgs, fee, memo),\n        msgBurnnft: (data) => ({ typeUrl: \"/irismod.nft.MsgBurnnft\", value: MsgBurnnft.fromPartial(data) }),\n        msgEditnft: (data) => ({ typeUrl: \"/irismod.nft.MsgEditnft\", value: MsgEditnft.fromPartial(data) }),\n        msgMintnft: (data) => ({ typeUrl: \"/irismod.nft.MsgMintnft\", value: MsgMintnft.fromPartial(data) }),\n        msgTransfernft: (data) => ({ typeUrl: \"/irismod.nft.MsgTransfernft\", value: MsgTransfernft.fromPartial(data) }),\n        msgIssueDenom: (data) => ({ typeUrl: \"/irismod.nft.MsgIssueDenom\", value: MsgIssueDenom.fromPartial(data) }),\n        msgTransferDenom: (data) => ({ typeUrl: \"/irismod.nft.MsgTransferDenom\", value: MsgTransferDenom.fromPartial(data) }),\n    };\n};\nconst queryClient = async ({ addr: addr } = { addr: \"http://localhost:1317\" }) => {\n    return new Api({ baseUrl: addr });\n};\nexport { txClient, queryClient, };\n"]},"metadata":{},"sourceType":"module"}