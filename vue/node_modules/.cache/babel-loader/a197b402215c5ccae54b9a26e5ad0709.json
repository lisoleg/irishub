{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/* eslint-disable */\nimport { Reader, Writer } from \"protobufjs/minimal\";\nimport { Any } from \"../../../google/protobuf/any\";\nexport const protobufPackage = \"cosmos.evidence.v1beta1\";\nconst baseMsgSubmitEvidence = {\n  submitter: \"\"\n};\nexport const MsgSubmitEvidence = {\n  encode(message, writer = Writer.create()) {\n    if (message.submitter !== \"\") {\n      writer.uint32(10).string(message.submitter);\n    }\n\n    if (message.evidence !== undefined) {\n      Any.encode(message.evidence, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgSubmitEvidence\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.submitter = reader.string();\n          break;\n\n        case 2:\n          message.evidence = Any.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseMsgSubmitEvidence\n    };\n\n    if (object.submitter !== undefined && object.submitter !== null) {\n      message.submitter = String(object.submitter);\n    } else {\n      message.submitter = \"\";\n    }\n\n    if (object.evidence !== undefined && object.evidence !== null) {\n      message.evidence = Any.fromJSON(object.evidence);\n    } else {\n      message.evidence = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.submitter !== undefined && (obj.submitter = message.submitter);\n    message.evidence !== undefined && (obj.evidence = message.evidence ? Any.toJSON(message.evidence) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseMsgSubmitEvidence\n    };\n\n    if (object.submitter !== undefined && object.submitter !== null) {\n      message.submitter = object.submitter;\n    } else {\n      message.submitter = \"\";\n    }\n\n    if (object.evidence !== undefined && object.evidence !== null) {\n      message.evidence = Any.fromPartial(object.evidence);\n    } else {\n      message.evidence = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgSubmitEvidenceResponse = {};\nexport const MsgSubmitEvidenceResponse = {\n  encode(message, writer = Writer.create()) {\n    if (message.hash.length !== 0) {\n      writer.uint32(34).bytes(message.hash);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = { ...baseMsgSubmitEvidenceResponse\n    };\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 4:\n          message.hash = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = { ...baseMsgSubmitEvidenceResponse\n    };\n\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = bytesFromBase64(object.hash);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.hash !== undefined && (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = { ...baseMsgSubmitEvidenceResponse\n    };\n\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = object.hash;\n    } else {\n      message.hash = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nexport class MsgClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n  }\n\n  SubmitEvidence(request) {\n    const data = MsgSubmitEvidence.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.evidence.v1beta1.Msg\", \"SubmitEvidence\", data);\n    return promise.then(data => MsgSubmitEvidenceResponse.decode(new Reader(data)));\n  }\n\n}\n\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\n\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n\n  return arr;\n}\n\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\n\nfunction base64FromBytes(arr) {\n  const bin = [];\n\n  for (let i = 0; i < arr.byteLength; ++i) {\n    bin.push(String.fromCharCode(arr[i]));\n  }\n\n  return btoa(bin.join(\"\"));\n}","map":{"version":3,"sources":["/home/lisoleg/cosmos/checkers/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.evidence.v1beta1/module/types/cosmos/evidence/v1beta1/tx.js"],"names":["Reader","Writer","Any","protobufPackage","baseMsgSubmitEvidence","submitter","MsgSubmitEvidence","encode","message","writer","create","uint32","string","evidence","undefined","fork","ldelim","decode","input","length","reader","Uint8Array","end","len","pos","tag","skipType","fromJSON","object","String","toJSON","obj","fromPartial","baseMsgSubmitEvidenceResponse","MsgSubmitEvidenceResponse","hash","bytes","bytesFromBase64","base64FromBytes","MsgClientImpl","constructor","rpc","SubmitEvidence","request","data","finish","promise","then","globalThis","self","window","global","atob","b64","Buffer","from","toString","bin","arr","i","charCodeAt","btoa","byteLength","push","fromCharCode","join"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { Reader, Writer } from \"protobufjs/minimal\";\nimport { Any } from \"../../../google/protobuf/any\";\nexport const protobufPackage = \"cosmos.evidence.v1beta1\";\nconst baseMsgSubmitEvidence = { submitter: \"\" };\nexport const MsgSubmitEvidence = {\n    encode(message, writer = Writer.create()) {\n        if (message.submitter !== \"\") {\n            writer.uint32(10).string(message.submitter);\n        }\n        if (message.evidence !== undefined) {\n            Any.encode(message.evidence, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgSubmitEvidence };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.submitter = reader.string();\n                    break;\n                case 2:\n                    message.evidence = Any.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseMsgSubmitEvidence };\n        if (object.submitter !== undefined && object.submitter !== null) {\n            message.submitter = String(object.submitter);\n        }\n        else {\n            message.submitter = \"\";\n        }\n        if (object.evidence !== undefined && object.evidence !== null) {\n            message.evidence = Any.fromJSON(object.evidence);\n        }\n        else {\n            message.evidence = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.submitter !== undefined && (obj.submitter = message.submitter);\n        message.evidence !== undefined &&\n            (obj.evidence = message.evidence\n                ? Any.toJSON(message.evidence)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseMsgSubmitEvidence };\n        if (object.submitter !== undefined && object.submitter !== null) {\n            message.submitter = object.submitter;\n        }\n        else {\n            message.submitter = \"\";\n        }\n        if (object.evidence !== undefined && object.evidence !== null) {\n            message.evidence = Any.fromPartial(object.evidence);\n        }\n        else {\n            message.evidence = undefined;\n        }\n        return message;\n    },\n};\nconst baseMsgSubmitEvidenceResponse = {};\nexport const MsgSubmitEvidenceResponse = {\n    encode(message, writer = Writer.create()) {\n        if (message.hash.length !== 0) {\n            writer.uint32(34).bytes(message.hash);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseMsgSubmitEvidenceResponse,\n        };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 4:\n                    message.hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = {\n            ...baseMsgSubmitEvidenceResponse,\n        };\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = bytesFromBase64(object.hash);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.hash !== undefined &&\n            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = {\n            ...baseMsgSubmitEvidenceResponse,\n        };\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = object.hash;\n        }\n        else {\n            message.hash = new Uint8Array();\n        }\n        return message;\n    },\n};\nexport class MsgClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n    }\n    SubmitEvidence(request) {\n        const data = MsgSubmitEvidence.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.evidence.v1beta1.Msg\", \"SubmitEvidence\", data);\n        return promise.then((data) => MsgSubmitEvidenceResponse.decode(new Reader(data)));\n    }\n}\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (let i = 0; i < arr.byteLength; ++i) {\n        bin.push(String.fromCharCode(arr[i]));\n    }\n    return btoa(bin.join(\"\"));\n}\n"]},"metadata":{},"sourceType":"module"}