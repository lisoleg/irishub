{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _protoSigning = require(\"@cosmjs/proto-signing\");\n\nvar _stargate = require(\"@cosmjs/stargate\");\n\nvar _crypto = require(\"@cosmjs/crypto\");\n\nvar _cryptoJs = _interopRequireDefault(require(\"crypto-js\"));\n\nvar _keys = require(\"../../../helpers/keys\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n/* START TODO: Integrate closure below for additional security \nfunction getDecryptor(password) {\n\tlet secret = password\n\treturn async function (encryptedMnemonic, HDpath) {\n\t\tconst mnemonic = CryptoJS.AES.decrypt(encryptedMnemonic, secret).toString(\n\t\t\tCryptoJS.enc.Utf8\n\t\t)\n\t\treturn await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, HDpath)\n\t}\n}\nEND TODO */\n\n\nvar _default = {\n  namespaced: true,\n  state: function state() {\n    return {\n      wallets: JSON.parse(window.localStorage.getItem('wallets')) || [],\n      activeWallet: null,\n      activeClient: null,\n      selectedAddress: '',\n      authorized: false,\n      gasPrice: '0.0000025token'\n    };\n  },\n  getters: {\n    client: function client(state) {\n      return state.activeClient;\n    },\n    gasPrice: function gasPrice(state) {\n      return state.gasPrice;\n    },\n    wallet: function wallet(state) {\n      return state.activeWallet;\n    },\n    address: function address(state) {\n      return state.selectedAddress;\n    },\n    getMnemonic: function getMnemonic(state) {\n      return state.activeWallet.mnemonic;\n    },\n    getPath: function getPath(state) {\n      var _state$activeWallet, _state$activeWallet2;\n\n      return ((_state$activeWallet = state.activeWallet) === null || _state$activeWallet === void 0 ? void 0 : _state$activeWallet.HDpath) + ((_state$activeWallet2 = state.activeWallet) === null || _state$activeWallet2 === void 0 ? void 0 : _state$activeWallet2.accounts.find(function (x) {\n        return x.address == state.selectedAddress;\n      }).pathIncrement);\n    },\n    relayers: function relayers(state) {\n      var _state$activeWallet$a, _state$activeWallet3;\n\n      return (_state$activeWallet$a = (_state$activeWallet3 = state.activeWallet) === null || _state$activeWallet3 === void 0 ? void 0 : _state$activeWallet3.accounts.find(function (x) {\n        return x.address == state.selectedAddress;\n      }).relayers) !== null && _state$activeWallet$a !== void 0 ? _state$activeWallet$a : [];\n    },\n    nameAvailable: function nameAvailable(state) {\n      return function (name) {\n        return state.wallets.findIndex(function (x) {\n          return x.name == name;\n        }) == -1;\n      };\n    },\n    lastWallet: function lastWallet(state) {\n      if (state.activeWallet) {\n        return state.activeWallet.name;\n      } else {\n        return window.localStorage.getItem('lastWallet');\n      }\n    },\n    loggedIn: function loggedIn(state) {\n      return state.activeClient !== null;\n    },\n    signer: function signer(state) {\n      if (state.activeClient) {\n        return state.activeClient.signer;\n      } else {\n        return null;\n      }\n    },\n    walletName: function walletName(state) {\n      return state.activeWallet ? state.activeWallet.name : null;\n    },\n    privKey: function privKey(state) {\n      if (state.activeClient) {\n        return (0, _keys.keyToWif)(state.activeClient.signer.privkey);\n      } else {\n        return null;\n      }\n    }\n  },\n  mutations: {\n    SET_ACTIVE_WALLET: function SET_ACTIVE_WALLET(state, wallet) {\n      state.activeWallet = wallet;\n      window.localStorage.setItem('lastWallet', wallet.name);\n    },\n    SET_ACTIVE_CLIENT: function SET_ACTIVE_CLIENT(state, client) {\n      state.activeClient = client;\n      state.authorized = true;\n    },\n    ADD_WALLET: function ADD_WALLET(state, wallet) {\n      state.activeWallet = wallet;\n      window.localStorage.setItem('lastWallet', wallet.name);\n\n      if (state.activeWallet.name && state.activeWallet.password) {\n        state.wallets.push({\n          name: state.activeWallet.name,\n          wallet: _cryptoJs[\"default\"].AES.encrypt(JSON.stringify(state.activeWallet), state.activeWallet.password).toString()\n        });\n      }\n\n      if (state.activeWallet.name == 'Keplr Integration' && !state.activeWallet.password) {\n        state.wallets.push({\n          name: state.activeWallet.name,\n          wallet: JSON.stringify(state.activeWallet)\n        });\n      }\n    },\n    PATH_INCREMENT: function PATH_INCREMENT(state) {\n      state.activeWallet.pathIncrement = state.activeWallet.pathIncrement + 1;\n    },\n    ADD_ACCOUNT: function ADD_ACCOUNT(state, account) {\n      state.activeWallet.accounts.push(account);\n\n      if (state.activeWallet.name && state.activeWallet.password) {\n        state.wallets[state.wallets.findIndex(function (x) {\n          return x.name === state.activeWallet.name;\n        })].wallet = _cryptoJs[\"default\"].AES.encrypt(JSON.stringify(state.activeWallet), state.activeWallet.password).toString();\n      }\n    },\n    SET_RELAYERS: function SET_RELAYERS(state, relayers) {\n      state.activeWallet.accounts.find(function (x) {\n        return x.address == state.selectedAddress;\n      }).relayers = relayers;\n\n      if (state.activeWallet.name && state.activeWallet.password) {\n        state.wallets[state.wallets.findIndex(function (x) {\n          return x.name === state.activeWallet.name;\n        })].wallet = _cryptoJs[\"default\"].AES.encrypt(JSON.stringify(state.activeWallet), state.activeWallet.password).toString();\n      }\n    },\n    SET_SELECTED_ADDRESS: function SET_SELECTED_ADDRESS(state, address) {\n      state.selectedAddress = address;\n    },\n    SET_BACKUP_STATE: function SET_BACKUP_STATE(state, backupState) {\n      state.backupState = backupState;\n    },\n    ADD_MESSAGE_TYPE: function ADD_MESSAGE_TYPE(state, _ref) {\n      var typeUrl = _ref.typeUrl,\n          type = _ref.type;\n      state.activeClient.registry.register(typeUrl, type);\n    },\n    SIGN_OUT: function SIGN_OUT(state) {\n      state.selectedAddress = '';\n      state.activeClient = null;\n      state.activeWallet = null;\n      state.authorized = false;\n    }\n  },\n  actions: {\n    signOut: function signOut(_ref2) {\n      var commit = _ref2.commit;\n      commit('SIGN_OUT');\n    },\n    connectWithKeplr: function connectWithKeplr(_ref3, accountSigner) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var commit, dispatch, rootGetters, wallet, _yield$accountSigner$, _yield$accountSigner$2, account, client;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref3.commit, dispatch = _ref3.dispatch, rootGetters = _ref3.rootGetters;\n                _context.next = 3;\n                return dispatch('common/env/signIn', accountSigner, {\n                  root: true\n                });\n\n              case 3:\n                wallet = {\n                  name: 'Keplr Integration',\n                  mnemonic: null,\n                  HDpath: null,\n                  password: null,\n                  prefix: rootGetters['common/env/addrPrefix'],\n                  pathIncrement: null,\n                  accounts: []\n                };\n                _context.next = 6;\n                return accountSigner.getAccounts();\n\n              case 6:\n                _yield$accountSigner$ = _context.sent;\n                _yield$accountSigner$2 = _slicedToArray(_yield$accountSigner$, 1);\n                account = _yield$accountSigner$2[0];\n                wallet.accounts.push({\n                  address: account.address,\n                  pathIncrement: null\n                });\n                commit('ADD_WALLET', wallet);\n                _context.prev = 11;\n                _context.next = 14;\n                return dispatch('common/env/signIn', accountSigner, {\n                  root: true\n                });\n\n              case 14:\n                client = rootGetters['common/env/signingClient'];\n                commit('SET_ACTIVE_CLIENT', client);\n                commit('SET_SELECTED_ADDRESS', account.address);\n                _context.next = 22;\n                break;\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](11);\n                console.log(_context.t0);\n\n              case 22:\n                dispatch('storeWallets');\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[11, 19]]);\n      }))();\n    },\n    unlockWallet: function unlockWallet(_ref4, _ref5) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var commit, state, dispatch, rootGetters, name, password, encryptedWallet, wallet, accountSigner, client, _yield$accountSigner$3, _yield$accountSigner$4, account;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                commit = _ref4.commit, state = _ref4.state, dispatch = _ref4.dispatch, rootGetters = _ref4.rootGetters;\n                name = _ref5.name, password = _ref5.password;\n                encryptedWallet = state.wallets[state.wallets.findIndex(function (x) {\n                  return x.name === name;\n                })].wallet;\n\n                if (name == 'Keplr Integration') {\n                  wallet = JSON.parse(encryptedWallet);\n                } else {\n                  wallet = JSON.parse(_cryptoJs[\"default\"].AES.decrypt(encryptedWallet, password).toString(_cryptoJs[\"default\"].enc.Utf8));\n                }\n\n                commit('SET_ACTIVE_WALLET', wallet);\n\n                if (!(wallet.accounts.length > 0)) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                if (!(wallet.name == 'Keplr Integration')) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                accountSigner = window.getOfflineSigner(rootGetters['common/env/chainId']);\n                _context2.next = 13;\n                break;\n\n              case 10:\n                _context2.next = 12;\n                return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(wallet.mnemonic, {\n                  hdPaths: [(0, _crypto.stringToPath)(wallet.HDpath + wallet.accounts[0].pathIncrement)],\n                  prefix: wallet.prefix\n                });\n\n              case 12:\n                accountSigner = _context2.sent;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.next = 16;\n                return dispatch('common/env/signIn', accountSigner, {\n                  root: true\n                });\n\n              case 16:\n                client = rootGetters['common/env/signingClient'];\n                commit('SET_ACTIVE_CLIENT', client);\n                _context2.next = 20;\n                return accountSigner.getAccounts();\n\n              case 20:\n                _yield$accountSigner$3 = _context2.sent;\n                _yield$accountSigner$4 = _slicedToArray(_yield$accountSigner$3, 1);\n                account = _yield$accountSigner$4[0];\n                commit('SET_SELECTED_ADDRESS', account.address);\n                _context2.next = 29;\n                break;\n\n              case 26:\n                _context2.prev = 26;\n                _context2.t0 = _context2[\"catch\"](13);\n                console.log(_context2.t0);\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[13, 26]]);\n      }))();\n    },\n    updateRelayers: function updateRelayers(_ref6, relayers) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var commit, dispatch;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                commit = _ref6.commit, dispatch = _ref6.dispatch;\n                commit('SET_RELAYERS', relayers);\n                dispatch('storeWallets');\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    switchAccount: function switchAccount(_ref7, address) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var commit, state, rootGetters, dispatch, accountIndex, accountSigner, client, _yield$accountSigner$5, _yield$accountSigner$6, account;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                commit = _ref7.commit, state = _ref7.state, rootGetters = _ref7.rootGetters, dispatch = _ref7.dispatch;\n                accountIndex = state.activeWallet.accounts.findIndex(function (acc) {\n                  return acc.address == address;\n                });\n                _context4.next = 4;\n                return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(state.activeWallet.mnemonic, {\n                  hdPaths: [(0, _crypto.stringToPath)(state.activeWallet.HDpath + state.activeWallet.accounts[accountIndex].pathIncrement)],\n                  prefix: state.activeWallet.prefix\n                });\n\n              case 4:\n                accountSigner = _context4.sent;\n                _context4.prev = 5;\n                _context4.next = 8;\n                return dispatch('common/env/signIn', accountSigner, {\n                  root: true\n                });\n\n              case 8:\n                client = rootGetters['common/env/signingClient'];\n                commit('SET_ACTIVE_CLIENT', client);\n                _context4.next = 12;\n                return accountSigner.getAccounts();\n\n              case 12:\n                _yield$accountSigner$5 = _context4.sent;\n                _yield$accountSigner$6 = _slicedToArray(_yield$accountSigner$5, 1);\n                account = _yield$accountSigner$6[0];\n                commit('SET_SELECTED_ADDRESS', account.address);\n                _context4.next = 21;\n                break;\n\n              case 18:\n                _context4.prev = 18;\n                _context4.t0 = _context4[\"catch\"](5);\n                console.log(_context4.t0);\n\n              case 21:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[5, 18]]);\n      }))();\n    },\n    addAccount: function addAccount(_ref8, pathIncrement) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var commit, state, dispatch, accountSigner, _yield$accountSigner$7, _yield$accountSigner$8, acc, account;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                commit = _ref8.commit, state = _ref8.state, dispatch = _ref8.dispatch;\n\n                if (!pathIncrement) {\n                  pathIncrement = state.activeWallet.pathIncrement + 1;\n                  commit('PATH_INCREMENT');\n                }\n\n                _context5.next = 4;\n                return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(state.activeWallet.mnemonic, {\n                  hdPaths: [(0, _crypto.stringToPath)(state.activeWallet.HDpath + pathIncrement)],\n                  prefix: state.activeWallet.prefix\n                });\n\n              case 4:\n                accountSigner = _context5.sent;\n                _context5.next = 7;\n                return accountSigner.getAccounts();\n\n              case 7:\n                _yield$accountSigner$7 = _context5.sent;\n                _yield$accountSigner$8 = _slicedToArray(_yield$accountSigner$7, 1);\n                acc = _yield$accountSigner$8[0];\n                account = {\n                  address: acc.address,\n                  pathIncrement: parseInt(pathIncrement)\n                };\n\n                if (!(state.activeWallet.accounts.findIndex(function (acc) {\n                  return acc.address == account.address;\n                }) == -1)) {\n                  _context5.next = 16;\n                  break;\n                }\n\n                commit('ADD_ACCOUNT', account);\n                dispatch('storeWallets');\n                _context5.next = 17;\n                break;\n\n              case 16:\n                throw 'Account already in store.';\n\n              case 17:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    },\n    storeWallets: function storeWallets(_ref9) {\n      var commit = _ref9.commit,\n          state = _ref9.state;\n      window.localStorage.setItem('wallets', JSON.stringify(state.wallets));\n      commit('SET_BACKUP_STATE', false);\n    },\n    signInWithPrivateKey: function signInWithPrivateKey(_ref10, _ref11) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var commit, rootGetters, dispatch, _ref11$prefix, prefix, privKey, pKey, accountSigner, _yield$accountSigner$9, _yield$accountSigner$10, firstAccount, client;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                commit = _ref10.commit, rootGetters = _ref10.rootGetters, dispatch = _ref10.dispatch;\n                _ref11$prefix = _ref11.prefix, prefix = _ref11$prefix === void 0 ? 'cosmos' : _ref11$prefix, privKey = _ref11.privKey;\n                pKey = (0, _keys.keyFromWif)(privKey.trim());\n                _context6.next = 5;\n                return _protoSigning.DirectSecp256k1Wallet.fromKey(pKey, {\n                  prefix: prefix\n                });\n\n              case 5:\n                accountSigner = _context6.sent;\n                _context6.next = 8;\n                return accountSigner.getAccounts();\n\n              case 8:\n                _yield$accountSigner$9 = _context6.sent;\n                _yield$accountSigner$10 = _slicedToArray(_yield$accountSigner$9, 1);\n                firstAccount = _yield$accountSigner$10[0];\n                _context6.prev = 11;\n                _context6.next = 14;\n                return dispatch('common/env/signIn', accountSigner, {\n                  root: true\n                });\n\n              case 14:\n                client = rootGetters['common/env/signingClient'];\n                commit('SET_ACTIVE_CLIENT', client);\n                commit('SET_SELECTED_ADDRESS', firstAccount.address);\n                _context6.next = 22;\n                break;\n\n              case 19:\n                _context6.prev = 19;\n                _context6.t0 = _context6[\"catch\"](11);\n                console.log(_context6.t0);\n\n              case 22:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[11, 19]]);\n      }))();\n    },\n    restoreWallet: function restoreWallet(_ref12, _ref13) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var commit, dispatch, rootGetters, state, encrypted, password, wallet, newName, incr, accountSigner, _yield$accountSigner$11, _yield$accountSigner$12, firstAccount, client;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                commit = _ref12.commit, dispatch = _ref12.dispatch, rootGetters = _ref12.rootGetters, state = _ref12.state;\n                encrypted = _ref13.encrypted, password = _ref13.password;\n                wallet = JSON.parse(_cryptoJs[\"default\"].AES.decrypt(encrypted, password).toString(_cryptoJs[\"default\"].enc.Utf8));\n                newName = wallet.name;\n                incr = 1;\n\n                while (state.wallets.findIndex(function (x) {\n                  return x.name == newName;\n                }) != -1) {\n                  newName = wallet.name + '_' + incr;\n                  incr++;\n                }\n\n                wallet.name = newName;\n                _context7.next = 9;\n                return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(wallet.mnemonic, {\n                  hdPaths: [(0, _crypto.stringToPath)(wallet.HDpath + '0')],\n                  prefix: wallet.prefix\n                });\n\n              case 9:\n                accountSigner = _context7.sent;\n                _context7.next = 12;\n                return accountSigner.getAccounts();\n\n              case 12:\n                _yield$accountSigner$11 = _context7.sent;\n                _yield$accountSigner$12 = _slicedToArray(_yield$accountSigner$11, 1);\n                firstAccount = _yield$accountSigner$12[0];\n                commit('ADD_WALLET', wallet);\n                _context7.prev = 16;\n                _context7.next = 19;\n                return dispatch('common/env/signIn', accountSigner, {\n                  root: true\n                });\n\n              case 19:\n                client = rootGetters['common/env/signingClient'];\n                commit('SET_ACTIVE_CLIENT', client);\n                commit('SET_SELECTED_ADDRESS', firstAccount.address);\n                _context7.next = 27;\n                break;\n\n              case 24:\n                _context7.prev = 24;\n                _context7.t0 = _context7[\"catch\"](16);\n                console.log(_context7.t0);\n\n              case 27:\n                dispatch('storeWallets');\n\n              case 28:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[16, 24]]);\n      }))();\n    },\n    createWalletWithMnemonic: function createWalletWithMnemonic(_ref14, _ref15) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var commit, dispatch, rootGetters, _ref15$name, name, mnemonic, _ref15$HDpath, HDpath, _ref15$prefix, prefix, _ref15$password, password, wallet, accountSigner, _yield$accountSigner$13, _yield$accountSigner$14, firstAccount, account, client;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                commit = _ref14.commit, dispatch = _ref14.dispatch, rootGetters = _ref14.rootGetters;\n                _ref15$name = _ref15.name, name = _ref15$name === void 0 ? null : _ref15$name, mnemonic = _ref15.mnemonic, _ref15$HDpath = _ref15.HDpath, HDpath = _ref15$HDpath === void 0 ? \"m/44'/118'/0'/0/\" : _ref15$HDpath, _ref15$prefix = _ref15.prefix, prefix = _ref15$prefix === void 0 ? 'cosmos' : _ref15$prefix, _ref15$password = _ref15.password, password = _ref15$password === void 0 ? null : _ref15$password;\n                wallet = {\n                  name: name,\n                  mnemonic: mnemonic,\n                  HDpath: HDpath,\n                  password: password,\n                  prefix: prefix,\n                  pathIncrement: 0,\n                  accounts: []\n                };\n                _context8.next = 5;\n                return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n                  hdPaths: [(0, _crypto.stringToPath)(HDpath + '0')],\n                  prefix: prefix\n                });\n\n              case 5:\n                accountSigner = _context8.sent;\n                _context8.next = 8;\n                return accountSigner.getAccounts();\n\n              case 8:\n                _yield$accountSigner$13 = _context8.sent;\n                _yield$accountSigner$14 = _slicedToArray(_yield$accountSigner$13, 1);\n                firstAccount = _yield$accountSigner$14[0];\n                account = {\n                  address: firstAccount.address,\n                  pathIncrement: 0\n                };\n                wallet.accounts.push(account);\n                commit('ADD_WALLET', wallet);\n                _context8.prev = 14;\n                _context8.next = 17;\n                return dispatch('common/env/signIn', accountSigner, {\n                  root: true\n                });\n\n              case 17:\n                client = rootGetters['common/env/signingClient'];\n                commit('SET_ACTIVE_CLIENT', client);\n                commit('SET_SELECTED_ADDRESS', firstAccount.address);\n                _context8.next = 25;\n                break;\n\n              case 22:\n                _context8.prev = 22;\n                _context8.t0 = _context8[\"catch\"](14);\n                console.log(_context8.t0);\n\n              case 25:\n                dispatch('storeWallets');\n\n              case 26:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, null, [[14, 22]]);\n      }))();\n    },\n    sendTransaction: function sendTransaction(_ref16, _ref17) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var state, message, memo, denom, fee, result;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                state = _ref16.state;\n                message = _ref17.message, memo = _ref17.memo, denom = _ref17.denom;\n                fee = {\n                  amount: [{\n                    amount: '0',\n                    denom: denom\n                  }],\n                  gas: '200000'\n                };\n                _context9.prev = 3;\n                console.log({\n                  add: state.selectedAddress,\n                  msg: [message],\n                  fee: fee,\n                  memo: memo\n                });\n                _context9.next = 7;\n                return state.activeClient.signAndBroadcast(state.selectedAddress, [message], fee, memo);\n\n              case 7:\n                result = _context9.sent;\n                (0, _stargate.assertIsBroadcastTxSuccess)(result);\n                _context9.next = 15;\n                break;\n\n              case 11:\n                _context9.prev = 11;\n                _context9.t0 = _context9[\"catch\"](3);\n                console.log(_context9.t0);\n                throw 'Failed to broadcast transaction.' + _context9.t0;\n\n              case 15:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, null, [[3, 11]]);\n      }))();\n    }\n  }\n};\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../../src/modules/common/wallet/wallet.js"],"names":["namespaced","state","wallets","JSON","window","activeWallet","activeClient","selectedAddress","authorized","gasPrice","getters","client","wallet","address","getMnemonic","getPath","x","relayers","nameAvailable","lastWallet","loggedIn","signer","walletName","privKey","mutations","SET_ACTIVE_WALLET","SET_ACTIVE_CLIENT","ADD_WALLET","name","CryptoJS","PATH_INCREMENT","ADD_ACCOUNT","SET_RELAYERS","SET_SELECTED_ADDRESS","SET_BACKUP_STATE","ADD_MESSAGE_TYPE","typeUrl","type","SIGN_OUT","actions","signOut","commit","connectWithKeplr","dispatch","rootGetters","root","mnemonic","HDpath","password","prefix","pathIncrement","accounts","account","accountSigner","console","unlockWallet","encryptedWallet","hdPaths","updateRelayers","switchAccount","accountIndex","acc","addAccount","parseInt","storeWallets","signInWithPrivateKey","pKey","firstAccount","restoreWallet","encrypted","newName","incr","createWalletWithMnemonic","sendTransaction","message","memo","denom","fee","amount","gas","add","msg","result"],"mappings":"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","sourcesContent":["import { DirectSecp256k1HdWallet, DirectSecp256k1Wallet } from '@cosmjs/proto-signing'\n\nimport { assertIsBroadcastTxSuccess } from '@cosmjs/stargate'\nimport { stringToPath } from '@cosmjs/crypto'\nimport CryptoJS from 'crypto-js'\nimport { keyFromWif, keyToWif } from '../../../helpers/keys'\n\n/* START TODO: Integrate closure below for additional security \nfunction getDecryptor(password) {\n\tlet secret = password\n\treturn async function (encryptedMnemonic, HDpath) {\n\t\tconst mnemonic = CryptoJS.AES.decrypt(encryptedMnemonic, secret).toString(\n\t\t\tCryptoJS.enc.Utf8\n\t\t)\n\t\treturn await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, HDpath)\n\t}\n}\nEND TODO */\nexport default {\n\tnamespaced: true,\n\tstate() {\n\t\treturn {\n\t\t\twallets: JSON.parse(window.localStorage.getItem('wallets')) || [],\n\t\t\tactiveWallet: null,\n\t\t\tactiveClient: null,\n\t\t\tselectedAddress: '',\n\t\t\tauthorized: false,\n\t\t\tgasPrice: '0.0000025token',\n\t\t}\n\t},\n\tgetters: {\n\t\tclient: (state) => state.activeClient,\n\t\tgasPrice: (state) => state.gasPrice,\n\t\twallet: (state) => state.activeWallet,\n\t\taddress: (state) => state.selectedAddress,\n\t\tgetMnemonic: (state) => state.activeWallet.mnemonic,\n\t\tgetPath: (state) =>\n\t\t\tstate.activeWallet?.HDpath +\n\t\t\tstate.activeWallet?.accounts.find((x) => x.address == state.selectedAddress).pathIncrement,\n\t\trelayers: (state) => {\n\t\t\treturn state.activeWallet?.accounts.find((x) => x.address == state.selectedAddress).relayers ?? []\n\t\t},\n\t\tnameAvailable: (state) => (name) => {\n\t\t\treturn state.wallets.findIndex((x) => x.name == name) == -1\n\t\t},\n\t\tlastWallet: (state) => {\n\t\t\tif (state.activeWallet) {\n\t\t\t\treturn state.activeWallet.name\n\t\t\t} else {\n\t\t\t\treturn window.localStorage.getItem('lastWallet')\n\t\t\t}\n\t\t},\n\t\tloggedIn: (state) => state.activeClient !== null,\n\t\tsigner: (state) => {\n\t\t\tif (state.activeClient) {\n\t\t\t\treturn state.activeClient.signer\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t},\n\t\twalletName: (state) => (state.activeWallet ? state.activeWallet.name : null),\n\t\tprivKey: (state) => {\n\t\t\tif (state.activeClient) {\n\t\t\t\treturn keyToWif(state.activeClient.signer.privkey)\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t},\n\t},\n\tmutations: {\n\t\tSET_ACTIVE_WALLET(state, wallet) {\n\t\t\tstate.activeWallet = wallet\n\t\t\twindow.localStorage.setItem('lastWallet', wallet.name)\n\t\t},\n\t\tSET_ACTIVE_CLIENT(state, client) {\n\t\t\tstate.activeClient = client\n\t\t\tstate.authorized = true\n\t\t},\n\t\tADD_WALLET(state, wallet) {\n\t\t\tstate.activeWallet = wallet\n\t\t\twindow.localStorage.setItem('lastWallet', wallet.name)\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\n\t\t\t\tstate.wallets.push({\n\t\t\t\t\tname: state.activeWallet.name,\n\t\t\t\t\twallet: CryptoJS.AES.encrypt(JSON.stringify(state.activeWallet), state.activeWallet.password).toString(),\n\t\t\t\t})\n\t\t\t}\n\t\t\tif (state.activeWallet.name == 'Keplr Integration' && !state.activeWallet.password) {\n\t\t\t\tstate.wallets.push({\n\t\t\t\t\tname: state.activeWallet.name,\n\t\t\t\t\twallet: JSON.stringify(state.activeWallet),\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tPATH_INCREMENT(state) {\n\t\t\tstate.activeWallet.pathIncrement = state.activeWallet.pathIncrement + 1\n\t\t},\n\t\tADD_ACCOUNT(state, account) {\n\t\t\tstate.activeWallet.accounts.push(account)\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\n\t\t\t\tstate.wallets[state.wallets.findIndex((x) => x.name === state.activeWallet.name)].wallet = CryptoJS.AES.encrypt(\n\t\t\t\t\tJSON.stringify(state.activeWallet),\n\t\t\t\t\tstate.activeWallet.password,\n\t\t\t\t).toString()\n\t\t\t}\n\t\t},\n\t\tSET_RELAYERS(state, relayers) {\n\t\t\tstate.activeWallet.accounts.find((x) => x.address == state.selectedAddress).relayers = relayers\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\n\t\t\t\tstate.wallets[state.wallets.findIndex((x) => x.name === state.activeWallet.name)].wallet = CryptoJS.AES.encrypt(\n\t\t\t\t\tJSON.stringify(state.activeWallet),\n\t\t\t\t\tstate.activeWallet.password,\n\t\t\t\t).toString()\n\t\t\t}\n\t\t},\n\t\tSET_SELECTED_ADDRESS(state, address) {\n\t\t\tstate.selectedAddress = address\n\t\t},\n\t\tSET_BACKUP_STATE(state, backupState) {\n\t\t\tstate.backupState = backupState\n\t\t},\n\t\tADD_MESSAGE_TYPE(state, { typeUrl, type }) {\n\t\t\tstate.activeClient.registry.register(typeUrl, type)\n\t\t},\n\t\tSIGN_OUT(state) {\n\t\t\tstate.selectedAddress = ''\n\t\t\tstate.activeClient = null\n\t\t\tstate.activeWallet = null\n\t\t\tstate.authorized = false\n\t\t},\n\t},\n\tactions: {\n\t\tsignOut({ commit }) {\n\t\t\tcommit('SIGN_OUT')\n\t\t},\n\t\tasync connectWithKeplr({ commit, dispatch, rootGetters }, accountSigner) {\n\t\t\tawait dispatch('common/env/signIn', accountSigner, {\n\t\t\t\troot: true,\n\t\t\t})\n\n\t\t\tconst wallet = {\n\t\t\t\tname: 'Keplr Integration',\n\t\t\t\tmnemonic: null,\n\t\t\t\tHDpath: null,\n\t\t\t\tpassword: null,\n\t\t\t\tprefix: rootGetters['common/env/addrPrefix'],\n\t\t\t\tpathIncrement: null,\n\t\t\t\taccounts: [],\n\t\t\t}\n\t\t\tconst [account] = await accountSigner.getAccounts()\n\t\t\twallet.accounts.push({ address: account.address, pathIncrement: null })\n\t\t\tcommit('ADD_WALLET', wallet)\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync unlockWallet({ commit, state, dispatch, rootGetters }, { name, password }) {\n\t\t\tconst encryptedWallet = state.wallets[state.wallets.findIndex((x) => x.name === name)].wallet\n\t\t\tlet wallet\n\t\t\tif (name == 'Keplr Integration') {\n\t\t\t\twallet = JSON.parse(encryptedWallet)\n\t\t\t} else {\n\t\t\t\twallet = JSON.parse(CryptoJS.AES.decrypt(encryptedWallet, password).toString(CryptoJS.enc.Utf8))\n\t\t\t}\n\t\t\tcommit('SET_ACTIVE_WALLET', wallet)\n\t\t\tif (wallet.accounts.length > 0) {\n\t\t\t\tlet accountSigner\n\t\t\t\tif (wallet.name == 'Keplr Integration') {\n\t\t\t\t\taccountSigner = window.getOfflineSigner(rootGetters['common/env/chainId'])\n\t\t\t\t} else {\n\t\t\t\t\taccountSigner = await DirectSecp256k1HdWallet.fromMnemonic(wallet.mnemonic, {\n\t\t\t\t\t\thdPaths: [stringToPath(wallet.HDpath + wallet.accounts[0].pathIncrement)],\n\t\t\t\t\t\tprefix: wallet.prefix,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tawait dispatch('common/env/signIn', accountSigner, {\n\t\t\t\t\t\troot: true,\n\t\t\t\t\t})\n\t\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\t\tconst [account] = await accountSigner.getAccounts()\n\t\t\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tasync updateRelayers({ commit, dispatch }, relayers) {\n\t\t\tcommit('SET_RELAYERS', relayers)\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync switchAccount({ commit, state, rootGetters, dispatch }, address) {\n\t\t\tconst accountIndex = state.activeWallet.accounts.findIndex((acc) => acc.address == address)\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(state.activeWallet.mnemonic, {\n\t\t\t\thdPaths: [stringToPath(state.activeWallet.HDpath + state.activeWallet.accounts[accountIndex].pathIncrement)],\n\t\t\t\tprefix: state.activeWallet.prefix,\n\t\t\t})\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tconst [account] = await accountSigner.getAccounts()\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t},\n\t\tasync addAccount({ commit, state, dispatch }, pathIncrement) {\n\t\t\tif (!pathIncrement) {\n\t\t\t\tpathIncrement = state.activeWallet.pathIncrement + 1\n\t\t\t\tcommit('PATH_INCREMENT')\n\t\t\t}\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(state.activeWallet.mnemonic, {\n\t\t\t\thdPaths: [stringToPath(state.activeWallet.HDpath + pathIncrement)],\n\t\t\t\tprefix: state.activeWallet.prefix,\n\t\t\t})\n\t\t\tconst [acc] = await accountSigner.getAccounts()\n\t\t\tconst account = {\n\t\t\t\taddress: acc.address,\n\t\t\t\tpathIncrement: parseInt(pathIncrement),\n\t\t\t}\n\t\t\tif (state.activeWallet.accounts.findIndex((acc) => acc.address == account.address) == -1) {\n\t\t\t\tcommit('ADD_ACCOUNT', account)\n\t\t\t\tdispatch('storeWallets')\n\t\t\t} else {\n\t\t\t\tthrow 'Account already in store.'\n\t\t\t}\n\t\t},\n\t\tstoreWallets({ commit, state }) {\n\t\t\twindow.localStorage.setItem('wallets', JSON.stringify(state.wallets))\n\t\t\tcommit('SET_BACKUP_STATE', false)\n\t\t},\n\t\tasync signInWithPrivateKey({ commit, rootGetters, dispatch }, { prefix = 'cosmos', privKey }) {\n\t\t\tconst pKey = keyFromWif(privKey.trim())\n\t\t\tconst accountSigner = await DirectSecp256k1Wallet.fromKey(pKey, { prefix })\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t},\n\t\tasync restoreWallet({ commit, dispatch, rootGetters, state }, { encrypted, password }) {\n\t\t\tconst wallet = JSON.parse(CryptoJS.AES.decrypt(encrypted, password).toString(CryptoJS.enc.Utf8))\n\t\t\tlet newName = wallet.name\n\t\t\tlet incr = 1\n\t\t\twhile (state.wallets.findIndex((x) => x.name == newName) != -1) {\n\t\t\t\tnewName = wallet.name + '_' + incr\n\t\t\t\tincr++\n\t\t\t}\n\t\t\twallet.name = newName\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(wallet.mnemonic, {\n\t\t\t\thdPaths: [stringToPath(wallet.HDpath + '0')],\n\t\t\t\tprefix: wallet.prefix,\n\t\t\t})\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\n\t\t\tcommit('ADD_WALLET', wallet)\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync createWalletWithMnemonic(\n\t\t\t{ commit, dispatch, rootGetters },\n\t\t\t{ name = null, mnemonic, HDpath = \"m/44'/118'/0'/0/\", prefix = 'cosmos', password = null },\n\t\t) {\n\t\t\tconst wallet = {\n\t\t\t\tname,\n\t\t\t\tmnemonic,\n\t\t\t\tHDpath,\n\t\t\t\tpassword,\n\t\t\t\tprefix,\n\t\t\t\tpathIncrement: 0,\n\t\t\t\taccounts: [],\n\t\t\t}\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n\t\t\t\thdPaths: [stringToPath(HDpath + '0')],\n\t\t\t\tprefix,\n\t\t\t})\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\n\t\t\tconst account = { address: firstAccount.address, pathIncrement: 0 }\n\t\t\twallet.accounts.push(account)\n\t\t\tcommit('ADD_WALLET', wallet)\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync sendTransaction({ state }, { message, memo, denom }) {\n\t\t\tconst fee = {\n\t\t\t\tamount: [{ amount: '0', denom }],\n\t\t\t\tgas: '200000',\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconsole.log({\n\t\t\t\t\tadd: state.selectedAddress,\n\t\t\t\t\tmsg: [message],\n\t\t\t\t\tfee,\n\t\t\t\t\tmemo,\n\t\t\t\t})\n\t\t\t\tconst result = await state.activeClient.signAndBroadcast(state.selectedAddress, [message], fee, memo)\n\t\t\t\tassertIsBroadcastTxSuccess(result)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t\tthrow 'Failed to broadcast transaction.' + e\n\t\t\t}\n\t\t},\n\t},\n}\n"]},"metadata":{},"sourceType":"script"}