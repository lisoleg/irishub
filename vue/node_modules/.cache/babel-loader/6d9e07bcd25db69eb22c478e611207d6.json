{"ast":null,"code":"import { txClient, queryClient, MissingWalletError, registry } from './module'; // @ts-ignore\n\nimport { SpVuexError } from '@starport/vuex';\nimport { Input } from \"./module/types/coinswap/coinswap\";\nimport { Output } from \"./module/types/coinswap/coinswap\";\nimport { Pool } from \"./module/types/coinswap/coinswap\";\nimport { Params } from \"./module/types/coinswap/coinswap\";\nimport { PoolInfo } from \"./module/types/coinswap/query\";\nexport { Input, Output, Pool, Params, PoolInfo };\n\nasync function initTxClient(vuexGetters) {\n  return await txClient(vuexGetters['common/wallet/signer'], {\n    addr: vuexGetters['common/env/apiTendermint']\n  });\n}\n\nasync function initQueryClient(vuexGetters) {\n  return await queryClient({\n    addr: vuexGetters['common/env/apiCosmos']\n  });\n}\n\nfunction mergeResults(value, next_values) {\n  for (let prop of Object.keys(next_values)) {\n    if (Array.isArray(next_values[prop])) {\n      value[prop] = [...value[prop], ...next_values[prop]];\n    } else {\n      value[prop] = next_values[prop];\n    }\n  }\n\n  return value;\n}\n\nfunction getStructure(template) {\n  let structure = {\n    fields: []\n  };\n\n  for (const [key, value] of Object.entries(template)) {\n    let field = {};\n    field.name = key;\n    field.type = typeof value;\n    structure.fields.push(field);\n  }\n\n  return structure;\n}\n\nconst getDefaultState = () => {\n  return {\n    LiquidityPools: {},\n    LiquidityPool: {},\n    _Structure: {\n      Input: getStructure(Input.fromPartial({})),\n      Output: getStructure(Output.fromPartial({})),\n      Pool: getStructure(Pool.fromPartial({})),\n      Params: getStructure(Params.fromPartial({})),\n      PoolInfo: getStructure(PoolInfo.fromPartial({}))\n    },\n    _Registry: registry,\n    _Subscriptions: new Set()\n  };\n}; // initial state\n\n\nconst state = getDefaultState();\nexport default {\n  namespaced: true,\n  state,\n  mutations: {\n    RESET_STATE(state) {\n      Object.assign(state, getDefaultState());\n    },\n\n    QUERY(state, {\n      query,\n      key,\n      value\n    }) {\n      state[query][JSON.stringify(key)] = value;\n    },\n\n    SUBSCRIBE(state, subscription) {\n      state._Subscriptions.add(JSON.stringify(subscription));\n    },\n\n    UNSUBSCRIBE(state, subscription) {\n      state._Subscriptions.delete(JSON.stringify(subscription));\n    }\n\n  },\n  getters: {\n    getLiquidityPools: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.LiquidityPools[JSON.stringify(params)] ?? {};\n    },\n    getLiquidityPool: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.LiquidityPool[JSON.stringify(params)] ?? {};\n    },\n    getTypeStructure: state => type => {\n      return state._Structure[type].fields;\n    },\n    getRegistry: state => {\n      return state._Registry;\n    }\n  },\n  actions: {\n    init({\n      dispatch,\n      rootGetters\n    }) {\n      console.log('Vuex module: irismod.coinswap initialized!');\n\n      if (rootGetters['common/env/client']) {\n        rootGetters['common/env/client'].on('newblock', () => {\n          dispatch('StoreUpdate');\n        });\n      }\n    },\n\n    resetState({\n      commit\n    }) {\n      commit('RESET_STATE');\n    },\n\n    unsubscribe({\n      commit\n    }, subscription) {\n      commit('UNSUBSCRIBE', subscription);\n    },\n\n    async StoreUpdate({\n      state,\n      dispatch\n    }) {\n      state._Subscriptions.forEach(async subscription => {\n        try {\n          const sub = JSON.parse(subscription);\n          await dispatch(sub.action, sub.payload);\n        } catch (e) {\n          throw new SpVuexError('Subscriptions: ' + e.message);\n        }\n      });\n    },\n\n    async QueryLiquidityPools({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryLiquidityPools(query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryLiquidityPools({ ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'LiquidityPools',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryLiquidityPools',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getLiquidityPools']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryLiquidityPools', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryLiquidityPool({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryLiquidityPool(key.lpt_denom)).data;\n        commit('QUERY', {\n          query: 'LiquidityPool',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryLiquidityPool',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getLiquidityPool']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryLiquidityPool', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async sendMsgRemoveLiquidity({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgRemoveLiquidity(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgRemoveLiquidity:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgRemoveLiquidity:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgSwapOrder({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgSwapOrder(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgSwapOrder:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgSwapOrder:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgAddLiquidity({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgAddLiquidity(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgAddLiquidity:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgAddLiquidity:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async MsgRemoveLiquidity({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgRemoveLiquidity(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgRemoveLiquidity:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgRemoveLiquidity:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgSwapOrder({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgSwapOrder(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgSwapOrder:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgSwapOrder:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgAddLiquidity({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgAddLiquidity(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgAddLiquidity:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgAddLiquidity:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/lisoleg/cosmos/irisnet/irishub/vue/src/store/generated/alice/checkers/irismod.coinswap/index.js"],"names":["txClient","queryClient","MissingWalletError","registry","SpVuexError","Input","Output","Pool","Params","PoolInfo","initTxClient","vuexGetters","addr","initQueryClient","mergeResults","value","next_values","prop","Object","keys","Array","isArray","getStructure","template","structure","fields","key","entries","field","name","type","push","getDefaultState","LiquidityPools","LiquidityPool","_Structure","fromPartial","_Registry","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","delete","getters","getLiquidityPools","params","getLiquidityPool","getTypeStructure","getRegistry","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","sub","parse","action","payload","e","message","QueryLiquidityPools","options","subscribe","all","queryLiquidityPools","data","pagination","next_key","QueryLiquidityPool","queryLiquidityPool","lpt_denom","sendMsgRemoveLiquidity","fee","memo","msg","msgRemoveLiquidity","result","signAndBroadcast","amount","gas","sendMsgSwapOrder","msgSwapOrder","sendMsgAddLiquidity","msgAddLiquidity","MsgRemoveLiquidity","MsgSwapOrder","MsgAddLiquidity"],"mappings":"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","sourcesContent":["import { txClient, queryClient, MissingWalletError, registry } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { Input } from \"./module/types/coinswap/coinswap\";\nimport { Output } from \"./module/types/coinswap/coinswap\";\nimport { Pool } from \"./module/types/coinswap/coinswap\";\nimport { Params } from \"./module/types/coinswap/coinswap\";\nimport { PoolInfo } from \"./module/types/coinswap/query\";\nexport { Input, Output, Pool, Params, PoolInfo };\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction mergeResults(value, next_values) {\n    for (let prop of Object.keys(next_values)) {\n        if (Array.isArray(next_values[prop])) {\n            value[prop] = [...value[prop], ...next_values[prop]];\n        }\n        else {\n            value[prop] = next_values[prop];\n        }\n    }\n    return value;\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        LiquidityPools: {},\n        LiquidityPool: {},\n        _Structure: {\n            Input: getStructure(Input.fromPartial({})),\n            Output: getStructure(Output.fromPartial({})),\n            Pool: getStructure(Pool.fromPartial({})),\n            Params: getStructure(Params.fromPartial({})),\n            PoolInfo: getStructure(PoolInfo.fromPartial({})),\n        },\n        _Registry: registry,\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(JSON.stringify(subscription));\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(JSON.stringify(subscription));\n        }\n    },\n    getters: {\n        getLiquidityPools: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.LiquidityPools[JSON.stringify(params)] ?? {};\n        },\n        getLiquidityPool: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.LiquidityPool[JSON.stringify(params)] ?? {};\n        },\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        },\n        getRegistry: (state) => {\n            return state._Registry;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('Vuex module: irismod.coinswap initialized!');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach(async (subscription) => {\n                try {\n                    const sub = JSON.parse(subscription);\n                    await dispatch(sub.action, sub.payload);\n                }\n                catch (e) {\n                    throw new SpVuexError('Subscriptions: ' + e.message);\n                }\n            });\n        },\n        async QueryLiquidityPools({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryLiquidityPools(query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryLiquidityPools({ ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'LiquidityPools', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryLiquidityPools', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getLiquidityPools']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryLiquidityPools', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryLiquidityPool({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryLiquidityPool(key.lpt_denom)).data;\n                commit('QUERY', { query: 'LiquidityPool', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryLiquidityPool', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getLiquidityPool']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryLiquidityPool', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async sendMsgRemoveLiquidity({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgRemoveLiquidity(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgRemoveLiquidity:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgRemoveLiquidity:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgSwapOrder({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgSwapOrder(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgSwapOrder:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSwapOrder:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgAddLiquidity({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgAddLiquidity(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgAddLiquidity:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgAddLiquidity:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async MsgRemoveLiquidity({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgRemoveLiquidity(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgRemoveLiquidity:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgRemoveLiquidity:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgSwapOrder({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgSwapOrder(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgSwapOrder:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSwapOrder:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgAddLiquidity({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgAddLiquidity(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgAddLiquidity:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgAddLiquidity:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n    }\n};\n"]},"metadata":{},"sourceType":"module"}