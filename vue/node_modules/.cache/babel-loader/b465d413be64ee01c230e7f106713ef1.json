{"ast":null,"code":"import { txClient, queryClient, MissingWalletError, registry } from './module'; // @ts-ignore\n\nimport { SpVuexError } from '@starport/vuex';\nimport { BaseVestingAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { ContinuousVestingAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { DelayedVestingAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { Period } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { PeriodicVestingAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { PermanentLockedAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nexport { BaseVestingAccount, ContinuousVestingAccount, DelayedVestingAccount, Period, PeriodicVestingAccount, PermanentLockedAccount };\n\nasync function initTxClient(vuexGetters) {\n  return await txClient(vuexGetters['common/wallet/signer'], {\n    addr: vuexGetters['common/env/apiTendermint']\n  });\n}\n\nasync function initQueryClient(vuexGetters) {\n  return await queryClient({\n    addr: vuexGetters['common/env/apiCosmos']\n  });\n}\n\nfunction mergeResults(value, next_values) {\n  for (let prop of Object.keys(next_values)) {\n    if (Array.isArray(next_values[prop])) {\n      value[prop] = [...value[prop], ...next_values[prop]];\n    } else {\n      value[prop] = next_values[prop];\n    }\n  }\n\n  return value;\n}\n\nfunction getStructure(template) {\n  let structure = {\n    fields: []\n  };\n\n  for (const [key, value] of Object.entries(template)) {\n    let field = {};\n    field.name = key;\n    field.type = typeof value;\n    structure.fields.push(field);\n  }\n\n  return structure;\n}\n\nconst getDefaultState = () => {\n  return {\n    _Structure: {\n      BaseVestingAccount: getStructure(BaseVestingAccount.fromPartial({})),\n      ContinuousVestingAccount: getStructure(ContinuousVestingAccount.fromPartial({})),\n      DelayedVestingAccount: getStructure(DelayedVestingAccount.fromPartial({})),\n      Period: getStructure(Period.fromPartial({})),\n      PeriodicVestingAccount: getStructure(PeriodicVestingAccount.fromPartial({})),\n      PermanentLockedAccount: getStructure(PermanentLockedAccount.fromPartial({}))\n    },\n    _Registry: registry,\n    _Subscriptions: new Set()\n  };\n}; // initial state\n\n\nconst state = getDefaultState();\nexport default {\n  namespaced: true,\n  state,\n  mutations: {\n    RESET_STATE(state) {\n      Object.assign(state, getDefaultState());\n    },\n\n    QUERY(state, {\n      query,\n      key,\n      value\n    }) {\n      state[query][JSON.stringify(key)] = value;\n    },\n\n    SUBSCRIBE(state, subscription) {\n      state._Subscriptions.add(JSON.stringify(subscription));\n    },\n\n    UNSUBSCRIBE(state, subscription) {\n      state._Subscriptions.delete(JSON.stringify(subscription));\n    }\n\n  },\n  getters: {\n    getTypeStructure: state => type => {\n      return state._Structure[type].fields;\n    },\n    getRegistry: state => {\n      return state._Registry;\n    }\n  },\n  actions: {\n    init({\n      dispatch,\n      rootGetters\n    }) {\n      console.log('Vuex module: cosmos.vesting.v1beta1 initialized!');\n\n      if (rootGetters['common/env/client']) {\n        rootGetters['common/env/client'].on('newblock', () => {\n          dispatch('StoreUpdate');\n        });\n      }\n    },\n\n    resetState({\n      commit\n    }) {\n      commit('RESET_STATE');\n    },\n\n    unsubscribe({\n      commit\n    }, subscription) {\n      commit('UNSUBSCRIBE', subscription);\n    },\n\n    async StoreUpdate({\n      state,\n      dispatch\n    }) {\n      state._Subscriptions.forEach(async subscription => {\n        try {\n          const sub = JSON.parse(subscription);\n          await dispatch(sub.action, sub.payload);\n        } catch (e) {\n          throw new SpVuexError('Subscriptions: ' + e.message);\n        }\n      });\n    },\n\n    async sendMsgCreateVestingAccount({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgCreateVestingAccount(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgCreateVestingAccount:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgCreateVestingAccount:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async MsgCreateVestingAccount({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgCreateVestingAccount(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgCreateVestingAccount:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgCreateVestingAccount:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/lisoleg/cosmos/irisnet/irishub/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.vesting.v1beta1/index.js"],"names":["txClient","queryClient","MissingWalletError","registry","SpVuexError","BaseVestingAccount","ContinuousVestingAccount","DelayedVestingAccount","Period","PeriodicVestingAccount","PermanentLockedAccount","initTxClient","vuexGetters","addr","initQueryClient","mergeResults","value","next_values","prop","Object","keys","Array","isArray","getStructure","template","structure","fields","key","entries","field","name","type","push","getDefaultState","_Structure","fromPartial","_Registry","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","delete","getters","getTypeStructure","getRegistry","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","sub","parse","action","payload","e","message","sendMsgCreateVestingAccount","fee","memo","msg","msgCreateVestingAccount","result","signAndBroadcast","amount","gas","MsgCreateVestingAccount"],"mappings":"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","sourcesContent":["import { txClient, queryClient, MissingWalletError, registry } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { BaseVestingAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { ContinuousVestingAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { DelayedVestingAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { Period } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { PeriodicVestingAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { PermanentLockedAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nexport { BaseVestingAccount, ContinuousVestingAccount, DelayedVestingAccount, Period, PeriodicVestingAccount, PermanentLockedAccount };\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction mergeResults(value, next_values) {\n    for (let prop of Object.keys(next_values)) {\n        if (Array.isArray(next_values[prop])) {\n            value[prop] = [...value[prop], ...next_values[prop]];\n        }\n        else {\n            value[prop] = next_values[prop];\n        }\n    }\n    return value;\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        _Structure: {\n            BaseVestingAccount: getStructure(BaseVestingAccount.fromPartial({})),\n            ContinuousVestingAccount: getStructure(ContinuousVestingAccount.fromPartial({})),\n            DelayedVestingAccount: getStructure(DelayedVestingAccount.fromPartial({})),\n            Period: getStructure(Period.fromPartial({})),\n            PeriodicVestingAccount: getStructure(PeriodicVestingAccount.fromPartial({})),\n            PermanentLockedAccount: getStructure(PermanentLockedAccount.fromPartial({})),\n        },\n        _Registry: registry,\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(JSON.stringify(subscription));\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(JSON.stringify(subscription));\n        }\n    },\n    getters: {\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        },\n        getRegistry: (state) => {\n            return state._Registry;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('Vuex module: cosmos.vesting.v1beta1 initialized!');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach(async (subscription) => {\n                try {\n                    const sub = JSON.parse(subscription);\n                    await dispatch(sub.action, sub.payload);\n                }\n                catch (e) {\n                    throw new SpVuexError('Subscriptions: ' + e.message);\n                }\n            });\n        },\n        async sendMsgCreateVestingAccount({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgCreateVestingAccount(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgCreateVestingAccount:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateVestingAccount:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async MsgCreateVestingAccount({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgCreateVestingAccount(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgCreateVestingAccount:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateVestingAccount:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n    }\n};\n"]},"metadata":{},"sourceType":"module"}