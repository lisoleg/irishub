{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseCoins = exports.coins = exports.coin = void 0;\n\nconst math_1 = require(\"@cosmjs/math\");\n/**\n * Creates a coin.\n *\n * If your values do not exceed the safe integer range of JS numbers (53 bit),\n * you can use the number type here. This is the case for all typical Cosmos SDK\n * chains that use the default 6 decimals.\n *\n * In case you need to supportr larger values, use unsigned integer strings instead.\n */\n\n\nfunction coin(amount, denom) {\n  let outAmount;\n\n  if (typeof amount === \"number\") {\n    try {\n      outAmount = new math_1.Uint53(amount).toString();\n    } catch (_err) {\n      throw new Error(\"Given amount is not a safe integer. Consider using a string instead to overcome the limitations of JS numbers.\");\n    }\n  } else {\n    if (!amount.match(/^[0-9]+$/)) {\n      throw new Error(\"Invalid unsigned integer string format\");\n    }\n\n    outAmount = amount.replace(/^0*/, \"\") || \"0\";\n  }\n\n  return {\n    amount: outAmount,\n    denom: denom\n  };\n}\n\nexports.coin = coin;\n/**\n * Creates a list of coins with one element.\n */\n\nfunction coins(amount, denom) {\n  return [coin(amount, denom)];\n}\n\nexports.coins = coins;\n/**\n * Takes a coins list like \"819966000ucosm,700000000ustake\" and parses it.\n *\n * A Stargate-ready variant of this function is available via:\n *\n * ```\n * import { parseCoins } from \"@cosmjs/proto-signing\";\n * // or\n * import { parseCoins } from \"@cosmjs/stargate\";\n * ```\n */\n\nfunction parseCoins(input) {\n  return input.replace(/\\s/g, \"\").split(\",\").filter(Boolean).map(part => {\n    const match = part.match(/^([0-9]+)([a-zA-Z]+)/);\n    if (!match) throw new Error(\"Got an invalid coin string\");\n    return {\n      amount: math_1.Uint64.fromString(match[1]).toString(),\n      denom: match[2]\n    };\n  });\n}\n\nexports.parseCoins = parseCoins;","map":{"version":3,"sources":["../src/coins.ts"],"names":[],"mappings":";;;;;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAOA;;;;;;;;AAQG;;;AACH,SAAgB,IAAhB,CAAqB,MAArB,EAA8C,KAA9C,EAA2D;AACzD,MAAI,SAAJ;;AACA,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,QAAI;AACF,MAAA,SAAS,GAAG,IAAI,MAAA,CAAA,MAAJ,CAAW,MAAX,EAAmB,QAAnB,EAAZ;AACD,KAFD,CAEE,OAAO,IAAP,EAAa;AACb,YAAM,IAAI,KAAJ,CACJ,gHADI,CAAN;AAGD;AACF,GARD,MAQO;AACL,QAAI,CAAC,MAAM,CAAC,KAAP,CAAa,UAAb,CAAL,EAA+B;AAC7B,YAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACD;;AACD,IAAA,SAAS,GAAG,MAAM,CAAC,OAAP,CAAe,KAAf,EAAsB,EAAtB,KAA6B,GAAzC;AACD;;AACD,SAAO;AACL,IAAA,MAAM,EAAE,SADH;AAEL,IAAA,KAAK,EAAE;AAFF,GAAP;AAID;;AApBD,OAAA,CAAA,IAAA,GAAA,IAAA;AAsBA;;AAEG;;AACH,SAAgB,KAAhB,CAAsB,MAAtB,EAA+C,KAA/C,EAA4D;AAC1D,SAAO,CAAC,IAAI,CAAC,MAAD,EAAS,KAAT,CAAL,CAAP;AACD;;AAFD,OAAA,CAAA,KAAA,GAAA,KAAA;AAIA;;;;;;;;;;AAUG;;AACH,SAAgB,UAAhB,CAA2B,KAA3B,EAAwC;AACtC,SAAO,KAAK,CACT,OADI,CACI,KADJ,EACW,EADX,EAEJ,KAFI,CAEE,GAFF,EAGJ,MAHI,CAGG,OAHH,EAIJ,GAJI,CAIC,IAAD,IAAS;AACZ,UAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,sBAAX,CAAd;AACA,QAAI,CAAC,KAAL,EAAY,MAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACZ,WAAO;AACL,MAAA,MAAM,EAAE,MAAA,CAAA,MAAA,CAAO,UAAP,CAAkB,KAAK,CAAC,CAAD,CAAvB,EAA4B,QAA5B,EADH;AAEL,MAAA,KAAK,EAAE,KAAK,CAAC,CAAD;AAFP,KAAP;AAID,GAXI,CAAP;AAYD;;AAbD,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseCoins = exports.coins = exports.coin = void 0;\nconst math_1 = require(\"@cosmjs/math\");\n/**\n * Creates a coin.\n *\n * If your values do not exceed the safe integer range of JS numbers (53 bit),\n * you can use the number type here. This is the case for all typical Cosmos SDK\n * chains that use the default 6 decimals.\n *\n * In case you need to supportr larger values, use unsigned integer strings instead.\n */\nfunction coin(amount, denom) {\n    let outAmount;\n    if (typeof amount === \"number\") {\n        try {\n            outAmount = new math_1.Uint53(amount).toString();\n        }\n        catch (_err) {\n            throw new Error(\"Given amount is not a safe integer. Consider using a string instead to overcome the limitations of JS numbers.\");\n        }\n    }\n    else {\n        if (!amount.match(/^[0-9]+$/)) {\n            throw new Error(\"Invalid unsigned integer string format\");\n        }\n        outAmount = amount.replace(/^0*/, \"\") || \"0\";\n    }\n    return {\n        amount: outAmount,\n        denom: denom,\n    };\n}\nexports.coin = coin;\n/**\n * Creates a list of coins with one element.\n */\nfunction coins(amount, denom) {\n    return [coin(amount, denom)];\n}\nexports.coins = coins;\n/**\n * Takes a coins list like \"819966000ucosm,700000000ustake\" and parses it.\n *\n * A Stargate-ready variant of this function is available via:\n *\n * ```\n * import { parseCoins } from \"@cosmjs/proto-signing\";\n * // or\n * import { parseCoins } from \"@cosmjs/stargate\";\n * ```\n */\nfunction parseCoins(input) {\n    return input\n        .replace(/\\s/g, \"\")\n        .split(\",\")\n        .filter(Boolean)\n        .map((part) => {\n        const match = part.match(/^([0-9]+)([a-zA-Z]+)/);\n        if (!match)\n            throw new Error(\"Got an invalid coin string\");\n        return {\n            amount: math_1.Uint64.fromString(match[1]).toString(),\n            denom: match[2],\n        };\n    });\n}\nexports.parseCoins = parseCoins;\n//# sourceMappingURL=coins.js.map"]},"metadata":{},"sourceType":"script"}