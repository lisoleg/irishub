{"ast":null,"code":"/* eslint-disable */\n\n/* tslint:disable */\n\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\nexport var ContentType;\n\n(function (ContentType) {\n  ContentType[\"Json\"] = \"application/json\";\n  ContentType[\"FormData\"] = \"multipart/form-data\";\n  ContentType[\"UrlEncoded\"] = \"application/x-www-form-urlencoded\";\n})(ContentType || (ContentType = {}));\n\nexport class HttpClient {\n  constructor(apiConfig = {}) {\n    this.baseUrl = \"\";\n    this.securityData = null;\n    this.securityWorker = null;\n    this.abortControllers = new Map();\n    this.baseApiParams = {\n      credentials: \"same-origin\",\n      headers: {},\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\"\n    };\n\n    this.setSecurityData = data => {\n      this.securityData = data;\n    };\n\n    this.contentFormatters = {\n      [ContentType.Json]: input => input !== null && (typeof input === \"object\" || typeof input === \"string\") ? JSON.stringify(input) : input,\n      [ContentType.FormData]: input => Object.keys(input || {}).reduce((data, key) => {\n        data.append(key, input[key]);\n        return data;\n      }, new FormData()),\n      [ContentType.UrlEncoded]: input => this.toQueryString(input)\n    };\n\n    this.createAbortSignal = cancelToken => {\n      if (this.abortControllers.has(cancelToken)) {\n        const abortController = this.abortControllers.get(cancelToken);\n\n        if (abortController) {\n          return abortController.signal;\n        }\n\n        return void 0;\n      }\n\n      const abortController = new AbortController();\n      this.abortControllers.set(cancelToken, abortController);\n      return abortController.signal;\n    };\n\n    this.abortRequest = cancelToken => {\n      const abortController = this.abortControllers.get(cancelToken);\n\n      if (abortController) {\n        abortController.abort();\n        this.abortControllers.delete(cancelToken);\n      }\n    };\n\n    this.request = ({\n      body,\n      secure,\n      path,\n      type,\n      query,\n      format = \"json\",\n      baseUrl,\n      cancelToken,\n      ...params\n    }) => {\n      const secureParams = secure && this.securityWorker && this.securityWorker(this.securityData) || {};\n      const requestParams = this.mergeRequestParams(params, secureParams);\n      const queryString = query && this.toQueryString(query);\n      const payloadFormatter = this.contentFormatters[type || ContentType.Json];\n      return fetch(`${baseUrl || this.baseUrl || \"\"}${path}${queryString ? `?${queryString}` : \"\"}`, { ...requestParams,\n        headers: { ...(type && type !== ContentType.FormData ? {\n            \"Content-Type\": type\n          } : {}),\n          ...(requestParams.headers || {})\n        },\n        signal: cancelToken ? this.createAbortSignal(cancelToken) : void 0,\n        body: typeof body === \"undefined\" || body === null ? null : payloadFormatter(body)\n      }).then(async response => {\n        const r = response;\n        r.data = null;\n        r.error = null;\n        const data = await response[format]().then(data => {\n          if (r.ok) {\n            r.data = data;\n          } else {\n            r.error = data;\n          }\n\n          return r;\n        }).catch(e => {\n          r.error = e;\n          return r;\n        });\n\n        if (cancelToken) {\n          this.abortControllers.delete(cancelToken);\n        }\n\n        if (!response.ok) throw data;\n        return data;\n      });\n    };\n\n    Object.assign(this, apiConfig);\n  }\n\n  addQueryParam(query, key) {\n    const value = query[key];\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(Array.isArray(value) ? value.join(\",\") : typeof value === \"number\" ? value : `${value}`);\n  }\n\n  toQueryString(rawQuery) {\n    const query = rawQuery || {};\n    const keys = Object.keys(query).filter(key => \"undefined\" !== typeof query[key]);\n    return keys.map(key => typeof query[key] === \"object\" && !Array.isArray(query[key]) ? this.toQueryString(query[key]) : this.addQueryParam(query, key)).join(\"&\");\n  }\n\n  addQueryParams(rawQuery) {\n    const queryString = this.toQueryString(rawQuery);\n    return queryString ? `?${queryString}` : \"\";\n  }\n\n  mergeRequestParams(params1, params2) {\n    return { ...this.baseApiParams,\n      ...params1,\n      ...(params2 || {}),\n      headers: { ...(this.baseApiParams.headers || {}),\n        ...(params1.headers || {}),\n        ...(params2 && params2.headers || {})\n      }\n    };\n  }\n\n}\n/**\n * @title nft/genesis.proto\n * @version version not set\n */\n\nexport class Api extends HttpClient {\n  constructor() {\n    super(...arguments);\n    /**\n     * No description\n     *\n     * @tags Query\n     * @name QueryCollection\n     * @summary Collection queries the nfts of the specified denom\n     * @request GET:/irismod/nft/collections/{denomId}\n     */\n\n    this.queryCollection = (denomId, query, params = {}) => this.request({\n      path: `/irismod/nft/collections/${denomId}`,\n      method: \"GET\",\n      query: query,\n      format: \"json\",\n      ...params\n    });\n    /**\n     * No description\n     *\n     * @tags Query\n     * @name QuerySupply\n     * @summary Supply queries the total supply of a given denom or owner\n     * @request GET:/irismod/nft/collections/{denomId}/supply\n     */\n\n\n    this.querySupply = (denomId, query, params = {}) => this.request({\n      path: `/irismod/nft/collections/${denomId}/supply`,\n      method: \"GET\",\n      query: query,\n      format: \"json\",\n      ...params\n    });\n    /**\n     * No description\n     *\n     * @tags Query\n     * @name QueryDenoms\n     * @summary Denoms queries all the denoms\n     * @request GET:/irismod/nft/denoms\n     */\n\n\n    this.queryDenoms = (query, params = {}) => this.request({\n      path: `/irismod/nft/denoms`,\n      method: \"GET\",\n      query: query,\n      format: \"json\",\n      ...params\n    });\n    /**\n     * No description\n     *\n     * @tags Query\n     * @name QueryDenom\n     * @summary Denom queries the definition of a given denom\n     * @request GET:/irismod/nft/denoms/{denomId}\n     */\n\n\n    this.queryDenom = (denomId, params = {}) => this.request({\n      path: `/irismod/nft/denoms/${denomId}`,\n      method: \"GET\",\n      format: \"json\",\n      ...params\n    });\n    /**\n     * No description\n     *\n     * @tags Query\n     * @name QueryOwner\n     * @summary Owner queries the nfts of the specified owner\n     * @request GET:/irismod/nft/nfts\n     */\n\n\n    this.queryOwner = (query, params = {}) => this.request({\n      path: `/irismod/nft/nfts`,\n      method: \"GET\",\n      query: query,\n      format: \"json\",\n      ...params\n    });\n    /**\n     * No description\n     *\n     * @tags Query\n     * @name QueryNft\n     * @summary nft queries the nft for the given denom and token ID\n     * @request GET:/irismod/nft/nfts/{denomId}/{tokenId}\n     */\n\n\n    this.queryNft = (denomId, tokenId, params = {}) => this.request({\n      path: `/irismod/nft/nfts/${denomId}/${tokenId}`,\n      method: \"GET\",\n      format: \"json\",\n      ...params\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/lisoleg/cosmos/checkers/vue/src/store/generated/alice/checkers/irismod.nft/module/rest.js"],"names":["ContentType","HttpClient","constructor","apiConfig","baseUrl","securityData","securityWorker","abortControllers","Map","baseApiParams","credentials","headers","redirect","referrerPolicy","setSecurityData","data","contentFormatters","Json","input","JSON","stringify","FormData","Object","keys","reduce","key","append","UrlEncoded","toQueryString","createAbortSignal","cancelToken","has","abortController","get","signal","AbortController","set","abortRequest","abort","delete","request","body","secure","path","type","query","format","params","secureParams","requestParams","mergeRequestParams","queryString","payloadFormatter","fetch","then","response","r","error","ok","catch","e","assign","addQueryParam","value","encodeURIComponent","Array","isArray","join","rawQuery","filter","map","addQueryParams","params1","params2","Api","arguments","queryCollection","denomId","method","querySupply","queryDenoms","queryDenom","queryOwner","queryNft","tokenId"],"mappings":"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","sourcesContent":["/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\nexport var ContentType;\n(function (ContentType) {\n    ContentType[\"Json\"] = \"application/json\";\n    ContentType[\"FormData\"] = \"multipart/form-data\";\n    ContentType[\"UrlEncoded\"] = \"application/x-www-form-urlencoded\";\n})(ContentType || (ContentType = {}));\nexport class HttpClient {\n    constructor(apiConfig = {}) {\n        this.baseUrl = \"\";\n        this.securityData = null;\n        this.securityWorker = null;\n        this.abortControllers = new Map();\n        this.baseApiParams = {\n            credentials: \"same-origin\",\n            headers: {},\n            redirect: \"follow\",\n            referrerPolicy: \"no-referrer\",\n        };\n        this.setSecurityData = (data) => {\n            this.securityData = data;\n        };\n        this.contentFormatters = {\n            [ContentType.Json]: (input) => input !== null && (typeof input === \"object\" || typeof input === \"string\") ? JSON.stringify(input) : input,\n            [ContentType.FormData]: (input) => Object.keys(input || {}).reduce((data, key) => {\n                data.append(key, input[key]);\n                return data;\n            }, new FormData()),\n            [ContentType.UrlEncoded]: (input) => this.toQueryString(input),\n        };\n        this.createAbortSignal = (cancelToken) => {\n            if (this.abortControllers.has(cancelToken)) {\n                const abortController = this.abortControllers.get(cancelToken);\n                if (abortController) {\n                    return abortController.signal;\n                }\n                return void 0;\n            }\n            const abortController = new AbortController();\n            this.abortControllers.set(cancelToken, abortController);\n            return abortController.signal;\n        };\n        this.abortRequest = (cancelToken) => {\n            const abortController = this.abortControllers.get(cancelToken);\n            if (abortController) {\n                abortController.abort();\n                this.abortControllers.delete(cancelToken);\n            }\n        };\n        this.request = ({ body, secure, path, type, query, format = \"json\", baseUrl, cancelToken, ...params }) => {\n            const secureParams = (secure && this.securityWorker && this.securityWorker(this.securityData)) || {};\n            const requestParams = this.mergeRequestParams(params, secureParams);\n            const queryString = query && this.toQueryString(query);\n            const payloadFormatter = this.contentFormatters[type || ContentType.Json];\n            return fetch(`${baseUrl || this.baseUrl || \"\"}${path}${queryString ? `?${queryString}` : \"\"}`, {\n                ...requestParams,\n                headers: {\n                    ...(type && type !== ContentType.FormData ? { \"Content-Type\": type } : {}),\n                    ...(requestParams.headers || {}),\n                },\n                signal: cancelToken ? this.createAbortSignal(cancelToken) : void 0,\n                body: typeof body === \"undefined\" || body === null ? null : payloadFormatter(body),\n            }).then(async (response) => {\n                const r = response;\n                r.data = null;\n                r.error = null;\n                const data = await response[format]()\n                    .then((data) => {\n                    if (r.ok) {\n                        r.data = data;\n                    }\n                    else {\n                        r.error = data;\n                    }\n                    return r;\n                })\n                    .catch((e) => {\n                    r.error = e;\n                    return r;\n                });\n                if (cancelToken) {\n                    this.abortControllers.delete(cancelToken);\n                }\n                if (!response.ok)\n                    throw data;\n                return data;\n            });\n        };\n        Object.assign(this, apiConfig);\n    }\n    addQueryParam(query, key) {\n        const value = query[key];\n        return (encodeURIComponent(key) +\n            \"=\" +\n            encodeURIComponent(Array.isArray(value) ? value.join(\",\") : typeof value === \"number\" ? value : `${value}`));\n    }\n    toQueryString(rawQuery) {\n        const query = rawQuery || {};\n        const keys = Object.keys(query).filter((key) => \"undefined\" !== typeof query[key]);\n        return keys\n            .map((key) => typeof query[key] === \"object\" && !Array.isArray(query[key])\n            ? this.toQueryString(query[key])\n            : this.addQueryParam(query, key))\n            .join(\"&\");\n    }\n    addQueryParams(rawQuery) {\n        const queryString = this.toQueryString(rawQuery);\n        return queryString ? `?${queryString}` : \"\";\n    }\n    mergeRequestParams(params1, params2) {\n        return {\n            ...this.baseApiParams,\n            ...params1,\n            ...(params2 || {}),\n            headers: {\n                ...(this.baseApiParams.headers || {}),\n                ...(params1.headers || {}),\n                ...((params2 && params2.headers) || {}),\n            },\n        };\n    }\n}\n/**\n * @title nft/genesis.proto\n * @version version not set\n */\nexport class Api extends HttpClient {\n    constructor() {\n        super(...arguments);\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryCollection\n         * @summary Collection queries the nfts of the specified denom\n         * @request GET:/irismod/nft/collections/{denomId}\n         */\n        this.queryCollection = (denomId, query, params = {}) => this.request({\n            path: `/irismod/nft/collections/${denomId}`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QuerySupply\n         * @summary Supply queries the total supply of a given denom or owner\n         * @request GET:/irismod/nft/collections/{denomId}/supply\n         */\n        this.querySupply = (denomId, query, params = {}) => this.request({\n            path: `/irismod/nft/collections/${denomId}/supply`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryDenoms\n         * @summary Denoms queries all the denoms\n         * @request GET:/irismod/nft/denoms\n         */\n        this.queryDenoms = (query, params = {}) => this.request({\n            path: `/irismod/nft/denoms`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryDenom\n         * @summary Denom queries the definition of a given denom\n         * @request GET:/irismod/nft/denoms/{denomId}\n         */\n        this.queryDenom = (denomId, params = {}) => this.request({\n            path: `/irismod/nft/denoms/${denomId}`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryOwner\n         * @summary Owner queries the nfts of the specified owner\n         * @request GET:/irismod/nft/nfts\n         */\n        this.queryOwner = (query, params = {}) => this.request({\n            path: `/irismod/nft/nfts`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryNft\n         * @summary nft queries the nft for the given denom and token ID\n         * @request GET:/irismod/nft/nfts/{denomId}/{tokenId}\n         */\n        this.queryNft = (denomId, tokenId, params = {}) => this.request({\n            path: `/irismod/nft/nfts/${denomId}/${tokenId}`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}