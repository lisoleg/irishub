{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.typed-array.at.js\");\n\nrequire(\"core-js/modules/es.typed-array.set.js\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProofOps = exports.ProofOp = exports.DominoOp = exports.ValueOp = exports.Proof = exports.protobufPackage = void 0;\n/* eslint-disable */\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\n\nexports.protobufPackage = 'tendermint.crypto';\nconst baseProof = {\n  total: long_1.default.ZERO,\n  index: long_1.default.ZERO\n};\nexports.Proof = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.total.isZero()) {\n      writer.uint32(8).int64(message.total);\n    }\n\n    if (!message.index.isZero()) {\n      writer.uint32(16).int64(message.index);\n    }\n\n    if (message.leafHash.length !== 0) {\n      writer.uint32(26).bytes(message.leafHash);\n    }\n\n    for (const v of message.aunts) {\n      writer.uint32(34).bytes(v);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new minimal_1.default.Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseProof);\n    message.aunts = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.total = reader.int64();\n          break;\n\n        case 2:\n          message.index = reader.int64();\n          break;\n\n        case 3:\n          message.leafHash = reader.bytes();\n          break;\n\n        case 4:\n          message.aunts.push(reader.bytes());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseProof);\n    message.aunts = [];\n\n    if (object.total !== undefined && object.total !== null) {\n      message.total = long_1.default.fromString(object.total);\n    } else {\n      message.total = long_1.default.ZERO;\n    }\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = long_1.default.fromString(object.index);\n    } else {\n      message.index = long_1.default.ZERO;\n    }\n\n    if (object.leafHash !== undefined && object.leafHash !== null) {\n      message.leafHash = bytesFromBase64(object.leafHash);\n    }\n\n    if (object.aunts !== undefined && object.aunts !== null) {\n      for (const e of object.aunts) {\n        message.aunts.push(bytesFromBase64(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.total !== undefined && (obj.total = (message.total || long_1.default.ZERO).toString());\n    message.index !== undefined && (obj.index = (message.index || long_1.default.ZERO).toString());\n    message.leafHash !== undefined && (obj.leafHash = base64FromBytes(message.leafHash !== undefined ? message.leafHash : new Uint8Array()));\n\n    if (message.aunts) {\n      obj.aunts = message.aunts.map(e => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n    } else {\n      obj.aunts = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseProof);\n    message.aunts = [];\n\n    if (object.total !== undefined && object.total !== null) {\n      message.total = object.total;\n    } else {\n      message.total = long_1.default.ZERO;\n    }\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = object.index;\n    } else {\n      message.index = long_1.default.ZERO;\n    }\n\n    if (object.leafHash !== undefined && object.leafHash !== null) {\n      message.leafHash = object.leafHash;\n    } else {\n      message.leafHash = new Uint8Array();\n    }\n\n    if (object.aunts !== undefined && object.aunts !== null) {\n      for (const e of object.aunts) {\n        message.aunts.push(e);\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseValueOp = {};\nexports.ValueOp = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n\n    if (message.proof !== undefined) {\n      exports.Proof.encode(message.proof, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new minimal_1.default.Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseValueOp);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n\n        case 2:\n          message.proof = exports.Proof.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseValueOp);\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = bytesFromBase64(object.key);\n    }\n\n    if (object.proof !== undefined && object.proof !== null) {\n      message.proof = exports.Proof.fromJSON(object.proof);\n    } else {\n      message.proof = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.proof !== undefined && (obj.proof = message.proof ? exports.Proof.toJSON(message.proof) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseValueOp);\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = new Uint8Array();\n    }\n\n    if (object.proof !== undefined && object.proof !== null) {\n      message.proof = exports.Proof.fromPartial(object.proof);\n    } else {\n      message.proof = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseDominoOp = {\n  key: '',\n  input: '',\n  output: ''\n};\nexports.DominoOp = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.key !== '') {\n      writer.uint32(10).string(message.key);\n    }\n\n    if (message.input !== '') {\n      writer.uint32(18).string(message.input);\n    }\n\n    if (message.output !== '') {\n      writer.uint32(26).string(message.output);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new minimal_1.default.Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseDominoOp);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.string();\n          break;\n\n        case 2:\n          message.input = reader.string();\n          break;\n\n        case 3:\n          message.output = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseDominoOp);\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = String(object.key);\n    } else {\n      message.key = '';\n    }\n\n    if (object.input !== undefined && object.input !== null) {\n      message.input = String(object.input);\n    } else {\n      message.input = '';\n    }\n\n    if (object.output !== undefined && object.output !== null) {\n      message.output = String(object.output);\n    } else {\n      message.output = '';\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = message.key);\n    message.input !== undefined && (obj.input = message.input);\n    message.output !== undefined && (obj.output = message.output);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseDominoOp);\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = '';\n    }\n\n    if (object.input !== undefined && object.input !== null) {\n      message.input = object.input;\n    } else {\n      message.input = '';\n    }\n\n    if (object.output !== undefined && object.output !== null) {\n      message.output = object.output;\n    } else {\n      message.output = '';\n    }\n\n    return message;\n  }\n\n};\nconst baseProofOp = {\n  type: ''\n};\nexports.ProofOp = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.type !== '') {\n      writer.uint32(10).string(message.type);\n    }\n\n    if (message.key.length !== 0) {\n      writer.uint32(18).bytes(message.key);\n    }\n\n    if (message.data.length !== 0) {\n      writer.uint32(26).bytes(message.data);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new minimal_1.default.Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseProofOp);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.string();\n          break;\n\n        case 2:\n          message.key = reader.bytes();\n          break;\n\n        case 3:\n          message.data = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseProofOp);\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = String(object.type);\n    } else {\n      message.type = '';\n    }\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = bytesFromBase64(object.key);\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.type !== undefined && (obj.type = message.type);\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseProofOp);\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = object.type;\n    } else {\n      message.type = '';\n    }\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = new Uint8Array();\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseProofOps = {};\nexports.ProofOps = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.ops) {\n      exports.ProofOp.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new minimal_1.default.Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseProofOps);\n    message.ops = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.ops.push(exports.ProofOp.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseProofOps);\n    message.ops = [];\n\n    if (object.ops !== undefined && object.ops !== null) {\n      for (const e of object.ops) {\n        message.ops.push(exports.ProofOp.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.ops) {\n      obj.ops = message.ops.map(e => e ? exports.ProofOp.toJSON(e) : undefined);\n    } else {\n      obj.ops = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseProofOps);\n    message.ops = [];\n\n    if (object.ops !== undefined && object.ops !== null) {\n      for (const e of object.ops) {\n        message.ops.push(exports.ProofOp.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\n\nvar globalThis = (() => {\n  if (typeof globalThis !== 'undefined') return globalThis;\n  if (typeof self !== 'undefined') return self;\n  if (typeof window !== 'undefined') return window;\n  if (typeof global !== 'undefined') return global;\n  throw 'Unable to locate global object';\n})();\n\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, 'base64').toString('binary'));\n\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n\n  return arr;\n}\n\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, 'binary').toString('base64'));\n\nfunction base64FromBytes(arr) {\n  const bin = [];\n\n  for (let i = 0; i < arr.byteLength; ++i) {\n    bin.push(String.fromCharCode(arr[i]));\n  }\n\n  return btoa(bin.join(''));\n}","map":{"version":3,"sources":["../../../../src/codec/tendermint/crypto/proof.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProofOps = exports.ProofOp = exports.DominoOp = exports.ValueOp = exports.Proof = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nexports.protobufPackage = 'tendermint.crypto';\nconst baseProof = { total: long_1.default.ZERO, index: long_1.default.ZERO };\nexports.Proof = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.total.isZero()) {\n            writer.uint32(8).int64(message.total);\n        }\n        if (!message.index.isZero()) {\n            writer.uint32(16).int64(message.index);\n        }\n        if (message.leafHash.length !== 0) {\n            writer.uint32(26).bytes(message.leafHash);\n        }\n        for (const v of message.aunts) {\n            writer.uint32(34).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new minimal_1.default.Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseProof);\n        message.aunts = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.total = reader.int64();\n                    break;\n                case 2:\n                    message.index = reader.int64();\n                    break;\n                case 3:\n                    message.leafHash = reader.bytes();\n                    break;\n                case 4:\n                    message.aunts.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseProof);\n        message.aunts = [];\n        if (object.total !== undefined && object.total !== null) {\n            message.total = long_1.default.fromString(object.total);\n        }\n        else {\n            message.total = long_1.default.ZERO;\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = long_1.default.fromString(object.index);\n        }\n        else {\n            message.index = long_1.default.ZERO;\n        }\n        if (object.leafHash !== undefined && object.leafHash !== null) {\n            message.leafHash = bytesFromBase64(object.leafHash);\n        }\n        if (object.aunts !== undefined && object.aunts !== null) {\n            for (const e of object.aunts) {\n                message.aunts.push(bytesFromBase64(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.total !== undefined &&\n            (obj.total = (message.total || long_1.default.ZERO).toString());\n        message.index !== undefined &&\n            (obj.index = (message.index || long_1.default.ZERO).toString());\n        message.leafHash !== undefined &&\n            (obj.leafHash = base64FromBytes(message.leafHash !== undefined ? message.leafHash : new Uint8Array()));\n        if (message.aunts) {\n            obj.aunts = message.aunts.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.aunts = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseProof);\n        message.aunts = [];\n        if (object.total !== undefined && object.total !== null) {\n            message.total = object.total;\n        }\n        else {\n            message.total = long_1.default.ZERO;\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = object.index;\n        }\n        else {\n            message.index = long_1.default.ZERO;\n        }\n        if (object.leafHash !== undefined && object.leafHash !== null) {\n            message.leafHash = object.leafHash;\n        }\n        else {\n            message.leafHash = new Uint8Array();\n        }\n        if (object.aunts !== undefined && object.aunts !== null) {\n            for (const e of object.aunts) {\n                message.aunts.push(e);\n            }\n        }\n        return message;\n    },\n};\nconst baseValueOp = {};\nexports.ValueOp = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.proof !== undefined) {\n            exports.Proof.encode(message.proof, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new minimal_1.default.Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseValueOp);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.proof = exports.Proof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseValueOp);\n        if (object.key !== undefined && object.key !== null) {\n            message.key = bytesFromBase64(object.key);\n        }\n        if (object.proof !== undefined && object.proof !== null) {\n            message.proof = exports.Proof.fromJSON(object.proof);\n        }\n        else {\n            message.proof = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined &&\n            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n        message.proof !== undefined &&\n            (obj.proof = message.proof ? exports.Proof.toJSON(message.proof) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseValueOp);\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = new Uint8Array();\n        }\n        if (object.proof !== undefined && object.proof !== null) {\n            message.proof = exports.Proof.fromPartial(object.proof);\n        }\n        else {\n            message.proof = undefined;\n        }\n        return message;\n    },\n};\nconst baseDominoOp = { key: '', input: '', output: '' };\nexports.DominoOp = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.key !== '') {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.input !== '') {\n            writer.uint32(18).string(message.input);\n        }\n        if (message.output !== '') {\n            writer.uint32(26).string(message.output);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new minimal_1.default.Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseDominoOp);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.input = reader.string();\n                    break;\n                case 3:\n                    message.output = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseDominoOp);\n        if (object.key !== undefined && object.key !== null) {\n            message.key = String(object.key);\n        }\n        else {\n            message.key = '';\n        }\n        if (object.input !== undefined && object.input !== null) {\n            message.input = String(object.input);\n        }\n        else {\n            message.input = '';\n        }\n        if (object.output !== undefined && object.output !== null) {\n            message.output = String(object.output);\n        }\n        else {\n            message.output = '';\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.input !== undefined && (obj.input = message.input);\n        message.output !== undefined && (obj.output = message.output);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseDominoOp);\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = '';\n        }\n        if (object.input !== undefined && object.input !== null) {\n            message.input = object.input;\n        }\n        else {\n            message.input = '';\n        }\n        if (object.output !== undefined && object.output !== null) {\n            message.output = object.output;\n        }\n        else {\n            message.output = '';\n        }\n        return message;\n    },\n};\nconst baseProofOp = { type: '' };\nexports.ProofOp = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.type !== '') {\n            writer.uint32(10).string(message.type);\n        }\n        if (message.key.length !== 0) {\n            writer.uint32(18).bytes(message.key);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(26).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new minimal_1.default.Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseProofOp);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.string();\n                    break;\n                case 2:\n                    message.key = reader.bytes();\n                    break;\n                case 3:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseProofOp);\n        if (object.type !== undefined && object.type !== null) {\n            message.type = String(object.type);\n        }\n        else {\n            message.type = '';\n        }\n        if (object.key !== undefined && object.key !== null) {\n            message.key = bytesFromBase64(object.key);\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined && (obj.type = message.type);\n        message.key !== undefined &&\n            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseProofOp);\n        if (object.type !== undefined && object.type !== null) {\n            message.type = object.type;\n        }\n        else {\n            message.type = '';\n        }\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = new Uint8Array();\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseProofOps = {};\nexports.ProofOps = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.ops) {\n            exports.ProofOp.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new minimal_1.default.Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseProofOps);\n        message.ops = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.ops.push(exports.ProofOp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseProofOps);\n        message.ops = [];\n        if (object.ops !== undefined && object.ops !== null) {\n            for (const e of object.ops) {\n                message.ops.push(exports.ProofOp.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.ops) {\n            obj.ops = message.ops.map((e) => (e ? exports.ProofOp.toJSON(e) : undefined));\n        }\n        else {\n            obj.ops = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseProofOps);\n        message.ops = [];\n        if (object.ops !== undefined && object.ops !== null) {\n            for (const e of object.ops) {\n                message.ops.push(exports.ProofOp.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== 'undefined')\n        return globalThis;\n    if (typeof self !== 'undefined')\n        return self;\n    if (typeof window !== 'undefined')\n        return window;\n    if (typeof global !== 'undefined')\n        return global;\n    throw 'Unable to locate global object';\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (let i = 0; i < arr.byteLength; ++i) {\n        bin.push(String.fromCharCode(arr[i]));\n    }\n    return btoa(bin.join(''));\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}