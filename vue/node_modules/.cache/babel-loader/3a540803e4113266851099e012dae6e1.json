{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _events = require(\"events\");\n\nvar _reconnectingWebsocket = _interopRequireDefault(require(\"reconnecting-websocket\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _stargate = require(\"@cosmjs/stargate\");\n\nvar _SpClientError = _interopRequireDefault(require(\"./errors/SpClientError\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar SPClient = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(SPClient, _EventEmitter);\n\n  var _super = _createSuper(SPClient);\n\n  function SPClient(_ref) {\n    var _this;\n\n    var apiAddr = _ref.apiAddr,\n        rpcAddr = _ref.rpcAddr,\n        wsAddr = _ref.wsAddr,\n        refresh = _ref.refresh,\n        offline = _ref.offline;\n\n    _classCallCheck(this, SPClient);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"apiAddr\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"rpcAddr\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"wsAddr\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"offline\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"refresh\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"socket\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"signingClient\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"signer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"timer\", void 0);\n\n    _this.apiAddr = apiAddr;\n    _this.rpcAddr = rpcAddr;\n    _this.wsAddr = wsAddr;\n    _this.offline = offline;\n    _this.refresh = refresh;\n\n    var poll = _this.connectivityTest.bind(_assertThisInitialized(_this));\n\n    _this.timer = setInterval(poll, _this.refresh);\n\n    _this.connectivityTest();\n\n    if (_this.wsAddr) {\n      _this.socket = new _reconnectingWebsocket[\"default\"](_this.wsAddr);\n      _this.socket.onopen = _this.onOpenWS.bind(_assertThisInitialized(_this));\n      _this.socket.onmessage = _this.onMessageWS.bind(_assertThisInitialized(_this));\n      _this.socket.onerror = _this.onErrorWS.bind(_assertThisInitialized(_this));\n      _this.socket.onclose = _this.onCloseWS.bind(_assertThisInitialized(_this));\n    }\n\n    return _this;\n  }\n\n  _createClass(SPClient, [{\n    key: \"useSigner\",\n    value: function () {\n      var _useSigner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signer) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _stargate.SigningStargateClient.connectWithSigner(this.rpcAddr, signer);\n\n              case 2:\n                this.signingClient = _context.sent;\n                this.signer = signer;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function useSigner(_x) {\n        return _useSigner.apply(this, arguments);\n      }\n\n      return useSigner;\n    }()\n  }, {\n    key: \"switchAPI\",\n    value: function switchAPI(apiAddr) {\n      this.apiAddr = apiAddr;\n    }\n  }, {\n    key: \"switchWS\",\n    value: function switchWS(wsAddr) {\n      this.emit('ws-status', false);\n      this.wsAddr = wsAddr;\n      this.socket = new _reconnectingWebsocket[\"default\"](this.wsAddr);\n    }\n  }, {\n    key: \"switchRPC\",\n    value: function () {\n      var _switchRPC = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(rpcAddr) {\n        var registry;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.rpcAddr = rpcAddr;\n\n                if (!this.signingClient) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                registry = _objectSpread({}, this.signingClient.registry);\n                _context2.next = 5;\n                return _stargate.SigningStargateClient.connectWithSigner(this.rpcAddr, this.signer, {\n                  registry: registry\n                });\n\n              case 5:\n                this.signingClient = _context2.sent;\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function switchRPC(_x2) {\n        return _switchRPC.apply(this, arguments);\n      }\n\n      return switchRPC;\n    }()\n  }, {\n    key: \"connectivityTest\",\n    value: function () {\n      var _connectivityTest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var status;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.offline) {\n                  this.emit('newblock', {\n                    dummy: true\n                  });\n                }\n\n                if (!this.apiAddr) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                _context3.prev = 2;\n                _context3.next = 5;\n                return _axios[\"default\"].get(this.apiAddr + '/node_info');\n\n              case 5:\n                status = _context3.sent;\n                this.emit('chain-id', status.data.node_info.network);\n                status.data.application_version.name ? this.emit('chain-name', status.data.application_version.name) : this.emit('chain-name', status.data.node_info.network);\n                this.emit('api-status', true);\n                _context3.next = 14;\n                break;\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](2);\n\n                if (!_context3.t0.response) {\n                  this.emit('api-status', false);\n                  console.error(new _SpClientError[\"default\"]('Client-js:API', 'API Node unavailable'));\n                } else {\n                  this.emit('api-status', true);\n                }\n\n              case 14:\n                if (!this.rpcAddr) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                _context3.prev = 15;\n                _context3.next = 18;\n                return _axios[\"default\"].get(this.rpcAddr);\n\n              case 18:\n                this.emit('rpc-status', true);\n                _context3.next = 24;\n                break;\n\n              case 21:\n                _context3.prev = 21;\n                _context3.t1 = _context3[\"catch\"](15);\n\n                if (!_context3.t1.response) {\n                  console.error(new _SpClientError[\"default\"]('Client-js:API', 'RPC Node unavailable'));\n                  this.emit('rpc-status', false);\n                } else {\n                  this.emit('rpc-status', true);\n                }\n\n              case 24:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 11], [15, 21]]);\n      }));\n\n      function connectivityTest() {\n        return _connectivityTest.apply(this, arguments);\n      }\n\n      return connectivityTest;\n    }()\n  }, {\n    key: \"onErrorWS\",\n    value: function onErrorWS() {\n      console.error(new _SpClientError[\"default\"]('Client-js:WS', 'Could not connect to websocket.'));\n    }\n  }, {\n    key: \"onCloseWS\",\n    value: function onCloseWS() {\n      this.emit('ws-status', false);\n    }\n  }, {\n    key: \"onOpenWS\",\n    value: function onOpenWS() {\n      this.emit('ws-status', true);\n      this.socket.send(JSON.stringify({\n        jsonrpc: '2.0',\n        method: 'subscribe',\n        id: '1',\n        params: [\"tm.event = 'NewBlock'\"]\n      }));\n    }\n  }, {\n    key: \"onMessageWS\",\n    value: function onMessageWS(msg) {\n      var result = JSON.parse(msg.data).result;\n\n      if (result.data && result.data.type === 'tendermint/event/NewBlock') {\n        this.emit('newblock', JSON.parse(msg.data).result);\n      }\n    }\n  }, {\n    key: \"query\",\n    value: function () {\n      var _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(url) {\n        var params,\n            response,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                params = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : '';\n                _context4.prev = 1;\n                _context4.next = 4;\n                return _axios[\"default\"].get(this.apiAddr + url + params);\n\n              case 4:\n                response = _context4.sent;\n                return _context4.abrupt(\"return\", response.data);\n\n              case 8:\n                _context4.prev = 8;\n                _context4.t0 = _context4[\"catch\"](1);\n                console.error(new _SpClientError[\"default\"]('Client-js:API', 'Could not access API: ' + url));\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 8]]);\n      }));\n\n      function query(_x3) {\n        return _query.apply(this, arguments);\n      }\n\n      return query;\n    }()\n  }, {\n    key: \"addQueryParam\",\n    value: function addQueryParam(query, key) {\n      var value = query[key];\n      return encodeURIComponent(key) + '=' + encodeURIComponent(Array.isArray(value) ? value.join(',') : typeof value === 'number' ? value : \"\".concat(value));\n    }\n  }, {\n    key: \"toQueryString\",\n    value: function toQueryString(rawQuery) {\n      var _this2 = this;\n\n      var query = rawQuery || {};\n      var keys = Object.keys(query).filter(function (key) {\n        return 'undefined' !== typeof query[key];\n      });\n      return keys.map(function (key) {\n        return _typeof(query[key]) === 'object' && !Array.isArray(query[key]) ? _this2.toQueryString(query[key]) : _this2.addQueryParam(query, key);\n      }).join('&');\n    }\n  }, {\n    key: \"addQueryParams\",\n    value: function addQueryParams(rawQuery) {\n      var queryString = this.toQueryString(rawQuery);\n      return queryString ? \"?\".concat(queryString) : '';\n    }\n  }, {\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref2) {\n        var body, path, query, method, url, response, data;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                body = _ref2.body, path = _ref2.path, query = _ref2.query, method = _ref2.method;\n                url = this.apiAddr + path + this.addQueryParams(query);\n                _context5.prev = 2;\n                response = (0, _axios[\"default\"])({\n                  url: url,\n                  method: method,\n                  data: body,\n                  headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json;charset=UTF-8'\n                  }\n                });\n                _context5.next = 6;\n                return response;\n\n              case 6:\n                data = _context5.sent;\n                return _context5.abrupt(\"return\", data);\n\n              case 10:\n                _context5.prev = 10;\n                _context5.t0 = _context5[\"catch\"](2);\n                console.error(new _SpClientError[\"default\"]('Client-js:API', 'Could not access API: ' + url));\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[2, 10]]);\n      }));\n\n      function request(_x4) {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n  }]);\n\n  return SPClient;\n}(_events.EventEmitter);\n\nexports[\"default\"] = SPClient;","map":{"version":3,"sources":["../src/SPClient.ts"],"names":["SPClient","EventEmitter","apiAddr","rpcAddr","wsAddr","refresh","offline","poll","setInterval","ReconnectingWebSocket","SigningStargateClient","registry","dummy","status","axios","console","SpClientError","jsonrpc","method","id","params","result","JSON","msg","response","value","query","encodeURIComponent","Array","rawQuery","keys","queryString","body","path","url","data","headers","Accept"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events'\nimport ReconnectingWebSocket from 'reconnecting-websocket'\nimport axios, { AxiosPromise, AxiosResponse } from 'axios'\nimport { SigningStargateClient } from '@cosmjs/stargate'\nimport { OfflineDirectSigner, Registry } from '@cosmjs/proto-signing'\nimport SpClientError from './errors/SpClientError'\nexport interface IClientConfig {\n  apiAddr: string\n  rpcAddr?: string\n  wsAddr?: string\n  refresh?: number\n  offline?: boolean\n}\nexport type QueryParamsType = Record<string | number, unknown>\nexport interface IFullRequestParams {\n  body?: unknown\n  path: string\n  query?: QueryParamsType\n  method: 'GET' | 'POST' | 'PUT'\n}\nexport interface IResponse {\n  data: string\n}\nexport interface ITypedResponse {\n  type: string\n}\nexport interface IAPIResponse {\n  data: unknown\n}\nexport interface IParsedResponse {\n  data: ITypedResponse\n}\nexport default class SPClient extends EventEmitter {\n  private apiAddr: string\n  private rpcAddr: string\n  private wsAddr: string\n  private offline: boolean\n  private refresh: number\n  private socket: ReconnectingWebSocket\n\n  public signingClient\n  private signer: OfflineDirectSigner\n  private timer: ReturnType<typeof setInterval>\n\n  constructor({ apiAddr, rpcAddr, wsAddr, refresh, offline }: IClientConfig) {\n    super()\n    this.apiAddr = apiAddr\n    this.rpcAddr = rpcAddr\n    this.wsAddr = wsAddr\n    this.offline = offline\n    this.refresh = refresh\n    const poll: () => Promise<void> = this.connectivityTest.bind(this)\n    this.timer = setInterval(poll, this.refresh)\n    this.connectivityTest()\n    if (this.wsAddr) {\n      this.socket = new ReconnectingWebSocket(this.wsAddr)\n\n      this.socket.onopen = this.onOpenWS.bind(this)\n      this.socket.onmessage = this.onMessageWS.bind(this)\n      this.socket.onerror = this.onErrorWS.bind(this)\n      this.socket.onclose = this.onCloseWS.bind(this)\n    }\n  }\n  public async useSigner(signer: OfflineDirectSigner): Promise<void> {\n    this.signingClient = await SigningStargateClient.connectWithSigner(this.rpcAddr, signer)\n    this.signer = signer\n  }\n  public switchAPI(apiAddr: string): void {\n    this.apiAddr = apiAddr\n  }\n  public switchWS(wsAddr: string): void {\n    this.emit('ws-status', false)\n    this.wsAddr = wsAddr\n    this.socket = new ReconnectingWebSocket(this.wsAddr)\n  }\n  public async switchRPC(rpcAddr: string): Promise<void> {\n    this.rpcAddr = rpcAddr\n    if (this.signingClient) {\n      const registry: Registry = { ...this.signingClient.registry }\n      this.signingClient = await SigningStargateClient.connectWithSigner(this.rpcAddr, this.signer, { registry })\n    }\n  }\n  private async connectivityTest(): Promise<void> {\n    if (this.offline) {\n      this.emit('newblock', { dummy: true })\n    }\n    if (this.apiAddr) {\n      try {\n        const status = await axios.get(this.apiAddr + '/node_info')\n        this.emit('chain-id', status.data.node_info.network)\n        status.data.application_version.name\n          ? this.emit('chain-name', status.data.application_version.name)\n          : this.emit('chain-name', status.data.node_info.network)\n        this.emit('api-status', true)\n      } catch (error) {\n        if (!error.response) {\n          this.emit('api-status', false)\n          console.error(new SpClientError('Client-js:API', 'API Node unavailable'))\n        } else {\n          this.emit('api-status', true)\n        }\n      }\n    }\n    if (this.rpcAddr) {\n      try {\n        await axios.get(this.rpcAddr)\n        this.emit('rpc-status', true)\n      } catch (error) {\n        if (!error.response) {\n          console.error(new SpClientError('Client-js:API', 'RPC Node unavailable'))\n          this.emit('rpc-status', false)\n        } else {\n          this.emit('rpc-status', true)\n        }\n      }\n    }\n  }\n  private onErrorWS(): void {\n    console.error(new SpClientError('Client-js:WS', 'Could not connect to websocket.'))\n  }\n  private onCloseWS(): void {\n    this.emit('ws-status', false)\n  }\n  private onOpenWS(): void {\n    this.emit('ws-status', true)\n    this.socket.send(\n      JSON.stringify({\n        jsonrpc: '2.0',\n        method: 'subscribe',\n        id: '1',\n        params: [\"tm.event = 'NewBlock'\"],\n      }),\n    )\n  }\n  private onMessageWS(msg: IResponse): void {\n    const result: IParsedResponse = JSON.parse(msg.data).result\n    if (result.data && result.data.type === 'tendermint/event/NewBlock') {\n      this.emit('newblock', JSON.parse(msg.data).result)\n    }\n  }\n  public async query(url: string, params = ''): Promise<unknown> {\n    try {\n      const response: IAPIResponse = await axios.get(this.apiAddr + url + params)\n      return response.data\n    } catch (e) {\n      console.error(new SpClientError('Client-js:API', 'Could not access API: ' + url))\n    }\n  }\n\n  private addQueryParam(query: QueryParamsType, key: string): string {\n    const value: unknown = query[key]\n\n    return (\n      encodeURIComponent(key) +\n      '=' +\n      encodeURIComponent(Array.isArray(value) ? value.join(',') : typeof value === 'number' ? value : `${value}`)\n    )\n  }\n  protected toQueryString(rawQuery?: QueryParamsType): string {\n    const query: QueryParamsType = rawQuery || {}\n    const keys: string[] = Object.keys(query).filter((key) => 'undefined' !== typeof query[key])\n    return keys\n      .map((key) =>\n        typeof query[key] === 'object' && !Array.isArray(query[key])\n          ? this.toQueryString(query[key] as QueryParamsType)\n          : this.addQueryParam(query, key),\n      )\n      .join('&')\n  }\n  protected addQueryParams(rawQuery?: QueryParamsType): string {\n    const queryString: string = this.toQueryString(rawQuery)\n    return queryString ? `?${queryString}` : ''\n  }\n  public async request<T = unknown>({ body, path, query, method }: IFullRequestParams): Promise<AxiosResponse<T>> {\n    const url: string = this.apiAddr + path + this.addQueryParams(query)\n    try {\n      const response: AxiosPromise<T> = axios({\n        url,\n        method,\n        data: body,\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json;charset=UTF-8',\n        },\n      })\n      const data: AxiosResponse<T> = await response\n      return data\n    } catch (e) {\n      console.error(new SpClientError('Client-js:API', 'Could not access API: ' + url))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}