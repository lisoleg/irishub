{"ast":null,"code":"import { txClient, queryClient, MissingWalletError, registry } from './module'; // @ts-ignore\n\nimport { SpVuexError } from '@starport/vuex';\nimport { SendAuthorization } from \"./module/types/cosmos/bank/v1beta1/authz\";\nimport { Params } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { SendEnabled } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { Input } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { Output } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { Supply } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { DenomUnit } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { Metadata } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { Balance } from \"./module/types/cosmos/bank/v1beta1/genesis\";\nexport { SendAuthorization, Params, SendEnabled, Input, Output, Supply, DenomUnit, Metadata, Balance };\n\nasync function initTxClient(vuexGetters) {\n  return await txClient(vuexGetters['common/wallet/signer'], {\n    addr: vuexGetters['common/env/apiTendermint']\n  });\n}\n\nasync function initQueryClient(vuexGetters) {\n  return await queryClient({\n    addr: vuexGetters['common/env/apiCosmos']\n  });\n}\n\nfunction mergeResults(value, next_values) {\n  for (let prop of Object.keys(next_values)) {\n    if (Array.isArray(next_values[prop])) {\n      value[prop] = [...value[prop], ...next_values[prop]];\n    } else {\n      value[prop] = next_values[prop];\n    }\n  }\n\n  return value;\n}\n\nfunction getStructure(template) {\n  let structure = {\n    fields: []\n  };\n\n  for (const [key, value] of Object.entries(template)) {\n    let field = {};\n    field.name = key;\n    field.type = typeof value;\n    structure.fields.push(field);\n  }\n\n  return structure;\n}\n\nconst getDefaultState = () => {\n  return {\n    Balance: {},\n    AllBalances: {},\n    TotalSupply: {},\n    SupplyOf: {},\n    Params: {},\n    DenomMetadata: {},\n    DenomsMetadata: {},\n    _Structure: {\n      SendAuthorization: getStructure(SendAuthorization.fromPartial({})),\n      Params: getStructure(Params.fromPartial({})),\n      SendEnabled: getStructure(SendEnabled.fromPartial({})),\n      Input: getStructure(Input.fromPartial({})),\n      Output: getStructure(Output.fromPartial({})),\n      Supply: getStructure(Supply.fromPartial({})),\n      DenomUnit: getStructure(DenomUnit.fromPartial({})),\n      Metadata: getStructure(Metadata.fromPartial({})),\n      Balance: getStructure(Balance.fromPartial({}))\n    },\n    _Registry: registry,\n    _Subscriptions: new Set()\n  };\n}; // initial state\n\n\nconst state = getDefaultState();\nexport default {\n  namespaced: true,\n  state,\n  mutations: {\n    RESET_STATE(state) {\n      Object.assign(state, getDefaultState());\n    },\n\n    QUERY(state, {\n      query,\n      key,\n      value\n    }) {\n      state[query][JSON.stringify(key)] = value;\n    },\n\n    SUBSCRIBE(state, subscription) {\n      state._Subscriptions.add(JSON.stringify(subscription));\n    },\n\n    UNSUBSCRIBE(state, subscription) {\n      state._Subscriptions.delete(JSON.stringify(subscription));\n    }\n\n  },\n  getters: {\n    getBalance: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Balance[JSON.stringify(params)] ?? {};\n    },\n    getAllBalances: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.AllBalances[JSON.stringify(params)] ?? {};\n    },\n    getTotalSupply: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.TotalSupply[JSON.stringify(params)] ?? {};\n    },\n    getSupplyOf: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.SupplyOf[JSON.stringify(params)] ?? {};\n    },\n    getParams: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Params[JSON.stringify(params)] ?? {};\n    },\n    getDenomMetadata: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.DenomMetadata[JSON.stringify(params)] ?? {};\n    },\n    getDenomsMetadata: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.DenomsMetadata[JSON.stringify(params)] ?? {};\n    },\n    getTypeStructure: state => type => {\n      return state._Structure[type].fields;\n    },\n    getRegistry: state => {\n      return state._Registry;\n    }\n  },\n  actions: {\n    init({\n      dispatch,\n      rootGetters\n    }) {\n      console.log('Vuex module: cosmos.bank.v1beta1 initialized!');\n\n      if (rootGetters['common/env/client']) {\n        rootGetters['common/env/client'].on('newblock', () => {\n          dispatch('StoreUpdate');\n        });\n      }\n    },\n\n    resetState({\n      commit\n    }) {\n      commit('RESET_STATE');\n    },\n\n    unsubscribe({\n      commit\n    }, subscription) {\n      commit('UNSUBSCRIBE', subscription);\n    },\n\n    async StoreUpdate({\n      state,\n      dispatch\n    }) {\n      state._Subscriptions.forEach(async subscription => {\n        try {\n          const sub = JSON.parse(subscription);\n          await dispatch(sub.action, sub.payload);\n        } catch (e) {\n          throw new SpVuexError('Subscriptions: ' + e.message);\n        }\n      });\n    },\n\n    async QueryBalance({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryBalance(key.address, query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryBalance(key.address, { ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'Balance',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryBalance',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getBalance']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryBalance', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryAllBalances({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryAllBalances(key.address, query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryAllBalances(key.address, { ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'AllBalances',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryAllBalances',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getAllBalances']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryAllBalances', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryTotalSupply({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryTotalSupply(query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryTotalSupply({ ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'TotalSupply',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryTotalSupply',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getTotalSupply']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryTotalSupply', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QuerySupplyOf({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.querySupplyOf(key.denom)).data;\n        commit('QUERY', {\n          query: 'SupplyOf',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QuerySupplyOf',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getSupplyOf']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QuerySupplyOf', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryParams({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryParams()).data;\n        commit('QUERY', {\n          query: 'Params',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryParams',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getParams']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDenomMetadata({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDenomMetadata(key.denom)).data;\n        commit('QUERY', {\n          query: 'DenomMetadata',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDenomMetadata',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDenomMetadata']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDenomMetadata', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryDenomsMetadata({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryDenomsMetadata(query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryDenomsMetadata({ ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'DenomsMetadata',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryDenomsMetadata',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getDenomsMetadata']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryDenomsMetadata', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async sendMsgMultiSend({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgMultiSend(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgMultiSend:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgMultiSend:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgSend({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgSend(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgSend:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgSend:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async MsgMultiSend({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgMultiSend(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgMultiSend:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgMultiSend:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgSend({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgSend(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgSend:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgSend:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/lisoleg/checkers/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.bank.v1beta1/index.js"],"names":["txClient","queryClient","MissingWalletError","registry","SpVuexError","SendAuthorization","Params","SendEnabled","Input","Output","Supply","DenomUnit","Metadata","Balance","initTxClient","vuexGetters","addr","initQueryClient","mergeResults","value","next_values","prop","Object","keys","Array","isArray","getStructure","template","structure","fields","key","entries","field","name","type","push","getDefaultState","AllBalances","TotalSupply","SupplyOf","DenomMetadata","DenomsMetadata","_Structure","fromPartial","_Registry","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","delete","getters","getBalance","params","getAllBalances","getTotalSupply","getSupplyOf","getParams","getDenomMetadata","getDenomsMetadata","getTypeStructure","getRegistry","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","sub","parse","action","payload","e","message","QueryBalance","options","subscribe","all","queryBalance","address","data","pagination","next_key","QueryAllBalances","queryAllBalances","QueryTotalSupply","queryTotalSupply","QuerySupplyOf","querySupplyOf","denom","QueryParams","queryParams","QueryDenomMetadata","queryDenomMetadata","QueryDenomsMetadata","queryDenomsMetadata","sendMsgMultiSend","fee","memo","msg","msgMultiSend","result","signAndBroadcast","amount","gas","sendMsgSend","msgSend","MsgMultiSend","MsgSend"],"mappings":"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","sourcesContent":["import { txClient, queryClient, MissingWalletError, registry } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { SendAuthorization } from \"./module/types/cosmos/bank/v1beta1/authz\";\nimport { Params } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { SendEnabled } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { Input } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { Output } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { Supply } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { DenomUnit } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { Metadata } from \"./module/types/cosmos/bank/v1beta1/bank\";\nimport { Balance } from \"./module/types/cosmos/bank/v1beta1/genesis\";\nexport { SendAuthorization, Params, SendEnabled, Input, Output, Supply, DenomUnit, Metadata, Balance };\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction mergeResults(value, next_values) {\n    for (let prop of Object.keys(next_values)) {\n        if (Array.isArray(next_values[prop])) {\n            value[prop] = [...value[prop], ...next_values[prop]];\n        }\n        else {\n            value[prop] = next_values[prop];\n        }\n    }\n    return value;\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        Balance: {},\n        AllBalances: {},\n        TotalSupply: {},\n        SupplyOf: {},\n        Params: {},\n        DenomMetadata: {},\n        DenomsMetadata: {},\n        _Structure: {\n            SendAuthorization: getStructure(SendAuthorization.fromPartial({})),\n            Params: getStructure(Params.fromPartial({})),\n            SendEnabled: getStructure(SendEnabled.fromPartial({})),\n            Input: getStructure(Input.fromPartial({})),\n            Output: getStructure(Output.fromPartial({})),\n            Supply: getStructure(Supply.fromPartial({})),\n            DenomUnit: getStructure(DenomUnit.fromPartial({})),\n            Metadata: getStructure(Metadata.fromPartial({})),\n            Balance: getStructure(Balance.fromPartial({})),\n        },\n        _Registry: registry,\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(JSON.stringify(subscription));\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(JSON.stringify(subscription));\n        }\n    },\n    getters: {\n        getBalance: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Balance[JSON.stringify(params)] ?? {};\n        },\n        getAllBalances: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.AllBalances[JSON.stringify(params)] ?? {};\n        },\n        getTotalSupply: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.TotalSupply[JSON.stringify(params)] ?? {};\n        },\n        getSupplyOf: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.SupplyOf[JSON.stringify(params)] ?? {};\n        },\n        getParams: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Params[JSON.stringify(params)] ?? {};\n        },\n        getDenomMetadata: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DenomMetadata[JSON.stringify(params)] ?? {};\n        },\n        getDenomsMetadata: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DenomsMetadata[JSON.stringify(params)] ?? {};\n        },\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        },\n        getRegistry: (state) => {\n            return state._Registry;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('Vuex module: cosmos.bank.v1beta1 initialized!');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach(async (subscription) => {\n                try {\n                    const sub = JSON.parse(subscription);\n                    await dispatch(sub.action, sub.payload);\n                }\n                catch (e) {\n                    throw new SpVuexError('Subscriptions: ' + e.message);\n                }\n            });\n        },\n        async QueryBalance({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryBalance(key.address, query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryBalance(key.address, { ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'Balance', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryBalance', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getBalance']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryBalance', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryAllBalances({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryAllBalances(key.address, query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryAllBalances(key.address, { ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'AllBalances', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryAllBalances', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getAllBalances']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryAllBalances', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryTotalSupply({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryTotalSupply(query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryTotalSupply({ ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'TotalSupply', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryTotalSupply', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getTotalSupply']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryTotalSupply', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QuerySupplyOf({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.querySupplyOf(key.denom)).data;\n                commit('QUERY', { query: 'SupplyOf', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QuerySupplyOf', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getSupplyOf']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QuerySupplyOf', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryParams({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryParams()).data;\n                commit('QUERY', { query: 'Params', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryParams', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getParams']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDenomMetadata({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDenomMetadata(key.denom)).data;\n                commit('QUERY', { query: 'DenomMetadata', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDenomMetadata', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDenomMetadata']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDenomMetadata', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryDenomsMetadata({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryDenomsMetadata(query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryDenomsMetadata({ ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'DenomsMetadata', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDenomsMetadata', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDenomsMetadata']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryDenomsMetadata', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async sendMsgMultiSend({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgMultiSend(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgMultiSend:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgMultiSend:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgSend({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgSend(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgSend:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSend:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async MsgMultiSend({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgMultiSend(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgMultiSend:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgMultiSend:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgSend({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgSend(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgSend:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSend:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n    }\n};\n"]},"metadata":{},"sourceType":"module"}