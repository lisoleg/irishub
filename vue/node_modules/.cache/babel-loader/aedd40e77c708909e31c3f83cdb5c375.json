{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupGovExtension = void 0;\n\nconst query_1 = require(\"cosmjs-types/cosmos/gov/v1beta1/query\");\n\nconst utils_1 = require(\"./utils\");\n\nfunction setupGovExtension(base) {\n  const rpc = utils_1.createProtobufRpcClient(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    gov: {\n      params: async parametersType => {\n        const response = await queryService.Params({\n          paramsType: parametersType\n        });\n        return response;\n      },\n      proposals: async (proposalStatus, depositorAddress, voterAddress, paginationKey) => {\n        const response = await queryService.Proposals({\n          proposalStatus,\n          depositor: depositorAddress,\n          voter: voterAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      proposal: async proposalId => {\n        const response = await queryService.Proposal({\n          proposalId: utils_1.longify(proposalId)\n        });\n        return response;\n      },\n      deposits: async (proposalId, paginationKey) => {\n        const response = await queryService.Deposits({\n          proposalId: utils_1.longify(proposalId),\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      deposit: async (proposalId, depositorAddress) => {\n        const response = await queryService.Deposit({\n          proposalId: utils_1.longify(proposalId),\n          depositor: depositorAddress\n        });\n        return response;\n      },\n      tally: async proposalId => {\n        const response = await queryService.TallyResult({\n          proposalId: utils_1.longify(proposalId)\n        });\n        return response;\n      },\n      votes: async (proposalId, paginationKey) => {\n        const response = await queryService.Votes({\n          proposalId: utils_1.longify(proposalId),\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      vote: async (proposalId, voterAddress) => {\n        const response = await queryService.Vote({\n          proposalId: utils_1.longify(proposalId),\n          voter: voterAddress\n        });\n        return response;\n      }\n    }\n  };\n}\n\nexports.setupGovExtension = setupGovExtension;","map":{"version":3,"sources":["../../src/queries/gov.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupGovExtension = void 0;\nconst query_1 = require(\"cosmjs-types/cosmos/gov/v1beta1/query\");\nconst utils_1 = require(\"./utils\");\nfunction setupGovExtension(base) {\n    const rpc = utils_1.createProtobufRpcClient(base);\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        gov: {\n            params: async (parametersType) => {\n                const response = await queryService.Params({ paramsType: parametersType });\n                return response;\n            },\n            proposals: async (proposalStatus, depositorAddress, voterAddress, paginationKey) => {\n                const response = await queryService.Proposals({\n                    proposalStatus,\n                    depositor: depositorAddress,\n                    voter: voterAddress,\n                    pagination: utils_1.createPagination(paginationKey),\n                });\n                return response;\n            },\n            proposal: async (proposalId) => {\n                const response = await queryService.Proposal({ proposalId: utils_1.longify(proposalId) });\n                return response;\n            },\n            deposits: async (proposalId, paginationKey) => {\n                const response = await queryService.Deposits({\n                    proposalId: utils_1.longify(proposalId),\n                    pagination: utils_1.createPagination(paginationKey),\n                });\n                return response;\n            },\n            deposit: async (proposalId, depositorAddress) => {\n                const response = await queryService.Deposit({\n                    proposalId: utils_1.longify(proposalId),\n                    depositor: depositorAddress,\n                });\n                return response;\n            },\n            tally: async (proposalId) => {\n                const response = await queryService.TallyResult({\n                    proposalId: utils_1.longify(proposalId),\n                });\n                return response;\n            },\n            votes: async (proposalId, paginationKey) => {\n                const response = await queryService.Votes({\n                    proposalId: utils_1.longify(proposalId),\n                    pagination: utils_1.createPagination(paginationKey),\n                });\n                return response;\n            },\n            vote: async (proposalId, voterAddress) => {\n                const response = await queryService.Vote({\n                    proposalId: utils_1.longify(proposalId),\n                    voter: voterAddress,\n                });\n                return response;\n            },\n        },\n    };\n}\nexports.setupGovExtension = setupGovExtension;\n//# sourceMappingURL=gov.js.map"]},"metadata":{},"sourceType":"script"}