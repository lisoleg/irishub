{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupIbcExtension = exports.heightQueryString = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst stargate_1 = require(\"@cosmjs/stargate\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst proofs_1 = require(\"../../codec/confio/proofs\");\n\nconst any_1 = require(\"../../codec/google/protobuf/any\");\n\nconst channel_1 = require(\"../../codec/ibc/core/channel/v1/channel\");\n\nconst query_1 = require(\"../../codec/ibc/core/channel/v1/query\");\n\nconst query_2 = require(\"../../codec/ibc/core/client/v1/query\");\n\nconst commitment_1 = require(\"../../codec/ibc/core/commitment/v1/commitment\");\n\nconst connection_1 = require(\"../../codec/ibc/core/connection/v1/connection\");\n\nconst query_3 = require(\"../../codec/ibc/core/connection/v1/query\");\n\nconst tendermint_1 = require(\"../../codec/ibc/lightclients/tendermint/v1/tendermint\");\n\nfunction decodeTendermintClientStateAny(clientState) {\n  if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== '/ibc.lightclients.tendermint.v1.ClientState') {\n    throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n  }\n\n  return tendermint_1.ClientState.decode(clientState.value);\n}\n\nfunction decodeTendermintConsensusStateAny(clientState) {\n  if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== '/ibc.lightclients.tendermint.v1.ConsensusState') {\n    throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n  }\n\n  return tendermint_1.ConsensusState.decode(clientState.value);\n}\n\nfunction heightQueryString(height) {\n  return `${height.revisionNumber}-${height.revisionHeight}`;\n}\n\nexports.heightQueryString = heightQueryString;\n\nfunction setupIbcExtension(base) {\n  const rpc = stargate_1.createProtobufRpcClient(base); // Use these services to get easy typed access to query methods\n  // These cannot be used for proof verification\n\n  const channelQueryService = new query_1.QueryClientImpl(rpc);\n  const clientQueryService = new query_2.QueryClientImpl(rpc);\n  const connectionQueryService = new query_3.QueryClientImpl(rpc);\n  return {\n    ibc: {\n      channel: {\n        channel: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {\n          return channelQueryService.Channel({\n            portId,\n            channelId\n          });\n        }),\n        channels: paginationKey => __awaiter(this, void 0, void 0, function* () {\n          return channelQueryService.Channels({\n            pagination: stargate_1.createPagination(paginationKey)\n          });\n        }),\n        allChannels: () => __awaiter(this, void 0, void 0, function* () {\n          var _a;\n\n          const channels = [];\n          let response;\n          let key;\n\n          do {\n            response = yield channelQueryService.Channels({\n              pagination: stargate_1.createPagination(key)\n            });\n            channels.push(...response.channels);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key);\n\n          return {\n            channels,\n            height: response.height\n          };\n        }),\n        connectionChannels: (connection, paginationKey) => __awaiter(this, void 0, void 0, function* () {\n          return channelQueryService.ConnectionChannels({\n            connection,\n            pagination: stargate_1.createPagination(paginationKey)\n          });\n        }),\n        allConnectionChannels: connection => __awaiter(this, void 0, void 0, function* () {\n          var _b;\n\n          const channels = [];\n          let response;\n          let key;\n\n          do {\n            response = yield channelQueryService.ConnectionChannels({\n              connection,\n              pagination: stargate_1.createPagination(key)\n            });\n            channels.push(...response.channels);\n            key = (_b = response.pagination) === null || _b === void 0 ? void 0 : _b.nextKey;\n          } while (key);\n\n          return {\n            channels,\n            height: response.height\n          };\n        }),\n        clientState: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {\n          return channelQueryService.ChannelClientState({\n            portId,\n            channelId\n          });\n        }),\n        consensusState: (portId, channelId, revisionNumber, revisionHeight) => __awaiter(this, void 0, void 0, function* () {\n          return channelQueryService.ChannelConsensusState({\n            portId,\n            channelId,\n            revisionNumber: long_1.default.fromNumber(revisionNumber, true),\n            revisionHeight: long_1.default.fromNumber(revisionHeight, true)\n          });\n        }),\n        packetCommitment: (portId, channelId, sequence) => __awaiter(this, void 0, void 0, function* () {\n          return channelQueryService.PacketCommitment({\n            portId,\n            channelId,\n            sequence\n          });\n        }),\n        packetCommitments: (portId, channelId, paginationKey) => __awaiter(this, void 0, void 0, function* () {\n          return channelQueryService.PacketCommitments({\n            channelId,\n            portId,\n            pagination: stargate_1.createPagination(paginationKey)\n          });\n        }),\n        allPacketCommitments: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {\n          var _c;\n\n          const commitments = [];\n          let response;\n          let key;\n\n          do {\n            response = yield channelQueryService.PacketCommitments({\n              channelId,\n              portId,\n              pagination: stargate_1.createPagination(key)\n            });\n            commitments.push(...response.commitments);\n            key = (_c = response.pagination) === null || _c === void 0 ? void 0 : _c.nextKey;\n          } while (key);\n\n          return {\n            commitments,\n            height: response.height\n          };\n        }),\n        packetReceipt: (portId, channelId, sequence) => __awaiter(this, void 0, void 0, function* () {\n          return channelQueryService.PacketReceipt({\n            portId,\n            channelId,\n            sequence: long_1.default.fromNumber(sequence, true)\n          });\n        }),\n        packetAcknowledgement: (portId, channelId, sequence) => __awaiter(this, void 0, void 0, function* () {\n          return channelQueryService.PacketAcknowledgement({\n            portId,\n            channelId,\n            sequence: long_1.default.fromNumber(sequence, true)\n          });\n        }),\n        packetAcknowledgements: (portId, channelId, paginationKey) => __awaiter(this, void 0, void 0, function* () {\n          return channelQueryService.PacketAcknowledgements({\n            portId,\n            channelId,\n            pagination: stargate_1.createPagination(paginationKey)\n          });\n        }),\n        allPacketAcknowledgements: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {\n          var _d;\n\n          const acknowledgements = [];\n          let response;\n          let key;\n\n          do {\n            response = yield channelQueryService.PacketAcknowledgements({\n              channelId,\n              portId,\n              pagination: stargate_1.createPagination(key)\n            });\n            acknowledgements.push(...response.acknowledgements);\n            key = (_d = response.pagination) === null || _d === void 0 ? void 0 : _d.nextKey;\n          } while (key);\n\n          return {\n            acknowledgements,\n            height: response.height\n          };\n        }),\n        unreceivedPackets: (portId, channelId, packetCommitmentSequences) => __awaiter(this, void 0, void 0, function* () {\n          return channelQueryService.UnreceivedPackets({\n            portId,\n            channelId,\n            packetCommitmentSequences: packetCommitmentSequences.map(s => long_1.default.fromNumber(s, true))\n          });\n        }),\n        unreceivedAcks: (portId, channelId, packetAckSequences) => __awaiter(this, void 0, void 0, function* () {\n          return channelQueryService.UnreceivedAcks({\n            portId,\n            channelId,\n            packetAckSequences: packetAckSequences.map(s => long_1.default.fromNumber(s, true))\n          });\n        }),\n        nextSequenceReceive: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {\n          return channelQueryService.NextSequenceReceive({\n            portId,\n            channelId\n          });\n        })\n      },\n      client: {\n        state: clientId => clientQueryService.ClientState({\n          clientId\n        }),\n        states: paginationKey => clientQueryService.ClientStates({\n          pagination: stargate_1.createPagination(paginationKey)\n        }),\n        allStates: () => __awaiter(this, void 0, void 0, function* () {\n          var _e;\n\n          const clientStates = [];\n          let response;\n          let key;\n\n          do {\n            response = yield clientQueryService.ClientStates({\n              pagination: stargate_1.createPagination(key)\n            });\n            clientStates.push(...response.clientStates);\n            key = (_e = response.pagination) === null || _e === void 0 ? void 0 : _e.nextKey;\n          } while (key);\n\n          return {\n            clientStates\n          };\n        }),\n        consensusState: (clientId, consensusHeight) => clientQueryService.ConsensusState(query_2.QueryConsensusStateRequest.fromPartial({\n          clientId,\n          revisionHeight: consensusHeight !== undefined ? long_1.default.fromNumber(consensusHeight, true) : undefined,\n          latestHeight: consensusHeight === undefined\n        })),\n        consensusStates: (clientId, paginationKey) => clientQueryService.ConsensusStates({\n          clientId,\n          pagination: stargate_1.createPagination(paginationKey)\n        }),\n        allConsensusStates: clientId => __awaiter(this, void 0, void 0, function* () {\n          var _f;\n\n          const consensusStates = [];\n          let response;\n          let key;\n\n          do {\n            response = yield clientQueryService.ConsensusStates({\n              clientId,\n              pagination: stargate_1.createPagination(key)\n            });\n            consensusStates.push(...response.consensusStates);\n            key = (_f = response.pagination) === null || _f === void 0 ? void 0 : _f.nextKey;\n          } while (key);\n\n          return {\n            consensusStates\n          };\n        }),\n        params: () => clientQueryService.ClientParams({}),\n        stateTm: clientId => __awaiter(this, void 0, void 0, function* () {\n          const response = yield clientQueryService.ClientState({\n            clientId\n          });\n          return decodeTendermintClientStateAny(response.clientState);\n        }),\n        statesTm: paginationKey => __awaiter(this, void 0, void 0, function* () {\n          const {\n            clientStates\n          } = yield clientQueryService.ClientStates({\n            pagination: stargate_1.createPagination(paginationKey)\n          });\n          return clientStates.map(({\n            clientState\n          }) => decodeTendermintClientStateAny(clientState));\n        }),\n        allStatesTm: () => __awaiter(this, void 0, void 0, function* () {\n          var _g;\n\n          const clientStates = [];\n          let response;\n          let key;\n\n          do {\n            response = yield clientQueryService.ClientStates({\n              pagination: stargate_1.createPagination(key)\n            });\n            clientStates.push(...response.clientStates);\n            key = (_g = response.pagination) === null || _g === void 0 ? void 0 : _g.nextKey;\n          } while (key);\n\n          return clientStates.map(({\n            clientState\n          }) => decodeTendermintClientStateAny(clientState));\n        }),\n        consensusStateTm: (clientId, consensusHeight) => __awaiter(this, void 0, void 0, function* () {\n          const response = yield clientQueryService.ConsensusState(query_2.QueryConsensusStateRequest.fromPartial({\n            clientId,\n            revisionHeight: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionHeight,\n            revisionNumber: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionNumber,\n            latestHeight: consensusHeight === undefined\n          }));\n          return decodeTendermintConsensusStateAny(response.consensusState);\n        })\n      },\n      connection: {\n        connection: connectionId => __awaiter(this, void 0, void 0, function* () {\n          return connectionQueryService.Connection({\n            connectionId\n          });\n        }),\n        connections: paginationKey => __awaiter(this, void 0, void 0, function* () {\n          return connectionQueryService.Connections({\n            pagination: stargate_1.createPagination(paginationKey)\n          });\n        }),\n        allConnections: () => __awaiter(this, void 0, void 0, function* () {\n          var _h;\n\n          const connections = [];\n          let response;\n          let key;\n\n          do {\n            response = yield connectionQueryService.Connections({\n              pagination: stargate_1.createPagination(key)\n            });\n            connections.push(...response.connections);\n            key = (_h = response.pagination) === null || _h === void 0 ? void 0 : _h.nextKey;\n          } while (key);\n\n          return {\n            connections,\n            height: response.height\n          };\n        }),\n        clientConnections: clientId => __awaiter(this, void 0, void 0, function* () {\n          return connectionQueryService.ClientConnections({\n            clientId\n          });\n        }),\n        clientState: connectionId => __awaiter(this, void 0, void 0, function* () {\n          return connectionQueryService.ConnectionClientState({\n            connectionId\n          });\n        }),\n        consensusState: (connectionId, revisionHeight) => __awaiter(this, void 0, void 0, function* () {\n          return connectionQueryService.ConnectionConsensusState(query_3.QueryConnectionConsensusStateRequest.fromPartial({\n            connectionId,\n            revisionHeight: long_1.default.fromNumber(revisionHeight, true)\n          }));\n        })\n      },\n      proof: {\n        // these keys can all be found here: https://github.com/cosmos/cosmos-sdk/blob/v0.41.1/x/ibc/core/24-host/keys.go\n        // note some have changed since the v0.40 pre-release this code was based on\n        channel: {\n          channel: (portId, channelId, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L117-L120\n            const key = encoding_1.toAscii(`channelEnds/ports/${portId}/channels/${channelId}`);\n            const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());\n            const channel = channel_1.Channel.decode(proven.value);\n            const proof = convertProofsToIcs23(proven.proof);\n            return {\n              channel,\n              proof,\n              proofHeight\n            };\n          }),\n          // designed only for timeout, modify if we need actual value not just proof\n          // could not verify absence of key receipts/ports/transfer/channels/channel-5/sequences/2\n          receiptProof: (portId, channelId, sequence, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n            const key = encoding_1.toAscii(`receipts/ports/${portId}/channels/${channelId}/sequences/${sequence}`);\n            const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());\n            const proof = convertProofsToIcs23(proven.proof);\n            return proof;\n          }),\n          packetCommitment: (portId, channelId, sequence, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n            const key = encoding_1.toAscii(`commitments/ports/${portId}/channels/${channelId}/sequences/${sequence.toNumber()}`);\n            const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());\n            const commitment = proven.value;\n            const proof = convertProofsToIcs23(proven.proof);\n            return {\n              commitment,\n              proof,\n              proofHeight\n            };\n          }),\n          packetAcknowledgement: (portId, channelId, sequence, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n            const key = encoding_1.toAscii(`acks/ports/${portId}/channels/${channelId}/sequences/${sequence}`);\n            const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());\n            const acknowledgement = proven.value;\n            const proof = convertProofsToIcs23(proven.proof);\n            return {\n              acknowledgement,\n              proof,\n              proofHeight\n            };\n          }),\n          nextSequenceReceive: (portId, channelId, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n            const key = encoding_1.toAscii(`nextSequenceRecv/ports/${portId}/channels/${channelId}`);\n            const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());\n            const nextSequenceReceive = long_1.default.fromBytesBE([...proven.value]);\n            const proof = convertProofsToIcs23(proven.proof);\n            return {\n              nextSequenceReceive,\n              proof,\n              proofHeight\n            };\n          })\n        },\n        client: {\n          state: (clientId, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n            const key = `clients/${clientId}/clientState`;\n            const proven = yield base.queryRawProof('ibc', encoding_1.toAscii(key), proofHeight.revisionHeight.toNumber());\n            const clientState = any_1.Any.decode(proven.value);\n            const proof = convertProofsToIcs23(proven.proof);\n            return {\n              clientState,\n              proof,\n              proofHeight\n            };\n          }),\n          consensusState: (clientId, consensusHeight, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n            const height = heightQueryString(consensusHeight);\n            const key = `clients/${clientId}/consensusStates/${height}`;\n            const proven = yield base.queryRawProof('ibc', encoding_1.toAscii(key), proofHeight.revisionHeight.toNumber());\n            const consensusState = any_1.Any.decode(proven.value);\n            const proof = convertProofsToIcs23(proven.proof);\n            return {\n              consensusState,\n              proof,\n              proofHeight\n            };\n          })\n        },\n        connection: {\n          connection: (connectionId, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n            const key = `connections/${connectionId}`;\n            const proven = yield base.queryRawProof('ibc', encoding_1.toAscii(key), proofHeight.revisionHeight.toNumber());\n            const connection = connection_1.ConnectionEnd.decode(proven.value);\n            const proof = convertProofsToIcs23(proven.proof);\n            return {\n              connection,\n              proof,\n              proofHeight\n            };\n          })\n        }\n      }\n    }\n  };\n}\n\nexports.setupIbcExtension = setupIbcExtension;\n\nfunction convertProofsToIcs23(ops) {\n  const proofs = ops.ops.map(op => proofs_1.CommitmentProof.decode(op.data));\n  const resp = commitment_1.MerkleProof.fromPartial({\n    proofs\n  });\n  return commitment_1.MerkleProof.encode(resp).finish();\n}","map":{"version":3,"sources":["../../../src/lib/queries/ibc.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupIbcExtension = exports.heightQueryString = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst stargate_1 = require(\"@cosmjs/stargate\");\nconst long_1 = __importDefault(require(\"long\"));\nconst proofs_1 = require(\"../../codec/confio/proofs\");\nconst any_1 = require(\"../../codec/google/protobuf/any\");\nconst channel_1 = require(\"../../codec/ibc/core/channel/v1/channel\");\nconst query_1 = require(\"../../codec/ibc/core/channel/v1/query\");\nconst query_2 = require(\"../../codec/ibc/core/client/v1/query\");\nconst commitment_1 = require(\"../../codec/ibc/core/commitment/v1/commitment\");\nconst connection_1 = require(\"../../codec/ibc/core/connection/v1/connection\");\nconst query_3 = require(\"../../codec/ibc/core/connection/v1/query\");\nconst tendermint_1 = require(\"../../codec/ibc/lightclients/tendermint/v1/tendermint\");\nfunction decodeTendermintClientStateAny(clientState) {\n    if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== '/ibc.lightclients.tendermint.v1.ClientState') {\n        throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n    }\n    return tendermint_1.ClientState.decode(clientState.value);\n}\nfunction decodeTendermintConsensusStateAny(clientState) {\n    if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== '/ibc.lightclients.tendermint.v1.ConsensusState') {\n        throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n    }\n    return tendermint_1.ConsensusState.decode(clientState.value);\n}\nfunction heightQueryString(height) {\n    return `${height.revisionNumber}-${height.revisionHeight}`;\n}\nexports.heightQueryString = heightQueryString;\nfunction setupIbcExtension(base) {\n    const rpc = stargate_1.createProtobufRpcClient(base);\n    // Use these services to get easy typed access to query methods\n    // These cannot be used for proof verification\n    const channelQueryService = new query_1.QueryClientImpl(rpc);\n    const clientQueryService = new query_2.QueryClientImpl(rpc);\n    const connectionQueryService = new query_3.QueryClientImpl(rpc);\n    return {\n        ibc: {\n            channel: {\n                channel: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {\n                    return channelQueryService.Channel({\n                        portId,\n                        channelId,\n                    });\n                }),\n                channels: (paginationKey) => __awaiter(this, void 0, void 0, function* () {\n                    return channelQueryService.Channels({\n                        pagination: stargate_1.createPagination(paginationKey),\n                    });\n                }),\n                allChannels: () => __awaiter(this, void 0, void 0, function* () {\n                    var _a;\n                    const channels = [];\n                    let response;\n                    let key;\n                    do {\n                        response = yield channelQueryService.Channels({\n                            pagination: stargate_1.createPagination(key),\n                        });\n                        channels.push(...response.channels);\n                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n                    } while (key);\n                    return {\n                        channels,\n                        height: response.height,\n                    };\n                }),\n                connectionChannels: (connection, paginationKey) => __awaiter(this, void 0, void 0, function* () {\n                    return channelQueryService.ConnectionChannels({\n                        connection,\n                        pagination: stargate_1.createPagination(paginationKey),\n                    });\n                }),\n                allConnectionChannels: (connection) => __awaiter(this, void 0, void 0, function* () {\n                    var _b;\n                    const channels = [];\n                    let response;\n                    let key;\n                    do {\n                        response = yield channelQueryService.ConnectionChannels({\n                            connection,\n                            pagination: stargate_1.createPagination(key),\n                        });\n                        channels.push(...response.channels);\n                        key = (_b = response.pagination) === null || _b === void 0 ? void 0 : _b.nextKey;\n                    } while (key);\n                    return {\n                        channels,\n                        height: response.height,\n                    };\n                }),\n                clientState: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {\n                    return channelQueryService.ChannelClientState({\n                        portId,\n                        channelId,\n                    });\n                }),\n                consensusState: (portId, channelId, revisionNumber, revisionHeight) => __awaiter(this, void 0, void 0, function* () {\n                    return channelQueryService.ChannelConsensusState({\n                        portId,\n                        channelId,\n                        revisionNumber: long_1.default.fromNumber(revisionNumber, true),\n                        revisionHeight: long_1.default.fromNumber(revisionHeight, true),\n                    });\n                }),\n                packetCommitment: (portId, channelId, sequence) => __awaiter(this, void 0, void 0, function* () {\n                    return channelQueryService.PacketCommitment({\n                        portId,\n                        channelId,\n                        sequence,\n                    });\n                }),\n                packetCommitments: (portId, channelId, paginationKey) => __awaiter(this, void 0, void 0, function* () {\n                    return channelQueryService.PacketCommitments({\n                        channelId,\n                        portId,\n                        pagination: stargate_1.createPagination(paginationKey),\n                    });\n                }),\n                allPacketCommitments: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {\n                    var _c;\n                    const commitments = [];\n                    let response;\n                    let key;\n                    do {\n                        response = yield channelQueryService.PacketCommitments({\n                            channelId,\n                            portId,\n                            pagination: stargate_1.createPagination(key),\n                        });\n                        commitments.push(...response.commitments);\n                        key = (_c = response.pagination) === null || _c === void 0 ? void 0 : _c.nextKey;\n                    } while (key);\n                    return {\n                        commitments,\n                        height: response.height,\n                    };\n                }),\n                packetReceipt: (portId, channelId, sequence) => __awaiter(this, void 0, void 0, function* () {\n                    return channelQueryService.PacketReceipt({\n                        portId,\n                        channelId,\n                        sequence: long_1.default.fromNumber(sequence, true),\n                    });\n                }),\n                packetAcknowledgement: (portId, channelId, sequence) => __awaiter(this, void 0, void 0, function* () {\n                    return channelQueryService.PacketAcknowledgement({\n                        portId,\n                        channelId,\n                        sequence: long_1.default.fromNumber(sequence, true),\n                    });\n                }),\n                packetAcknowledgements: (portId, channelId, paginationKey) => __awaiter(this, void 0, void 0, function* () {\n                    return channelQueryService.PacketAcknowledgements({\n                        portId,\n                        channelId,\n                        pagination: stargate_1.createPagination(paginationKey),\n                    });\n                }),\n                allPacketAcknowledgements: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {\n                    var _d;\n                    const acknowledgements = [];\n                    let response;\n                    let key;\n                    do {\n                        response = yield channelQueryService.PacketAcknowledgements({\n                            channelId,\n                            portId,\n                            pagination: stargate_1.createPagination(key),\n                        });\n                        acknowledgements.push(...response.acknowledgements);\n                        key = (_d = response.pagination) === null || _d === void 0 ? void 0 : _d.nextKey;\n                    } while (key);\n                    return {\n                        acknowledgements,\n                        height: response.height,\n                    };\n                }),\n                unreceivedPackets: (portId, channelId, packetCommitmentSequences) => __awaiter(this, void 0, void 0, function* () {\n                    return channelQueryService.UnreceivedPackets({\n                        portId,\n                        channelId,\n                        packetCommitmentSequences: packetCommitmentSequences.map((s) => long_1.default.fromNumber(s, true)),\n                    });\n                }),\n                unreceivedAcks: (portId, channelId, packetAckSequences) => __awaiter(this, void 0, void 0, function* () {\n                    return channelQueryService.UnreceivedAcks({\n                        portId,\n                        channelId,\n                        packetAckSequences: packetAckSequences.map((s) => long_1.default.fromNumber(s, true)),\n                    });\n                }),\n                nextSequenceReceive: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {\n                    return channelQueryService.NextSequenceReceive({\n                        portId,\n                        channelId,\n                    });\n                }),\n            },\n            client: {\n                state: (clientId) => clientQueryService.ClientState({ clientId }),\n                states: (paginationKey) => clientQueryService.ClientStates({\n                    pagination: stargate_1.createPagination(paginationKey),\n                }),\n                allStates: () => __awaiter(this, void 0, void 0, function* () {\n                    var _e;\n                    const clientStates = [];\n                    let response;\n                    let key;\n                    do {\n                        response = yield clientQueryService.ClientStates({\n                            pagination: stargate_1.createPagination(key),\n                        });\n                        clientStates.push(...response.clientStates);\n                        key = (_e = response.pagination) === null || _e === void 0 ? void 0 : _e.nextKey;\n                    } while (key);\n                    return {\n                        clientStates,\n                    };\n                }),\n                consensusState: (clientId, consensusHeight) => clientQueryService.ConsensusState(query_2.QueryConsensusStateRequest.fromPartial({\n                    clientId,\n                    revisionHeight: consensusHeight !== undefined\n                        ? long_1.default.fromNumber(consensusHeight, true)\n                        : undefined,\n                    latestHeight: consensusHeight === undefined,\n                })),\n                consensusStates: (clientId, paginationKey) => clientQueryService.ConsensusStates({\n                    clientId,\n                    pagination: stargate_1.createPagination(paginationKey),\n                }),\n                allConsensusStates: (clientId) => __awaiter(this, void 0, void 0, function* () {\n                    var _f;\n                    const consensusStates = [];\n                    let response;\n                    let key;\n                    do {\n                        response = yield clientQueryService.ConsensusStates({\n                            clientId,\n                            pagination: stargate_1.createPagination(key),\n                        });\n                        consensusStates.push(...response.consensusStates);\n                        key = (_f = response.pagination) === null || _f === void 0 ? void 0 : _f.nextKey;\n                    } while (key);\n                    return {\n                        consensusStates,\n                    };\n                }),\n                params: () => clientQueryService.ClientParams({}),\n                stateTm: (clientId) => __awaiter(this, void 0, void 0, function* () {\n                    const response = yield clientQueryService.ClientState({ clientId });\n                    return decodeTendermintClientStateAny(response.clientState);\n                }),\n                statesTm: (paginationKey) => __awaiter(this, void 0, void 0, function* () {\n                    const { clientStates } = yield clientQueryService.ClientStates({\n                        pagination: stargate_1.createPagination(paginationKey),\n                    });\n                    return clientStates.map(({ clientState }) => decodeTendermintClientStateAny(clientState));\n                }),\n                allStatesTm: () => __awaiter(this, void 0, void 0, function* () {\n                    var _g;\n                    const clientStates = [];\n                    let response;\n                    let key;\n                    do {\n                        response = yield clientQueryService.ClientStates({\n                            pagination: stargate_1.createPagination(key),\n                        });\n                        clientStates.push(...response.clientStates);\n                        key = (_g = response.pagination) === null || _g === void 0 ? void 0 : _g.nextKey;\n                    } while (key);\n                    return clientStates.map(({ clientState }) => decodeTendermintClientStateAny(clientState));\n                }),\n                consensusStateTm: (clientId, consensusHeight) => __awaiter(this, void 0, void 0, function* () {\n                    const response = yield clientQueryService.ConsensusState(query_2.QueryConsensusStateRequest.fromPartial({\n                        clientId,\n                        revisionHeight: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionHeight,\n                        revisionNumber: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionNumber,\n                        latestHeight: consensusHeight === undefined,\n                    }));\n                    return decodeTendermintConsensusStateAny(response.consensusState);\n                }),\n            },\n            connection: {\n                connection: (connectionId) => __awaiter(this, void 0, void 0, function* () {\n                    return connectionQueryService.Connection({\n                        connectionId,\n                    });\n                }),\n                connections: (paginationKey) => __awaiter(this, void 0, void 0, function* () {\n                    return connectionQueryService.Connections({\n                        pagination: stargate_1.createPagination(paginationKey),\n                    });\n                }),\n                allConnections: () => __awaiter(this, void 0, void 0, function* () {\n                    var _h;\n                    const connections = [];\n                    let response;\n                    let key;\n                    do {\n                        response = yield connectionQueryService.Connections({\n                            pagination: stargate_1.createPagination(key),\n                        });\n                        connections.push(...response.connections);\n                        key = (_h = response.pagination) === null || _h === void 0 ? void 0 : _h.nextKey;\n                    } while (key);\n                    return {\n                        connections,\n                        height: response.height,\n                    };\n                }),\n                clientConnections: (clientId) => __awaiter(this, void 0, void 0, function* () {\n                    return connectionQueryService.ClientConnections({\n                        clientId,\n                    });\n                }),\n                clientState: (connectionId) => __awaiter(this, void 0, void 0, function* () {\n                    return connectionQueryService.ConnectionClientState({\n                        connectionId,\n                    });\n                }),\n                consensusState: (connectionId, revisionHeight) => __awaiter(this, void 0, void 0, function* () {\n                    return connectionQueryService.ConnectionConsensusState(query_3.QueryConnectionConsensusStateRequest.fromPartial({\n                        connectionId,\n                        revisionHeight: long_1.default.fromNumber(revisionHeight, true),\n                    }));\n                }),\n            },\n            proof: {\n                // these keys can all be found here: https://github.com/cosmos/cosmos-sdk/blob/v0.41.1/x/ibc/core/24-host/keys.go\n                // note some have changed since the v0.40 pre-release this code was based on\n                channel: {\n                    channel: (portId, channelId, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n                        // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L117-L120\n                        const key = encoding_1.toAscii(`channelEnds/ports/${portId}/channels/${channelId}`);\n                        const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());\n                        const channel = channel_1.Channel.decode(proven.value);\n                        const proof = convertProofsToIcs23(proven.proof);\n                        return {\n                            channel,\n                            proof,\n                            proofHeight,\n                        };\n                    }),\n                    // designed only for timeout, modify if we need actual value not just proof\n                    // could not verify absence of key receipts/ports/transfer/channels/channel-5/sequences/2\n                    receiptProof: (portId, channelId, sequence, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n                        const key = encoding_1.toAscii(`receipts/ports/${portId}/channels/${channelId}/sequences/${sequence}`);\n                        const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());\n                        const proof = convertProofsToIcs23(proven.proof);\n                        return proof;\n                    }),\n                    packetCommitment: (portId, channelId, sequence, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n                        const key = encoding_1.toAscii(`commitments/ports/${portId}/channels/${channelId}/sequences/${sequence.toNumber()}`);\n                        const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());\n                        const commitment = proven.value;\n                        const proof = convertProofsToIcs23(proven.proof);\n                        return {\n                            commitment,\n                            proof,\n                            proofHeight,\n                        };\n                    }),\n                    packetAcknowledgement: (portId, channelId, sequence, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n                        const key = encoding_1.toAscii(`acks/ports/${portId}/channels/${channelId}/sequences/${sequence}`);\n                        const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());\n                        const acknowledgement = proven.value;\n                        const proof = convertProofsToIcs23(proven.proof);\n                        return {\n                            acknowledgement,\n                            proof,\n                            proofHeight,\n                        };\n                    }),\n                    nextSequenceReceive: (portId, channelId, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n                        const key = encoding_1.toAscii(`nextSequenceRecv/ports/${portId}/channels/${channelId}`);\n                        const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());\n                        const nextSequenceReceive = long_1.default.fromBytesBE([...proven.value]);\n                        const proof = convertProofsToIcs23(proven.proof);\n                        return {\n                            nextSequenceReceive,\n                            proof,\n                            proofHeight,\n                        };\n                    }),\n                },\n                client: {\n                    state: (clientId, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n                        const key = `clients/${clientId}/clientState`;\n                        const proven = yield base.queryRawProof('ibc', encoding_1.toAscii(key), proofHeight.revisionHeight.toNumber());\n                        const clientState = any_1.Any.decode(proven.value);\n                        const proof = convertProofsToIcs23(proven.proof);\n                        return {\n                            clientState,\n                            proof,\n                            proofHeight,\n                        };\n                    }),\n                    consensusState: (clientId, consensusHeight, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n                        const height = heightQueryString(consensusHeight);\n                        const key = `clients/${clientId}/consensusStates/${height}`;\n                        const proven = yield base.queryRawProof('ibc', encoding_1.toAscii(key), proofHeight.revisionHeight.toNumber());\n                        const consensusState = any_1.Any.decode(proven.value);\n                        const proof = convertProofsToIcs23(proven.proof);\n                        return {\n                            consensusState,\n                            proof,\n                            proofHeight,\n                        };\n                    }),\n                },\n                connection: {\n                    connection: (connectionId, proofHeight) => __awaiter(this, void 0, void 0, function* () {\n                        const key = `connections/${connectionId}`;\n                        const proven = yield base.queryRawProof('ibc', encoding_1.toAscii(key), proofHeight.revisionHeight.toNumber());\n                        const connection = connection_1.ConnectionEnd.decode(proven.value);\n                        const proof = convertProofsToIcs23(proven.proof);\n                        return {\n                            connection,\n                            proof,\n                            proofHeight,\n                        };\n                    }),\n                },\n            },\n        },\n    };\n}\nexports.setupIbcExtension = setupIbcExtension;\nfunction convertProofsToIcs23(ops) {\n    const proofs = ops.ops.map((op) => proofs_1.CommitmentProof.decode(op.data));\n    const resp = commitment_1.MerkleProof.fromPartial({\n        proofs,\n    });\n    return commitment_1.MerkleProof.encode(resp).finish();\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}