{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _starportSigningClient = _interopRequireDefault(require(\"./libs/starportSigningClient\"));\n\nvar _SpVuexError = _interopRequireDefault(require(\"../../../errors/SpVuexError\"));\n\nvar _build = require(\"@confio/relayer/build\");\n\nvar _protoSigning = require(\"@cosmjs/proto-signing\");\n\nvar _crypto = require(\"@cosmjs/crypto\");\n\nvar _utils = require(\"@cosmjs/utils\");\n\nvar _launchpad = require(\"@cosmjs/launchpad\");\n\nvar _stargate = require(\"@cosmjs/stargate\");\n\nvar _tendermintRpc = require(\"@cosmjs/tendermint-rpc\");\n\nvar _tx = require(\"@confio/relayer/build/codec/ibc/applications/transfer/v1/tx\");\n\nvar _tx2 = require(\"@confio/relayer/build/codec/ibc/core/channel/v1/tx\");\n\nvar _tx3 = require(\"@confio/relayer/build/codec/ibc/core/client/v1/tx\");\n\nvar _tx4 = require(\"@confio/relayer/build/codec/ibc/core/connection/v1/tx\");\n\nvar _excluded = [\"name\", \"link\"],\n    _excluded2 = [\"name\"];\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ibcRegistry() {\n  return new _protoSigning.Registry([].concat(_toConsumableArray(_stargate.defaultRegistryTypes), [['/ibc.core.client.v1.MsgCreateClient', _tx3.MsgCreateClient], ['/ibc.core.client.v1.MsgUpdateClient', _tx3.MsgUpdateClient], ['/ibc.core.connection.v1.MsgConnectionOpenInit', _tx4.MsgConnectionOpenInit], ['/ibc.core.connection.v1.MsgConnectionOpenTry', _tx4.MsgConnectionOpenTry], ['/ibc.core.connection.v1.MsgConnectionOpenAck', _tx4.MsgConnectionOpenAck], ['/ibc.core.connection.v1.MsgConnectionOpenConfirm', _tx4.MsgConnectionOpenConfirm], ['/ibc.core.channel.v1.MsgChannelOpenInit', _tx2.MsgChannelOpenInit], ['/ibc.core.channel.v1.MsgChannelOpenTry', _tx2.MsgChannelOpenTry], ['/ibc.core.channel.v1.MsgChannelOpenAck', _tx2.MsgChannelOpenAck], ['/ibc.core.channel.v1.MsgChannelOpenConfirm', _tx2.MsgChannelOpenConfirm], ['/ibc.core.channel.v1.MsgRecvPacket', _tx2.MsgRecvPacket], ['/ibc.core.channel.v1.MsgAcknowledgement', _tx2.MsgAcknowledgement], ['/ibc.core.channel.v1.MsgTimeout', _tx2.MsgTimeout], ['/ibc.applications.transfer.v1.MsgTransfer', _tx.MsgTransfer]]));\n}\n\nvar getDefaultState = function getDefaultState() {\n  return {\n    relayers: [],\n    transientLog: {\n      msg: ''\n    },\n    relayerLinks: {}\n  };\n}; // initial state\n\n\nvar state = getDefaultState();\nvar _default = {\n  namespaced: true,\n  state: state,\n  getters: {\n    getRelayer: function getRelayer(state) {\n      return function (name) {\n        return state.relayers.find(function (x) {\n          return x.name == name;\n        });\n      };\n    },\n    getRelayers: function getRelayers(state) {\n      return state.relayers;\n    },\n    getRelayerLink: function getRelayerLink(state) {\n      return function (name) {\n        return state.relayerLinks[name];\n      };\n    },\n    chainFromChannel: function chainFromChannel(state) {\n      return function (channel) {\n        var _state$relayers$find$, _state$relayers$find;\n\n        return (_state$relayers$find$ = (_state$relayers$find = state.relayers.find(function (x) {\n          var _x$src;\n\n          return x.status == 'connected' && ((_x$src = x.src) === null || _x$src === void 0 ? void 0 : _x$src.channelId) == channel;\n        })) === null || _state$relayers$find === void 0 ? void 0 : _state$relayers$find.chainIdB) !== null && _state$relayers$find$ !== void 0 ? _state$relayers$find$ : channel;\n      };\n    },\n    chainToChannel: function chainToChannel(state) {\n      return function (channel) {\n        var _state$relayers$find$2, _state$relayers$find2;\n\n        return (_state$relayers$find$2 = (_state$relayers$find2 = state.relayers.find(function (x) {\n          var _x$dest;\n\n          return x.status == 'connected' && ((_x$dest = x.dest) === null || _x$dest === void 0 ? void 0 : _x$dest.channelId) == channel;\n        })) === null || _state$relayers$find2 === void 0 ? void 0 : _state$relayers$find2.chainIdB) !== null && _state$relayers$find$2 !== void 0 ? _state$relayers$find$2 : channel;\n      };\n    },\n    log: function log(state) {\n      return state.transientLog.msg;\n    }\n  },\n  mutations: {\n    RESET_STATE: function RESET_STATE(state) {\n      Object.assign(state, getDefaultState());\n    },\n    SET_RELAYERS: function SET_RELAYERS(state, relayers) {\n      state.relayers = relayers;\n    },\n    CREATE_RELAYER: function CREATE_RELAYER(state, relayer) {\n      state.relayers = [].concat(_toConsumableArray(state.relayers), [relayer]);\n    },\n    LINK_RELAYER: function LINK_RELAYER(state, _ref) {\n      var name = _ref.name,\n          link = _ref.link,\n          linkDetails = _objectWithoutProperties(_ref, _excluded);\n\n      var relayerIndex = state.relayers.findIndex(function (x) {\n        return x.name == name;\n      });\n\n      if (state.relayers[relayerIndex].status == 'connected') {\n        state.relayers[relayerIndex] = _objectSpread(_objectSpread(_objectSpread({}, state.relayers[relayerIndex]), linkDetails), {}, {\n          status: 'connected'\n        });\n      } else {\n        state.relayers[relayerIndex] = _objectSpread(_objectSpread(_objectSpread({}, state.relayers[relayerIndex]), linkDetails), {}, {\n          status: 'linked'\n        });\n      }\n\n      state.relayerLinks[name] = link;\n    },\n    CONNECT_RELAYER: function CONNECT_RELAYER(state, _ref2) {\n      var name = _ref2.name,\n          channelDetails = _objectWithoutProperties(_ref2, _excluded2);\n\n      var relayerIndex = state.relayers.findIndex(function (x) {\n        return x.name == name;\n      });\n      state.relayers[relayerIndex] = _objectSpread(_objectSpread(_objectSpread({}, state.relayers[relayerIndex]), channelDetails), {}, {\n        status: 'connected'\n      });\n    },\n    RUN_RELAYER: function RUN_RELAYER(state, name) {\n      state.relayers.find(function (x) {\n        return x.name == name;\n      }).running = true;\n    },\n    STOP_RELAYER: function STOP_RELAYER(state, name) {\n      state.relayers.find(function (x) {\n        return x.name == name;\n      }).running = false;\n    },\n    SET_LOG_MSG: function SET_LOG_MSG(state, msg) {\n      state.transientLog.msg = msg;\n    },\n    LAST_QUERIED_HEIGHTS: function LAST_QUERIED_HEIGHTS(state, _ref3) {\n      var name = _ref3.name,\n          heights = _ref3.heights;\n      state.relayers.find(function (x) {\n        return x.name == name;\n      }).heights = heights;\n    }\n  },\n  actions: {\n    init: function init(_ref4) {\n      var commit = _ref4.commit,\n          rootGetters = _ref4.rootGetters,\n          dispatch = _ref4.dispatch;\n      commit('RESET_STATE');\n      var relayers = rootGetters['common/wallet/relayers'];\n      commit('SET_RELAYERS', relayers);\n      relayers.forEach(function (relayer) {\n        if (relayer.status == 'linked' || relayer.status == 'connected') {\n          dispatch('loadRelayer', relayer.name);\n        }\n      });\n    },\n    createRelayer: function createRelayer(_ref5, _ref6) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var commit, rootGetters, getters, dispatch, name, prefix, endpoint, gasPrice, chainId, channelId, external, relayer, signerA, signerB, _yield$signerB$getAcc, _yield$signerB$getAcc2, accountB, optionsA, tmClientA, signingClientA, optionsB, tmClientB, signingClientB;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref5.commit, rootGetters = _ref5.rootGetters, getters = _ref5.getters, dispatch = _ref5.dispatch;\n                name = _ref6.name, prefix = _ref6.prefix, endpoint = _ref6.endpoint, gasPrice = _ref6.gasPrice, chainId = _ref6.chainId, channelId = _ref6.channelId, external = _ref6.external;\n\n                if (!external) {\n                  relayer = {\n                    name: name,\n                    prefix: prefix,\n                    endpoint: endpoint,\n                    gasPrice: gasPrice,\n                    external: false,\n                    status: 'created',\n                    heights: {},\n                    running: false\n                  };\n                } else {\n                  relayer = {\n                    name: name,\n                    external: true,\n                    status: 'connected',\n                    chainIdB: chainId,\n                    src: {\n                      channelId: channelId\n                    }\n                  };\n                }\n\n                if (external) {\n                  _context.next = 32;\n                  break;\n                }\n\n                _context.next = 6;\n                return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(rootGetters['common/wallet/getMnemonic'], {\n                  hdPaths: [(0, _crypto.stringToPath)(rootGetters['common/wallet/getPath'])],\n                  prefix: rootGetters['common/env/addrPrefix']\n                });\n\n              case 6:\n                signerA = _context.sent;\n                _context.next = 9;\n                return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(rootGetters['common/wallet/getMnemonic'], {\n                  hdPaths: [(0, _crypto.stringToPath)(rootGetters['common/wallet/getPath'])],\n                  prefix: relayer.prefix\n                });\n\n              case 9:\n                signerB = _context.sent;\n                _context.next = 12;\n                return signerB.getAccounts();\n\n              case 12:\n                _yield$signerB$getAcc = _context.sent;\n                _yield$signerB$getAcc2 = _slicedToArray(_yield$signerB$getAcc, 1);\n                accountB = _yield$signerB$getAcc2[0];\n                optionsA = {\n                  prefix: rootGetters['common/env/addrPrefix'],\n                  gasPrice: _launchpad.GasPrice.fromString(rootGetters['common/wallet/gasPrice']),\n                  registry: ibcRegistry()\n                };\n                _context.next = 18;\n                return _tendermintRpc.Tendermint34Client.connect(rootGetters['common/env/apiTendermint']);\n\n              case 18:\n                tmClientA = _context.sent;\n                signingClientA = new _starportSigningClient[\"default\"](tmClientA, signerA, optionsA);\n                _context.next = 22;\n                return signingClientA.getChainId();\n\n              case 22:\n                relayer.chainIdA = _context.sent;\n                optionsB = {\n                  prefix: relayer.prefix,\n                  gasPrice: _launchpad.GasPrice.fromString(relayer.gasPrice),\n                  registry: ibcRegistry()\n                };\n                _context.next = 26;\n                return _tendermintRpc.Tendermint34Client.connect(relayer.endpoint);\n\n              case 26:\n                tmClientB = _context.sent;\n                signingClientB = new _starportSigningClient[\"default\"](tmClientB, signerB, optionsB);\n                _context.next = 30;\n                return signingClientB.getChainId();\n\n              case 30:\n                relayer.chainIdB = _context.sent;\n                relayer.targetAddress = accountB.address;\n\n              case 32:\n                commit('CREATE_RELAYER', relayer);\n                dispatch('common/wallet/updateRelayers', getters['getRelayers'], {\n                  root: true\n                });\n\n              case 34:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    loadRelayer: function loadRelayer(_ref7, name) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var commit, rootGetters, getters, dispatch, relayer, signerA, signerB, _yield$signerA$getAcc, _yield$signerA$getAcc2, accountA, _yield$signerB$getAcc3, _yield$signerB$getAcc4, accountB, transientLog, optionsA, tmClientA, signingClientA, chainIdA, optionsB, tmClientB, signingClientB, chainIdB, clientA, clientB, link, linkData;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                commit = _ref7.commit, rootGetters = _ref7.rootGetters, getters = _ref7.getters, dispatch = _ref7.dispatch;\n                relayer = getters['getRelayer'](name);\n\n                if (!(relayer.status !== 'linked' && relayer.status !== 'connected')) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new _SpVuexError[\"default\"]('relayers:connectRelayer', 'Relayer already connected.');\n\n              case 4:\n                _context2.prev = 4;\n                _context2.next = 7;\n                return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(rootGetters['common/wallet/getMnemonic'], {\n                  hdPaths: [(0, _crypto.stringToPath)(rootGetters['common/wallet/getPath'])],\n                  prefix: rootGetters['common/env/addrPrefix']\n                });\n\n              case 7:\n                signerA = _context2.sent;\n                _context2.next = 10;\n                return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(rootGetters['common/wallet/getMnemonic'], {\n                  hdPaths: [(0, _crypto.stringToPath)(rootGetters['common/wallet/getPath'])],\n                  prefix: relayer.prefix\n                });\n\n              case 10:\n                signerB = _context2.sent;\n                _context2.next = 13;\n                return signerA.getAccounts();\n\n              case 13:\n                _yield$signerA$getAcc = _context2.sent;\n                _yield$signerA$getAcc2 = _slicedToArray(_yield$signerA$getAcc, 1);\n                accountA = _yield$signerA$getAcc2[0];\n                _context2.next = 18;\n                return signerB.getAccounts();\n\n              case 18:\n                _yield$signerB$getAcc3 = _context2.sent;\n                _yield$signerB$getAcc4 = _slicedToArray(_yield$signerB$getAcc3, 1);\n                accountB = _yield$signerB$getAcc4[0];\n                transientLog = {\n                  log: function log(msg) {\n                    commit('SET_LOG_MSG', msg);\n                  },\n                  info: function info(msg) {\n                    commit('SET_LOG_MSG', msg);\n                  },\n                  error: function error(msg) {\n                    commit('SET_LOG_MSG', msg);\n                  },\n                  warn: function warn(msg) {\n                    commit('SET_LOG_MSG', msg);\n                  },\n                  verbose: function verbose(msg) {\n                    commit('SET_LOG_MSG', msg);\n                  },\n                  debug: function debug() {//commit('SET_LOG_MSG',msg)\n                  }\n                };\n                optionsA = {\n                  prefix: rootGetters['common/env/addrPrefix'],\n                  logger: transientLog,\n                  gasPrice: _launchpad.GasPrice.fromString(rootGetters['common/wallet/gasPrice']),\n                  registry: ibcRegistry()\n                };\n                _context2.next = 25;\n                return _tendermintRpc.Tendermint34Client.connect(rootGetters['common/env/apiTendermint']);\n\n              case 25:\n                tmClientA = _context2.sent;\n                signingClientA = new _starportSigningClient[\"default\"](tmClientA, signerA, optionsA);\n                _context2.next = 29;\n                return signingClientA.getChainId();\n\n              case 29:\n                chainIdA = _context2.sent;\n                optionsB = {\n                  prefix: relayer.prefix,\n                  logger: transientLog,\n                  gasPrice: _launchpad.GasPrice.fromString(relayer.gasPrice),\n                  registry: ibcRegistry()\n                };\n                _context2.next = 33;\n                return _tendermintRpc.Tendermint34Client.connect(relayer.endpoint);\n\n              case 33:\n                tmClientB = _context2.sent;\n                signingClientB = new _starportSigningClient[\"default\"](tmClientB, signerB, optionsB);\n                _context2.next = 37;\n                return signingClientB.getChainId();\n\n              case 37:\n                chainIdB = _context2.sent;\n                clientA = new _build.IbcClient(signingClientA, tmClientA, accountA.address, chainIdA, optionsA);\n                clientB = new _build.IbcClient(signingClientB, tmClientB, accountB.address, chainIdB, optionsB);\n                _context2.next = 42;\n                return _build.Link.createWithExistingConnections(clientA, clientB, relayer.endA.connectionID, relayer.endB.connectionID);\n\n              case 42:\n                link = _context2.sent;\n                linkData = {\n                  name: name,\n                  link: link,\n                  chainIdA: chainIdA,\n                  chainIdB: chainIdB,\n                  endA: {\n                    clientID: link.endA.clientID,\n                    connectionID: link.endA.connectionID\n                  },\n                  endB: {\n                    clientID: link.endB.clientID,\n                    connectionID: link.endB.connectionID\n                  }\n                };\n                commit('LINK_RELAYER', linkData);\n                dispatch('common/wallet/updateRelayers', getters['getRelayers'], {\n                  root: true\n                });\n\n                if (!(relayer.status != 'connected')) {\n                  _context2.next = 51;\n                  break;\n                }\n\n                _context2.next = 49;\n                return dispatch('connectRelayer', relayer.name);\n\n              case 49:\n                _context2.next = 52;\n                break;\n\n              case 51:\n                if (relayer.running) {\n                  dispatch('runRelayer', relayer.name);\n                }\n\n              case 52:\n                _context2.next = 57;\n                break;\n\n              case 54:\n                _context2.prev = 54;\n                _context2.t0 = _context2[\"catch\"](4);\n                console.error(_context2.t0);\n\n              case 57:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[4, 54]]);\n      }))();\n    },\n    linkRelayer: function linkRelayer(_ref8, _ref9) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var commit, rootGetters, getters, dispatch, name, relayer, signerA, signerB, _yield$signerA$getAcc3, _yield$signerA$getAcc4, accountA, _yield$signerB$getAcc5, _yield$signerB$getAcc6, accountB, transientLog, optionsA, tmClientA, signingClientA, chainIdA, optionsB, tmClientB, signingClientB, chainIdB, clientA, clientB, link, linkData;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                commit = _ref8.commit, rootGetters = _ref8.rootGetters, getters = _ref8.getters, dispatch = _ref8.dispatch;\n                name = _ref9.name;\n                relayer = getters['getRelayer'](name);\n\n                if (!(relayer.status !== 'created')) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new _SpVuexError[\"default\"]('relayers:connectRelayer', 'Relayer already connected.');\n\n              case 5:\n                _context3.prev = 5;\n                _context3.next = 8;\n                return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(rootGetters['common/wallet/getMnemonic'], {\n                  hdPaths: [(0, _crypto.stringToPath)(rootGetters['common/wallet/getPath'])],\n                  prefix: rootGetters['common/env/addrPrefix']\n                });\n\n              case 8:\n                signerA = _context3.sent;\n                _context3.next = 11;\n                return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(rootGetters['common/wallet/getMnemonic'], {\n                  hdPaths: [(0, _crypto.stringToPath)(rootGetters['common/wallet/getPath'])],\n                  prefix: relayer.prefix\n                });\n\n              case 11:\n                signerB = _context3.sent;\n                _context3.next = 14;\n                return signerA.getAccounts();\n\n              case 14:\n                _yield$signerA$getAcc3 = _context3.sent;\n                _yield$signerA$getAcc4 = _slicedToArray(_yield$signerA$getAcc3, 1);\n                accountA = _yield$signerA$getAcc4[0];\n                _context3.next = 19;\n                return signerB.getAccounts();\n\n              case 19:\n                _yield$signerB$getAcc5 = _context3.sent;\n                _yield$signerB$getAcc6 = _slicedToArray(_yield$signerB$getAcc5, 1);\n                accountB = _yield$signerB$getAcc6[0];\n                transientLog = {\n                  log: function log(msg) {\n                    commit('SET_LOG_MSG', msg);\n                  },\n                  info: function info(msg) {\n                    commit('SET_LOG_MSG', msg);\n                  },\n                  error: function error(msg) {\n                    commit('SET_LOG_MSG', msg);\n                  },\n                  warn: function warn(msg) {\n                    commit('SET_LOG_MSG', msg);\n                  },\n                  verbose: function verbose(msg) {\n                    commit('SET_LOG_MSG', msg);\n                  },\n                  debug: function debug() {//commit('SET_LOG_MSG',msg)\n                  }\n                };\n                optionsA = {\n                  prefix: rootGetters['common/env/addrPrefix'],\n                  logger: transientLog,\n                  gasPrice: _launchpad.GasPrice.fromString(rootGetters['common/wallet/gasPrice']),\n                  registry: ibcRegistry()\n                };\n                _context3.next = 26;\n                return _tendermintRpc.Tendermint34Client.connect(rootGetters['common/env/apiTendermint']);\n\n              case 26:\n                tmClientA = _context3.sent;\n                signingClientA = new _starportSigningClient[\"default\"](tmClientA, signerA, optionsA);\n                _context3.next = 30;\n                return signingClientA.getChainId();\n\n              case 30:\n                chainIdA = _context3.sent;\n                optionsB = {\n                  prefix: relayer.prefix,\n                  logger: transientLog,\n                  gasPrice: _launchpad.GasPrice.fromString(relayer.gasPrice),\n                  registry: ibcRegistry()\n                };\n                _context3.next = 34;\n                return _tendermintRpc.Tendermint34Client.connect(relayer.endpoint);\n\n              case 34:\n                tmClientB = _context3.sent;\n                signingClientB = new _starportSigningClient[\"default\"](tmClientB, signerB, optionsB);\n                _context3.next = 38;\n                return signingClientB.getChainId();\n\n              case 38:\n                chainIdB = _context3.sent;\n                clientA = new _build.IbcClient(signingClientA, tmClientA, accountA.address, chainIdA, optionsA);\n                clientB = new _build.IbcClient(signingClientB, tmClientB, accountB.address, chainIdB, optionsB);\n                _context3.next = 43;\n                return _build.Link.createWithNewConnections(clientA, clientB);\n\n              case 43:\n                link = _context3.sent;\n                linkData = {\n                  name: name,\n                  link: link,\n                  chainIdA: chainIdA,\n                  chainIdB: chainIdB,\n                  endA: {\n                    clientID: link.endA.clientID,\n                    connectionID: link.endA.connectionID\n                  },\n                  endB: {\n                    clientID: link.endB.clientID,\n                    connectionID: link.endB.connectionID\n                  }\n                };\n                commit('LINK_RELAYER', linkData);\n                dispatch('common/wallet/updateRelayers', getters['getRelayers'], {\n                  root: true\n                });\n                _context3.next = 49;\n                return dispatch('connectRelayer', name);\n\n              case 49:\n                _context3.next = 54;\n                break;\n\n              case 51:\n                _context3.prev = 51;\n                _context3.t0 = _context3[\"catch\"](5);\n                console.error(_context3.t0);\n\n              case 54:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[5, 51]]);\n      }))();\n    },\n    connectRelayer: function connectRelayer(_ref10, name) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var commit, getters, dispatch, relayerLink, channels, channelData;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                commit = _ref10.commit, getters = _ref10.getters, dispatch = _ref10.dispatch;\n                relayerLink = getters['getRelayerLink'](name);\n                _context4.next = 4;\n                return relayerLink.createChannel('A', 'transfer', 'transfer', 1, 'ics20-1');\n\n              case 4:\n                channels = _context4.sent;\n                channelData = _objectSpread({\n                  name: name\n                }, channels);\n                commit('CONNECT_RELAYER', channelData);\n                dispatch('common/wallet/updateRelayers', getters['getRelayers'], {\n                  root: true\n                });\n                dispatch('runRelayer', name);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    runRelayer: function runRelayer(_ref11, name) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var commit, getters, dispatch, relayerLink;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                commit = _ref11.commit, getters = _ref11.getters, dispatch = _ref11.dispatch;\n                relayerLink = getters['getRelayerLink'](name);\n                commit('RUN_RELAYER', name);\n                dispatch('common/wallet/updateRelayers', getters['getRelayers'], {\n                  root: true\n                });\n                dispatch('relayerLoop', {\n                  name: name,\n                  link: relayerLink,\n                  options: {\n                    poll: 1,\n                    maxAgeDest: 86400,\n                    maxAgeSrc: 86400\n                  }\n                });\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    },\n    stopRelayer: function stopRelayer(_ref12, name) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var commit;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                commit = _ref12.commit;\n                commit('STOP_RELAYER', name);\n\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    },\n    relayerLoop: function relayerLoop(_ref13, _ref14) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _relayer$heights;\n\n        var getters, commit, dispatch, name, link, options, relayer, nextRelay;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                getters = _ref13.getters, commit = _ref13.commit, dispatch = _ref13.dispatch;\n                name = _ref14.name, link = _ref14.link, options = _ref14.options;\n                relayer = getters['getRelayer'](name);\n                nextRelay = (_relayer$heights = relayer.heights) !== null && _relayer$heights !== void 0 ? _relayer$heights : {};\n\n              case 4:\n                if (!getters['getRelayer'](name).running) {\n                  _context7.next = 24;\n                  break;\n                }\n\n                _context7.prev = 5;\n                _context7.next = 8;\n                return link.checkAndRelayPacketsAndAcks(nextRelay, 2, 6);\n\n              case 8:\n                nextRelay = _context7.sent;\n                commit('LAST_QUERIED_HEIGHTS', {\n                  name: name,\n                  heights: nextRelay\n                });\n                dispatch('common/wallet/updateRelayers', getters['getRelayers'], {\n                  root: true\n                });\n                _context7.next = 13;\n                return link.updateClientIfStale('A', options.maxAgeDest);\n\n              case 13:\n                _context7.next = 15;\n                return link.updateClientIfStale('B', options.maxAgeSrc);\n\n              case 15:\n                _context7.next = 20;\n                break;\n\n              case 17:\n                _context7.prev = 17;\n                _context7.t0 = _context7[\"catch\"](5);\n                console.error(\"Caught error: \", _context7.t0);\n\n              case 20:\n                _context7.next = 22;\n                return (0, _utils.sleep)(options.poll * 1000);\n\n              case 22:\n                _context7.next = 4;\n                break;\n\n              case 24:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[5, 17]]);\n      }))();\n    }\n  }\n};\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../../src/modules/common/relayers/relayers.js"],"names":["Registry","defaultRegistryTypes","MsgCreateClient","MsgUpdateClient","MsgConnectionOpenInit","MsgConnectionOpenTry","MsgConnectionOpenAck","MsgConnectionOpenConfirm","MsgChannelOpenInit","MsgChannelOpenTry","MsgChannelOpenAck","MsgChannelOpenConfirm","MsgRecvPacket","MsgAcknowledgement","MsgTimeout","MsgTransfer","getDefaultState","relayers","transientLog","msg","relayerLinks","state","namespaced","getters","getRelayer","x","getRelayers","getRelayerLink","chainFromChannel","chainToChannel","log","mutations","RESET_STATE","Object","SET_RELAYERS","CREATE_RELAYER","LINK_RELAYER","name","link","linkDetails","relayerIndex","status","CONNECT_RELAYER","channelDetails","RUN_RELAYER","STOP_RELAYER","SET_LOG_MSG","LAST_QUERIED_HEIGHTS","heights","actions","init","commit","rootGetters","dispatch","relayer","createRelayer","prefix","endpoint","gasPrice","chainId","channelId","external","running","chainIdB","src","signerA","hdPaths","signerB","accountB","optionsA","GasPrice","registry","ibcRegistry","tmClientA","Tendermint34Client","signingClientA","StarportSigningClient","optionsB","tmClientB","signingClientB","root","loadRelayer","SpVuexError","accountA","info","error","warn","verbose","debug","logger","chainIdA","clientA","IbcClient","clientB","Link","linkData","endA","clientID","connectionID","endB","console","linkRelayer","connectRelayer","relayerLink","channels","channelData","runRelayer","options","poll","maxAgeDest","maxAgeSrc","stopRelayer","relayerLoop","nextRelay"],"mappings":"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","sourcesContent":["import StarportSigningClient from './libs/starportSigningClient'\nimport SpVuexError from '../../../errors/SpVuexError'\nimport { IbcClient, Link } from '@confio/relayer/build'\nimport { Registry, DirectSecp256k1HdWallet } from '@cosmjs/proto-signing'\nimport { stringToPath } from '@cosmjs/crypto'\nimport { sleep } from '@cosmjs/utils'\nimport { GasPrice } from '@cosmjs/launchpad'\nimport { defaultRegistryTypes } from '@cosmjs/stargate'\nimport { Tendermint34Client } from '@cosmjs/tendermint-rpc'\nimport { MsgTransfer } from '@confio/relayer/build/codec/ibc/applications/transfer/v1/tx'\nimport {\n\tMsgAcknowledgement,\n\tMsgChannelOpenAck,\n\tMsgChannelOpenConfirm,\n\tMsgChannelOpenInit,\n\tMsgChannelOpenTry,\n\tMsgRecvPacket,\n\tMsgTimeout,\n} from '@confio/relayer/build/codec/ibc/core/channel/v1/tx'\nimport { MsgCreateClient, MsgUpdateClient } from '@confio/relayer/build/codec/ibc/core/client/v1/tx'\nimport {\n\tMsgConnectionOpenAck,\n\tMsgConnectionOpenConfirm,\n\tMsgConnectionOpenInit,\n\tMsgConnectionOpenTry,\n} from '@confio/relayer/build/codec/ibc/core/connection/v1/tx'\n\nfunction ibcRegistry() {\n\treturn new Registry([\n\t\t...defaultRegistryTypes,\n\t\t['/ibc.core.client.v1.MsgCreateClient', MsgCreateClient],\n\t\t['/ibc.core.client.v1.MsgUpdateClient', MsgUpdateClient],\n\t\t['/ibc.core.connection.v1.MsgConnectionOpenInit', MsgConnectionOpenInit],\n\t\t['/ibc.core.connection.v1.MsgConnectionOpenTry', MsgConnectionOpenTry],\n\t\t['/ibc.core.connection.v1.MsgConnectionOpenAck', MsgConnectionOpenAck],\n\t\t['/ibc.core.connection.v1.MsgConnectionOpenConfirm', MsgConnectionOpenConfirm],\n\t\t['/ibc.core.channel.v1.MsgChannelOpenInit', MsgChannelOpenInit],\n\t\t['/ibc.core.channel.v1.MsgChannelOpenTry', MsgChannelOpenTry],\n\t\t['/ibc.core.channel.v1.MsgChannelOpenAck', MsgChannelOpenAck],\n\t\t['/ibc.core.channel.v1.MsgChannelOpenConfirm', MsgChannelOpenConfirm],\n\t\t['/ibc.core.channel.v1.MsgRecvPacket', MsgRecvPacket],\n\t\t['/ibc.core.channel.v1.MsgAcknowledgement', MsgAcknowledgement],\n\t\t['/ibc.core.channel.v1.MsgTimeout', MsgTimeout],\n\t\t['/ibc.applications.transfer.v1.MsgTransfer', MsgTransfer],\n\t])\n}\nconst getDefaultState = () => {\n\treturn {\n\t\trelayers: [],\n\t\ttransientLog: {\n\t\t\tmsg: '',\n\t\t},\n\t\trelayerLinks: {},\n\t}\n}\n// initial state\nconst state = getDefaultState()\nexport default {\n\tnamespaced: true,\n\tstate,\n\tgetters: {\n\t\tgetRelayer: (state) => (name) => {\n\t\t\treturn state.relayers.find((x) => x.name == name)\n\t\t},\n\t\tgetRelayers: (state) => state.relayers,\n\t\tgetRelayerLink: (state) => (name) => {\n\t\t\treturn state.relayerLinks[name]\n\t\t},\n\t\tchainFromChannel: (state) => (channel) => {\n\t\t\treturn state.relayers.find((x) => x.status == 'connected' && x.src?.channelId == channel)?.chainIdB ?? channel\n\t\t},\n\t\tchainToChannel: (state) => (channel) => {\n\t\t\treturn state.relayers.find((x) => x.status == 'connected' && x.dest?.channelId == channel)?.chainIdB ?? channel\n\t\t},\n\t\tlog: (state) => state.transientLog.msg,\n\t},\n\tmutations: {\n\t\tRESET_STATE(state) {\n\t\t\tObject.assign(state, getDefaultState())\n\t\t},\n\t\tSET_RELAYERS(state, relayers) {\n\t\t\tstate.relayers = relayers\n\t\t},\n\t\tCREATE_RELAYER(state, relayer) {\n\t\t\tstate.relayers = [...state.relayers, relayer]\n\t\t},\n\t\tLINK_RELAYER(state, { name, link, ...linkDetails }) {\n\t\t\tlet relayerIndex = state.relayers.findIndex((x) => x.name == name)\n\t\t\tif (state.relayers[relayerIndex].status == 'connected') {\n\t\t\t\tstate.relayers[relayerIndex] = {\n\t\t\t\t\t...state.relayers[relayerIndex],\n\t\t\t\t\t...linkDetails,\n\t\t\t\t\tstatus: 'connected',\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstate.relayers[relayerIndex] = {\n\t\t\t\t\t...state.relayers[relayerIndex],\n\t\t\t\t\t...linkDetails,\n\t\t\t\t\tstatus: 'linked',\n\t\t\t\t}\n\t\t\t}\n\t\t\tstate.relayerLinks[name] = link\n\t\t},\n\t\tCONNECT_RELAYER(state, { name, ...channelDetails }) {\n\t\t\tlet relayerIndex = state.relayers.findIndex((x) => x.name == name)\n\t\t\tstate.relayers[relayerIndex] = {\n\t\t\t\t...state.relayers[relayerIndex],\n\t\t\t\t...channelDetails,\n\t\t\t\tstatus: 'connected',\n\t\t\t}\n\t\t},\n\t\tRUN_RELAYER(state, name) {\n\t\t\tstate.relayers.find((x) => x.name == name).running = true\n\t\t},\n\t\tSTOP_RELAYER(state, name) {\n\t\t\tstate.relayers.find((x) => x.name == name).running = false\n\t\t},\n\t\tSET_LOG_MSG(state, msg) {\n\t\t\tstate.transientLog.msg = msg\n\t\t},\n\t\tLAST_QUERIED_HEIGHTS(state, { name, heights }) {\n\t\t\tstate.relayers.find((x) => x.name == name).heights = heights\n\t\t},\n\t},\n\tactions: {\n\t\tinit({ commit, rootGetters, dispatch }) {\n\t\t\tcommit('RESET_STATE')\n\t\t\tconst relayers = rootGetters['common/wallet/relayers']\n\t\t\tcommit('SET_RELAYERS', relayers)\n\t\t\trelayers.forEach((relayer) => {\n\t\t\t\tif (relayer.status == 'linked' || relayer.status == 'connected') {\n\t\t\t\t\tdispatch('loadRelayer', relayer.name)\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\tasync createRelayer(\n\t\t\t{ commit, rootGetters, getters, dispatch },\n\t\t\t{ name, prefix, endpoint, gasPrice, chainId, channelId, external },\n\t\t) {\n\t\t\tlet relayer\n\t\t\tif (!external) {\n\t\t\t\trelayer = {\n\t\t\t\t\tname,\n\t\t\t\t\tprefix,\n\t\t\t\t\tendpoint,\n\t\t\t\t\tgasPrice,\n\t\t\t\t\texternal: false,\n\t\t\t\t\tstatus: 'created',\n\t\t\t\t\theights: {},\n\t\t\t\t\trunning: false,\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trelayer = {\n\t\t\t\t\tname,\n\t\t\t\t\texternal: true,\n\t\t\t\t\tstatus: 'connected',\n\t\t\t\t\tchainIdB: chainId,\n\t\t\t\t\tsrc: {\n\t\t\t\t\t\tchannelId: channelId,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!external) {\n\t\t\t\tconst signerA = await DirectSecp256k1HdWallet.fromMnemonic(rootGetters['common/wallet/getMnemonic'], {\n\t\t\t\t\thdPaths: [stringToPath(rootGetters['common/wallet/getPath'])],\n\t\t\t\t\tprefix: rootGetters['common/env/addrPrefix'],\n\t\t\t\t})\n\t\t\t\tconst signerB = await DirectSecp256k1HdWallet.fromMnemonic(rootGetters['common/wallet/getMnemonic'], {\n\t\t\t\t\thdPaths: [stringToPath(rootGetters['common/wallet/getPath'])],\n\t\t\t\t\tprefix: relayer.prefix,\n\t\t\t\t})\n\t\t\t\tconst [accountB] = await signerB.getAccounts()\n\t\t\t\tconst optionsA = {\n\t\t\t\t\tprefix: rootGetters['common/env/addrPrefix'],\n\t\t\t\t\tgasPrice: GasPrice.fromString(rootGetters['common/wallet/gasPrice']),\n\t\t\t\t\tregistry: ibcRegistry(),\n\t\t\t\t}\n\t\t\t\tconst tmClientA = await Tendermint34Client.connect(rootGetters['common/env/apiTendermint'])\n\t\t\t\tconst signingClientA = new StarportSigningClient(tmClientA, signerA, optionsA)\n\t\t\t\trelayer.chainIdA = await signingClientA.getChainId()\n\t\t\t\tconst optionsB = {\n\t\t\t\t\tprefix: relayer.prefix,\n\t\t\t\t\tgasPrice: GasPrice.fromString(relayer.gasPrice),\n\t\t\t\t\tregistry: ibcRegistry(),\n\t\t\t\t}\n\t\t\t\tconst tmClientB = await Tendermint34Client.connect(relayer.endpoint)\n\t\t\t\tconst signingClientB = new StarportSigningClient(tmClientB, signerB, optionsB)\n\t\t\t\trelayer.chainIdB = await signingClientB.getChainId()\n\t\t\t\trelayer.targetAddress = accountB.address\n\t\t\t}\n\t\t\tcommit('CREATE_RELAYER', relayer)\n\t\t\tdispatch('common/wallet/updateRelayers', getters['getRelayers'], {\n\t\t\t\troot: true,\n\t\t\t})\n\t\t},\n\t\tasync loadRelayer({ commit, rootGetters, getters, dispatch }, name) {\n\t\t\tconst relayer = getters['getRelayer'](name)\n\t\t\tif (relayer.status !== 'linked' && relayer.status !== 'connected') {\n\t\t\t\tthrow new SpVuexError('relayers:connectRelayer', 'Relayer already connected.')\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst signerA = await DirectSecp256k1HdWallet.fromMnemonic(rootGetters['common/wallet/getMnemonic'], {\n\t\t\t\t\thdPaths: [stringToPath(rootGetters['common/wallet/getPath'])],\n\t\t\t\t\tprefix: rootGetters['common/env/addrPrefix'],\n\t\t\t\t})\n\t\t\t\tconst signerB = await DirectSecp256k1HdWallet.fromMnemonic(rootGetters['common/wallet/getMnemonic'], {\n\t\t\t\t\thdPaths: [stringToPath(rootGetters['common/wallet/getPath'])],\n\t\t\t\t\tprefix: relayer.prefix,\n\t\t\t\t})\n\t\t\t\tconst [accountA] = await signerA.getAccounts()\n\t\t\t\tconst [accountB] = await signerB.getAccounts()\n\t\t\t\tconst transientLog = {\n\t\t\t\t\tlog: (msg) => {\n\t\t\t\t\t\tcommit('SET_LOG_MSG', msg)\n\t\t\t\t\t},\n\t\t\t\t\tinfo: (msg) => {\n\t\t\t\t\t\tcommit('SET_LOG_MSG', msg)\n\t\t\t\t\t},\n\t\t\t\t\terror: (msg) => {\n\t\t\t\t\t\tcommit('SET_LOG_MSG', msg)\n\t\t\t\t\t},\n\t\t\t\t\twarn: (msg) => {\n\t\t\t\t\t\tcommit('SET_LOG_MSG', msg)\n\t\t\t\t\t},\n\t\t\t\t\tverbose: (msg) => {\n\t\t\t\t\t\tcommit('SET_LOG_MSG', msg)\n\t\t\t\t\t},\n\t\t\t\t\tdebug: () => {\n\t\t\t\t\t\t//commit('SET_LOG_MSG',msg)\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tconst optionsA = {\n\t\t\t\t\tprefix: rootGetters['common/env/addrPrefix'],\n\t\t\t\t\tlogger: transientLog,\n\t\t\t\t\tgasPrice: GasPrice.fromString(rootGetters['common/wallet/gasPrice']),\n\t\t\t\t\tregistry: ibcRegistry(),\n\t\t\t\t}\n\t\t\t\tconst tmClientA = await Tendermint34Client.connect(rootGetters['common/env/apiTendermint'])\n\t\t\t\tconst signingClientA = new StarportSigningClient(tmClientA, signerA, optionsA)\n\t\t\t\tconst chainIdA = await signingClientA.getChainId()\n\t\t\t\tconst optionsB = {\n\t\t\t\t\tprefix: relayer.prefix,\n\t\t\t\t\tlogger: transientLog,\n\t\t\t\t\tgasPrice: GasPrice.fromString(relayer.gasPrice),\n\t\t\t\t\tregistry: ibcRegistry(),\n\t\t\t\t}\n\t\t\t\tconst tmClientB = await Tendermint34Client.connect(relayer.endpoint)\n\t\t\t\tconst signingClientB = new StarportSigningClient(tmClientB, signerB, optionsB)\n\t\t\t\tconst chainIdB = await signingClientB.getChainId()\n\n\t\t\t\tlet clientA = new IbcClient(signingClientA, tmClientA, accountA.address, chainIdA, optionsA)\n\t\t\t\tlet clientB = new IbcClient(signingClientB, tmClientB, accountB.address, chainIdB, optionsB)\n\t\t\t\tconst link = await Link.createWithExistingConnections(\n\t\t\t\t\tclientA,\n\t\t\t\t\tclientB,\n\t\t\t\t\trelayer.endA.connectionID,\n\t\t\t\t\trelayer.endB.connectionID,\n\t\t\t\t)\n\t\t\t\tconst linkData = {\n\t\t\t\t\tname,\n\t\t\t\t\tlink,\n\t\t\t\t\tchainIdA,\n\t\t\t\t\tchainIdB,\n\t\t\t\t\tendA: {\n\t\t\t\t\t\tclientID: link.endA.clientID,\n\t\t\t\t\t\tconnectionID: link.endA.connectionID,\n\t\t\t\t\t},\n\t\t\t\t\tendB: {\n\t\t\t\t\t\tclientID: link.endB.clientID,\n\t\t\t\t\t\tconnectionID: link.endB.connectionID,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tcommit('LINK_RELAYER', linkData)\n\t\t\t\tdispatch('common/wallet/updateRelayers', getters['getRelayers'], {\n\t\t\t\t\troot: true,\n\t\t\t\t})\n\t\t\t\tif (relayer.status != 'connected') {\n\t\t\t\t\tawait dispatch('connectRelayer', relayer.name)\n\t\t\t\t} else {\n\t\t\t\t\tif (relayer.running) {\n\t\t\t\t\t\tdispatch('runRelayer', relayer.name)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e)\n\t\t\t}\n\t\t},\n\t\tasync linkRelayer({ commit, rootGetters, getters, dispatch }, { name }) {\n\t\t\tconst relayer = getters['getRelayer'](name)\n\t\t\tif (relayer.status !== 'created') {\n\t\t\t\tthrow new SpVuexError('relayers:connectRelayer', 'Relayer already connected.')\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst signerA = await DirectSecp256k1HdWallet.fromMnemonic(rootGetters['common/wallet/getMnemonic'], {\n\t\t\t\t\thdPaths: [stringToPath(rootGetters['common/wallet/getPath'])],\n\t\t\t\t\tprefix: rootGetters['common/env/addrPrefix'],\n\t\t\t\t})\n\t\t\t\tconst signerB = await DirectSecp256k1HdWallet.fromMnemonic(rootGetters['common/wallet/getMnemonic'], {\n\t\t\t\t\thdPaths: [stringToPath(rootGetters['common/wallet/getPath'])],\n\t\t\t\t\tprefix: relayer.prefix,\n\t\t\t\t})\n\t\t\t\tconst [accountA] = await signerA.getAccounts()\n\t\t\t\tconst [accountB] = await signerB.getAccounts()\n\t\t\t\tconst transientLog = {\n\t\t\t\t\tlog: (msg) => {\n\t\t\t\t\t\tcommit('SET_LOG_MSG', msg)\n\t\t\t\t\t},\n\t\t\t\t\tinfo: (msg) => {\n\t\t\t\t\t\tcommit('SET_LOG_MSG', msg)\n\t\t\t\t\t},\n\t\t\t\t\terror: (msg) => {\n\t\t\t\t\t\tcommit('SET_LOG_MSG', msg)\n\t\t\t\t\t},\n\t\t\t\t\twarn: (msg) => {\n\t\t\t\t\t\tcommit('SET_LOG_MSG', msg)\n\t\t\t\t\t},\n\t\t\t\t\tverbose: (msg) => {\n\t\t\t\t\t\tcommit('SET_LOG_MSG', msg)\n\t\t\t\t\t},\n\t\t\t\t\tdebug: () => {\n\t\t\t\t\t\t//commit('SET_LOG_MSG',msg)\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tconst optionsA = {\n\t\t\t\t\tprefix: rootGetters['common/env/addrPrefix'],\n\t\t\t\t\tlogger: transientLog,\n\t\t\t\t\tgasPrice: GasPrice.fromString(rootGetters['common/wallet/gasPrice']),\n\t\t\t\t\tregistry: ibcRegistry(),\n\t\t\t\t}\n\t\t\t\tconst tmClientA = await Tendermint34Client.connect(rootGetters['common/env/apiTendermint'])\n\t\t\t\tconst signingClientA = new StarportSigningClient(tmClientA, signerA, optionsA)\n\t\t\t\tconst chainIdA = await signingClientA.getChainId()\n\t\t\t\tconst optionsB = {\n\t\t\t\t\tprefix: relayer.prefix,\n\t\t\t\t\tlogger: transientLog,\n\t\t\t\t\tgasPrice: GasPrice.fromString(relayer.gasPrice),\n\t\t\t\t\tregistry: ibcRegistry(),\n\t\t\t\t}\n\t\t\t\tconst tmClientB = await Tendermint34Client.connect(relayer.endpoint)\n\t\t\t\tconst signingClientB = new StarportSigningClient(tmClientB, signerB, optionsB)\n\t\t\t\tconst chainIdB = await signingClientB.getChainId()\n\n\t\t\t\tlet clientA = new IbcClient(signingClientA, tmClientA, accountA.address, chainIdA, optionsA)\n\t\t\t\tlet clientB = new IbcClient(signingClientB, tmClientB, accountB.address, chainIdB, optionsB)\n\t\t\t\tconst link = await Link.createWithNewConnections(clientA, clientB)\n\t\t\t\tconst linkData = {\n\t\t\t\t\tname,\n\t\t\t\t\tlink,\n\t\t\t\t\tchainIdA,\n\t\t\t\t\tchainIdB,\n\t\t\t\t\tendA: {\n\t\t\t\t\t\tclientID: link.endA.clientID,\n\t\t\t\t\t\tconnectionID: link.endA.connectionID,\n\t\t\t\t\t},\n\t\t\t\t\tendB: {\n\t\t\t\t\t\tclientID: link.endB.clientID,\n\t\t\t\t\t\tconnectionID: link.endB.connectionID,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tcommit('LINK_RELAYER', linkData)\n\t\t\t\tdispatch('common/wallet/updateRelayers', getters['getRelayers'], {\n\t\t\t\t\troot: true,\n\t\t\t\t})\n\t\t\t\tawait dispatch('connectRelayer', name)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e)\n\t\t\t}\n\t\t},\n\t\tasync connectRelayer({ commit, getters, dispatch }, name) {\n\t\t\tconst relayerLink = getters['getRelayerLink'](name)\n\t\t\tconst channels = await relayerLink.createChannel('A', 'transfer', 'transfer', 1, 'ics20-1')\n\t\t\tconst channelData = {\n\t\t\t\tname,\n\t\t\t\t...channels,\n\t\t\t}\n\t\t\tcommit('CONNECT_RELAYER', channelData)\n\t\t\tdispatch('common/wallet/updateRelayers', getters['getRelayers'], {\n\t\t\t\troot: true,\n\t\t\t})\n\t\t\tdispatch('runRelayer', name)\n\t\t},\n\t\tasync runRelayer({ commit, getters, dispatch }, name) {\n\t\t\tconst relayerLink = getters['getRelayerLink'](name)\n\t\t\tcommit('RUN_RELAYER', name)\n\t\t\tdispatch('common/wallet/updateRelayers', getters['getRelayers'], {\n\t\t\t\troot: true,\n\t\t\t})\n\t\t\tdispatch('relayerLoop', {\n\t\t\t\tname,\n\t\t\t\tlink: relayerLink,\n\t\t\t\toptions: { poll: 1, maxAgeDest: 86400, maxAgeSrc: 86400 },\n\t\t\t})\n\t\t},\n\t\tasync stopRelayer({ commit }, name) {\n\t\t\tcommit('STOP_RELAYER', name)\n\t\t},\n\t\tasync relayerLoop({ getters, commit, dispatch }, { name, link, options }) {\n\t\t\tlet relayer = getters['getRelayer'](name)\n\t\t\tlet nextRelay = relayer.heights ?? {}\n\t\t\twhile (getters['getRelayer'](name).running) {\n\t\t\t\ttry {\n\t\t\t\t\t// TODO: make timeout windows more configurable\n\t\t\t\t\tnextRelay = await link.checkAndRelayPacketsAndAcks(nextRelay, 2, 6)\n\t\t\t\t\tcommit('LAST_QUERIED_HEIGHTS', { name, heights: nextRelay })\n\t\t\t\t\tdispatch('common/wallet/updateRelayers', getters['getRelayers'], {\n\t\t\t\t\t\troot: true,\n\t\t\t\t\t})\n\t\t\t\t\tawait link.updateClientIfStale('A', options.maxAgeDest)\n\t\t\t\t\tawait link.updateClientIfStale('B', options.maxAgeSrc)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(`Caught error: `, e)\n\t\t\t\t}\n\t\t\t\tawait sleep(options.poll * 1000)\n\t\t\t}\n\t\t},\n\t},\n}\n"]},"metadata":{},"sourceType":"script"}