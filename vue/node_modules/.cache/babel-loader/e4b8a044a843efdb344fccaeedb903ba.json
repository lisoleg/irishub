{"ast":null,"code":"import { txClient, queryClient, MissingWalletError, registry } from './module'; // @ts-ignore\n\nimport { SpVuexError } from '@starport/vuex';\nimport { Token } from \"./module/types/token/token\";\nimport { Params } from \"./module/types/token/token\";\nexport { Token, Params };\n\nasync function initTxClient(vuexGetters) {\n  return await txClient(vuexGetters['common/wallet/signer'], {\n    addr: vuexGetters['common/env/apiTendermint']\n  });\n}\n\nasync function initQueryClient(vuexGetters) {\n  return await queryClient({\n    addr: vuexGetters['common/env/apiCosmos']\n  });\n}\n\nfunction mergeResults(value, next_values) {\n  for (let prop of Object.keys(next_values)) {\n    if (Array.isArray(next_values[prop])) {\n      value[prop] = [...value[prop], ...next_values[prop]];\n    } else {\n      value[prop] = next_values[prop];\n    }\n  }\n\n  return value;\n}\n\nfunction getStructure(template) {\n  let structure = {\n    fields: []\n  };\n\n  for (const [key, value] of Object.entries(template)) {\n    let field = {};\n    field.name = key;\n    field.type = typeof value;\n    structure.fields.push(field);\n  }\n\n  return structure;\n}\n\nconst getDefaultState = () => {\n  return {\n    Token: {},\n    Tokens: {},\n    Fees: {},\n    Params: {},\n    TotalBurn: {},\n    _Structure: {\n      Token: getStructure(Token.fromPartial({})),\n      Params: getStructure(Params.fromPartial({}))\n    },\n    _Registry: registry,\n    _Subscriptions: new Set()\n  };\n}; // initial state\n\n\nconst state = getDefaultState();\nexport default {\n  namespaced: true,\n  state,\n  mutations: {\n    RESET_STATE(state) {\n      Object.assign(state, getDefaultState());\n    },\n\n    QUERY(state, {\n      query,\n      key,\n      value\n    }) {\n      state[query][JSON.stringify(key)] = value;\n    },\n\n    SUBSCRIBE(state, subscription) {\n      state._Subscriptions.add(JSON.stringify(subscription));\n    },\n\n    UNSUBSCRIBE(state, subscription) {\n      state._Subscriptions.delete(JSON.stringify(subscription));\n    }\n\n  },\n  getters: {\n    getToken: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Token[JSON.stringify(params)] ?? {};\n    },\n    getTokens: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Tokens[JSON.stringify(params)] ?? {};\n    },\n    getFees: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Fees[JSON.stringify(params)] ?? {};\n    },\n    getParams: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Params[JSON.stringify(params)] ?? {};\n    },\n    getTotalBurn: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.TotalBurn[JSON.stringify(params)] ?? {};\n    },\n    getTypeStructure: state => type => {\n      return state._Structure[type].fields;\n    },\n    getRegistry: state => {\n      return state._Registry;\n    }\n  },\n  actions: {\n    init({\n      dispatch,\n      rootGetters\n    }) {\n      console.log('Vuex module: alice.checkers.token initialized!');\n\n      if (rootGetters['common/env/client']) {\n        rootGetters['common/env/client'].on('newblock', () => {\n          dispatch('StoreUpdate');\n        });\n      }\n    },\n\n    resetState({\n      commit\n    }) {\n      commit('RESET_STATE');\n    },\n\n    unsubscribe({\n      commit\n    }, subscription) {\n      commit('UNSUBSCRIBE', subscription);\n    },\n\n    async StoreUpdate({\n      state,\n      dispatch\n    }) {\n      state._Subscriptions.forEach(async subscription => {\n        try {\n          const sub = JSON.parse(subscription);\n          await dispatch(sub.action, sub.payload);\n        } catch (e) {\n          throw new SpVuexError('Subscriptions: ' + e.message);\n        }\n      });\n    },\n\n    async QueryToken({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryToken(key.denom)).data;\n        commit('QUERY', {\n          query: 'Token',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryToken',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getToken']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryToken', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryTokens({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryTokens(query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryTokens({ ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'Tokens',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryTokens',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getTokens']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryTokens', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryFees({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryFees(key.symbol)).data;\n        commit('QUERY', {\n          query: 'Fees',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryFees',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getFees']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryFees', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryParams({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryParams()).data;\n        commit('QUERY', {\n          query: 'Params',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryParams',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getParams']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryTotalBurn({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryTotalBurn()).data;\n        commit('QUERY', {\n          query: 'TotalBurn',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryTotalBurn',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getTotalBurn']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryTotalBurn', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async sendMsgTransferTokenOwner({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgTransferTokenOwner(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgTransferTokenOwner:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgTransferTokenOwner:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgIssueToken({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgIssueToken(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgIssueToken:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgIssueToken:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgMintToken({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgMintToken(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgMintToken:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgMintToken:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgEditToken({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgEditToken(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgEditToken:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgEditToken:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgBurnToken({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgBurnToken(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgBurnToken:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgBurnToken:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async MsgTransferTokenOwner({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgTransferTokenOwner(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgTransferTokenOwner:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgTransferTokenOwner:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgIssueToken({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgIssueToken(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgIssueToken:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgIssueToken:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgMintToken({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgMintToken(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgMintToken:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgMintToken:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgEditToken({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgEditToken(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgEditToken:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgEditToken:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgBurnToken({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgBurnToken(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgBurnToken:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgBurnToken:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/lisoleg/checkers/vue/src/store/generated/alice/checkers/alice.checkers.token/index.js"],"names":["txClient","queryClient","MissingWalletError","registry","SpVuexError","Token","Params","initTxClient","vuexGetters","addr","initQueryClient","mergeResults","value","next_values","prop","Object","keys","Array","isArray","getStructure","template","structure","fields","key","entries","field","name","type","push","getDefaultState","Tokens","Fees","TotalBurn","_Structure","fromPartial","_Registry","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","delete","getters","getToken","params","getTokens","getFees","getParams","getTotalBurn","getTypeStructure","getRegistry","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","sub","parse","action","payload","e","message","QueryToken","options","subscribe","all","queryToken","denom","data","QueryTokens","queryTokens","pagination","next_key","QueryFees","queryFees","symbol","QueryParams","queryParams","QueryTotalBurn","queryTotalBurn","sendMsgTransferTokenOwner","fee","memo","msg","msgTransferTokenOwner","result","signAndBroadcast","amount","gas","sendMsgIssueToken","msgIssueToken","sendMsgMintToken","msgMintToken","sendMsgEditToken","msgEditToken","sendMsgBurnToken","msgBurnToken","MsgTransferTokenOwner","MsgIssueToken","MsgMintToken","MsgEditToken","MsgBurnToken"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,kBAAhC,EAAoDC,QAApD,QAAoE,UAApE,C,CACA;;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,MAAT,QAAuB,4BAAvB;AACA,SAASD,KAAT,EAAgBC,MAAhB;;AACA,eAAeC,YAAf,CAA4BC,WAA5B,EAAyC;AACrC,SAAO,MAAMR,QAAQ,CAACQ,WAAW,CAAC,sBAAD,CAAZ,EAAsC;AACvDC,IAAAA,IAAI,EAAED,WAAW,CAAC,0BAAD;AADsC,GAAtC,CAArB;AAGH;;AACD,eAAeE,eAAf,CAA+BF,WAA/B,EAA4C;AACxC,SAAO,MAAMP,WAAW,CAAC;AACrBQ,IAAAA,IAAI,EAAED,WAAW,CAAC,sBAAD;AADI,GAAD,CAAxB;AAGH;;AACD,SAASG,YAAT,CAAsBC,KAAtB,EAA6BC,WAA7B,EAA0C;AACtC,OAAK,IAAIC,IAAT,IAAiBC,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAAjB,EAA2C;AACvC,QAAII,KAAK,CAACC,OAAN,CAAcL,WAAW,CAACC,IAAD,CAAzB,CAAJ,EAAsC;AAClCF,MAAAA,KAAK,CAACE,IAAD,CAAL,GAAc,CAAC,GAAGF,KAAK,CAACE,IAAD,CAAT,EAAiB,GAAGD,WAAW,CAACC,IAAD,CAA/B,CAAd;AACH,KAFD,MAGK;AACDF,MAAAA,KAAK,CAACE,IAAD,CAAL,GAAcD,WAAW,CAACC,IAAD,CAAzB;AACH;AACJ;;AACD,SAAOF,KAAP;AACH;;AACD,SAASO,YAAT,CAAsBC,QAAtB,EAAgC;AAC5B,MAAIC,SAAS,GAAG;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAhB;;AACA,OAAK,MAAM,CAACC,GAAD,EAAMX,KAAN,CAAX,IAA2BG,MAAM,CAACS,OAAP,CAAeJ,QAAf,CAA3B,EAAqD;AACjD,QAAIK,KAAK,GAAG,EAAZ;AACAA,IAAAA,KAAK,CAACC,IAAN,GAAaH,GAAb;AACAE,IAAAA,KAAK,CAACE,IAAN,GAAa,OAAOf,KAApB;AACAS,IAAAA,SAAS,CAACC,MAAV,CAAiBM,IAAjB,CAAsBH,KAAtB;AACH;;AACD,SAAOJ,SAAP;AACH;;AACD,MAAMQ,eAAe,GAAG,MAAM;AAC1B,SAAO;AACHxB,IAAAA,KAAK,EAAE,EADJ;AAEHyB,IAAAA,MAAM,EAAE,EAFL;AAGHC,IAAAA,IAAI,EAAE,EAHH;AAIHzB,IAAAA,MAAM,EAAE,EAJL;AAKH0B,IAAAA,SAAS,EAAE,EALR;AAMHC,IAAAA,UAAU,EAAE;AACR5B,MAAAA,KAAK,EAAEc,YAAY,CAACd,KAAK,CAAC6B,WAAN,CAAkB,EAAlB,CAAD,CADX;AAER5B,MAAAA,MAAM,EAAEa,YAAY,CAACb,MAAM,CAAC4B,WAAP,CAAmB,EAAnB,CAAD;AAFZ,KANT;AAUHC,IAAAA,SAAS,EAAEhC,QAVR;AAWHiC,IAAAA,cAAc,EAAE,IAAIC,GAAJ;AAXb,GAAP;AAaH,CAdD,C,CAeA;;;AACA,MAAMC,KAAK,GAAGT,eAAe,EAA7B;AACA,eAAe;AACXU,EAAAA,UAAU,EAAE,IADD;AAEXD,EAAAA,KAFW;AAGXE,EAAAA,SAAS,EAAE;AACPC,IAAAA,WAAW,CAACH,KAAD,EAAQ;AACfvB,MAAAA,MAAM,CAAC2B,MAAP,CAAcJ,KAAd,EAAqBT,eAAe,EAApC;AACH,KAHM;;AAIPc,IAAAA,KAAK,CAACL,KAAD,EAAQ;AAAEM,MAAAA,KAAF;AAASrB,MAAAA,GAAT;AAAcX,MAAAA;AAAd,KAAR,EAA+B;AAChC0B,MAAAA,KAAK,CAACM,KAAD,CAAL,CAAaC,IAAI,CAACC,SAAL,CAAevB,GAAf,CAAb,IAAoCX,KAApC;AACH,KANM;;AAOPmC,IAAAA,SAAS,CAACT,KAAD,EAAQU,YAAR,EAAsB;AAC3BV,MAAAA,KAAK,CAACF,cAAN,CAAqBa,GAArB,CAAyBJ,IAAI,CAACC,SAAL,CAAeE,YAAf,CAAzB;AACH,KATM;;AAUPE,IAAAA,WAAW,CAACZ,KAAD,EAAQU,YAAR,EAAsB;AAC7BV,MAAAA,KAAK,CAACF,cAAN,CAAqBe,MAArB,CAA4BN,IAAI,CAACC,SAAL,CAAeE,YAAf,CAA5B;AACH;;AAZM,GAHA;AAiBXI,EAAAA,OAAO,EAAE;AACLC,IAAAA,QAAQ,EAAGf,KAAD,IAAW,CAACgB,MAAM,GAAG;AAAEA,MAAAA,MAAM,EAAE;AAAV,KAAV,KAA6B;AAC9C,UAAI,CAACA,MAAM,CAACV,KAAZ,EAAmB;AACfU,QAAAA,MAAM,CAACV,KAAP,GAAe,IAAf;AACH;;AACD,aAAON,KAAK,CAACjC,KAAN,CAAYwC,IAAI,CAACC,SAAL,CAAeQ,MAAf,CAAZ,KAAuC,EAA9C;AACH,KANI;AAOLC,IAAAA,SAAS,EAAGjB,KAAD,IAAW,CAACgB,MAAM,GAAG;AAAEA,MAAAA,MAAM,EAAE;AAAV,KAAV,KAA6B;AAC/C,UAAI,CAACA,MAAM,CAACV,KAAZ,EAAmB;AACfU,QAAAA,MAAM,CAACV,KAAP,GAAe,IAAf;AACH;;AACD,aAAON,KAAK,CAACR,MAAN,CAAae,IAAI,CAACC,SAAL,CAAeQ,MAAf,CAAb,KAAwC,EAA/C;AACH,KAZI;AAaLE,IAAAA,OAAO,EAAGlB,KAAD,IAAW,CAACgB,MAAM,GAAG;AAAEA,MAAAA,MAAM,EAAE;AAAV,KAAV,KAA6B;AAC7C,UAAI,CAACA,MAAM,CAACV,KAAZ,EAAmB;AACfU,QAAAA,MAAM,CAACV,KAAP,GAAe,IAAf;AACH;;AACD,aAAON,KAAK,CAACP,IAAN,CAAWc,IAAI,CAACC,SAAL,CAAeQ,MAAf,CAAX,KAAsC,EAA7C;AACH,KAlBI;AAmBLG,IAAAA,SAAS,EAAGnB,KAAD,IAAW,CAACgB,MAAM,GAAG;AAAEA,MAAAA,MAAM,EAAE;AAAV,KAAV,KAA6B;AAC/C,UAAI,CAACA,MAAM,CAACV,KAAZ,EAAmB;AACfU,QAAAA,MAAM,CAACV,KAAP,GAAe,IAAf;AACH;;AACD,aAAON,KAAK,CAAChC,MAAN,CAAauC,IAAI,CAACC,SAAL,CAAeQ,MAAf,CAAb,KAAwC,EAA/C;AACH,KAxBI;AAyBLI,IAAAA,YAAY,EAAGpB,KAAD,IAAW,CAACgB,MAAM,GAAG;AAAEA,MAAAA,MAAM,EAAE;AAAV,KAAV,KAA6B;AAClD,UAAI,CAACA,MAAM,CAACV,KAAZ,EAAmB;AACfU,QAAAA,MAAM,CAACV,KAAP,GAAe,IAAf;AACH;;AACD,aAAON,KAAK,CAACN,SAAN,CAAgBa,IAAI,CAACC,SAAL,CAAeQ,MAAf,CAAhB,KAA2C,EAAlD;AACH,KA9BI;AA+BLK,IAAAA,gBAAgB,EAAGrB,KAAD,IAAYX,IAAD,IAAU;AACnC,aAAOW,KAAK,CAACL,UAAN,CAAiBN,IAAjB,EAAuBL,MAA9B;AACH,KAjCI;AAkCLsC,IAAAA,WAAW,EAAGtB,KAAD,IAAW;AACpB,aAAOA,KAAK,CAACH,SAAb;AACH;AApCI,GAjBE;AAuDX0B,EAAAA,OAAO,EAAE;AACLC,IAAAA,IAAI,CAAC;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,EAA4B;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;;AACA,UAAIF,WAAW,CAAC,mBAAD,CAAf,EAAsC;AAClCA,QAAAA,WAAW,CAAC,mBAAD,CAAX,CAAiCG,EAAjC,CAAoC,UAApC,EAAgD,MAAM;AAClDJ,UAAAA,QAAQ,CAAC,aAAD,CAAR;AACH,SAFD;AAGH;AACJ,KARI;;AASLK,IAAAA,UAAU,CAAC;AAAEC,MAAAA;AAAF,KAAD,EAAa;AACnBA,MAAAA,MAAM,CAAC,aAAD,CAAN;AACH,KAXI;;AAYLC,IAAAA,WAAW,CAAC;AAAED,MAAAA;AAAF,KAAD,EAAarB,YAAb,EAA2B;AAClCqB,MAAAA,MAAM,CAAC,aAAD,EAAgBrB,YAAhB,CAAN;AACH,KAdI;;AAeL,UAAMuB,WAAN,CAAkB;AAAEjC,MAAAA,KAAF;AAASyB,MAAAA;AAAT,KAAlB,EAAuC;AACnCzB,MAAAA,KAAK,CAACF,cAAN,CAAqBoC,OAArB,CAA6B,MAAOxB,YAAP,IAAwB;AACjD,YAAI;AACA,gBAAMyB,GAAG,GAAG5B,IAAI,CAAC6B,KAAL,CAAW1B,YAAX,CAAZ;AACA,gBAAMe,QAAQ,CAACU,GAAG,CAACE,MAAL,EAAaF,GAAG,CAACG,OAAjB,CAAd;AACH,SAHD,CAIA,OAAOC,CAAP,EAAU;AACN,gBAAM,IAAIzE,WAAJ,CAAgB,oBAAoByE,CAAC,CAACC,OAAtC,CAAN;AACH;AACJ,OARD;AASH,KAzBI;;AA0BL,UAAMC,UAAN,CAAiB;AAAEV,MAAAA,MAAF;AAAUL,MAAAA,WAAV;AAAuBZ,MAAAA;AAAvB,KAAjB,EAAmD;AAAE4B,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAAqB;AAAED,QAAAA,SAAS,EAAE,KAAb;AAAoBC,QAAAA,GAAG,EAAE;AAAzB,OAAhC;AAAkE5B,MAAAA,MAAlE;AAA0EV,MAAAA,KAAK,GAAG;AAAlF,KAAnD,EAA6I;AACzI,UAAI;AACA,cAAMrB,GAAG,GAAG+B,MAAM,IAAI,EAAtB;AACA,cAAMrD,WAAW,GAAG,MAAMS,eAAe,CAACsD,WAAD,CAAzC;AACA,YAAIpD,KAAK,GAAG,CAAC,MAAMX,WAAW,CAACkF,UAAZ,CAAuB5D,GAAG,CAAC6D,KAA3B,CAAP,EAA0CC,IAAtD;AACAhB,QAAAA,MAAM,CAAC,OAAD,EAAU;AAAEzB,UAAAA,KAAK,EAAE,OAAT;AAAkBrB,UAAAA,GAAG,EAAE;AAAE+B,YAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,aAAV;AAAsBqB,YAAAA;AAAtB,WAAvB;AAAsDhC,UAAAA;AAAtD,SAAV,CAAN;AACA,YAAIqE,SAAJ,EACIZ,MAAM,CAAC,WAAD,EAAc;AAAEM,UAAAA,MAAM,EAAE,YAAV;AAAwBC,UAAAA,OAAO,EAAE;AAAEI,YAAAA,OAAO,EAAE;AAAEE,cAAAA;AAAF,aAAX;AAAoB5B,YAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,aAA5B;AAAwCqB,YAAAA;AAAxC;AAAjC,SAAd,CAAN;AACJ,eAAOQ,OAAO,CAAC,UAAD,CAAP,CAAoB;AAAEE,UAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,WAAV;AAAsBqB,UAAAA;AAAtB,SAApB,KAAsD,EAA7D;AACH,OARD,CASA,OAAOiC,CAAP,EAAU;AACN,cAAM,IAAIzE,WAAJ,CAAgB,wBAAhB,EAA0C,oDAAoDyE,CAAC,CAACC,OAAhG,CAAN;AACH;AACJ,KAvCI;;AAwCL,UAAMQ,WAAN,CAAkB;AAAEjB,MAAAA,MAAF;AAAUL,MAAAA,WAAV;AAAuBZ,MAAAA;AAAvB,KAAlB,EAAoD;AAAE4B,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAAqB;AAAED,QAAAA,SAAS,EAAE,KAAb;AAAoBC,QAAAA,GAAG,EAAE;AAAzB,OAAhC;AAAkE5B,MAAAA,MAAlE;AAA0EV,MAAAA,KAAK,GAAG;AAAlF,KAApD,EAA8I;AAC1I,UAAI;AACA,cAAMrB,GAAG,GAAG+B,MAAM,IAAI,EAAtB;AACA,cAAMrD,WAAW,GAAG,MAAMS,eAAe,CAACsD,WAAD,CAAzC;AACA,YAAIpD,KAAK,GAAG,CAAC,MAAMX,WAAW,CAACsF,WAAZ,CAAwB3C,KAAxB,CAAP,EAAuCyC,IAAnD;;AACA,eAAOH,GAAG,IAAItE,KAAK,CAAC4E,UAAb,IAA2B5E,KAAK,CAAC4E,UAAN,CAAiBC,QAAjB,IAA6B,IAA/D,EAAqE;AACjE,cAAI5E,WAAW,GAAG,CAAC,MAAMZ,WAAW,CAACsF,WAAZ,CAAwB,EAAE,GAAG3C,KAAL;AAAY,8BAAkBhC,KAAK,CAAC4E,UAAN,CAAiBC;AAA/C,WAAxB,CAAP,EAA2FJ,IAA7G;AACAzE,UAAAA,KAAK,GAAGD,YAAY,CAACC,KAAD,EAAQC,WAAR,CAApB;AACH;;AACDwD,QAAAA,MAAM,CAAC,OAAD,EAAU;AAAEzB,UAAAA,KAAK,EAAE,QAAT;AAAmBrB,UAAAA,GAAG,EAAE;AAAE+B,YAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,aAAV;AAAsBqB,YAAAA;AAAtB,WAAxB;AAAuDhC,UAAAA;AAAvD,SAAV,CAAN;AACA,YAAIqE,SAAJ,EACIZ,MAAM,CAAC,WAAD,EAAc;AAAEM,UAAAA,MAAM,EAAE,aAAV;AAAyBC,UAAAA,OAAO,EAAE;AAAEI,YAAAA,OAAO,EAAE;AAAEE,cAAAA;AAAF,aAAX;AAAoB5B,YAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,aAA5B;AAAwCqB,YAAAA;AAAxC;AAAlC,SAAd,CAAN;AACJ,eAAOQ,OAAO,CAAC,WAAD,CAAP,CAAqB;AAAEE,UAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,WAAV;AAAsBqB,UAAAA;AAAtB,SAArB,KAAuD,EAA9D;AACH,OAZD,CAaA,OAAOiC,CAAP,EAAU;AACN,cAAM,IAAIzE,WAAJ,CAAgB,yBAAhB,EAA2C,oDAAoDyE,CAAC,CAACC,OAAjG,CAAN;AACH;AACJ,KAzDI;;AA0DL,UAAMY,SAAN,CAAgB;AAAErB,MAAAA,MAAF;AAAUL,MAAAA,WAAV;AAAuBZ,MAAAA;AAAvB,KAAhB,EAAkD;AAAE4B,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAAqB;AAAED,QAAAA,SAAS,EAAE,KAAb;AAAoBC,QAAAA,GAAG,EAAE;AAAzB,OAAhC;AAAkE5B,MAAAA,MAAlE;AAA0EV,MAAAA,KAAK,GAAG;AAAlF,KAAlD,EAA4I;AACxI,UAAI;AACA,cAAMrB,GAAG,GAAG+B,MAAM,IAAI,EAAtB;AACA,cAAMrD,WAAW,GAAG,MAAMS,eAAe,CAACsD,WAAD,CAAzC;AACA,YAAIpD,KAAK,GAAG,CAAC,MAAMX,WAAW,CAAC0F,SAAZ,CAAsBpE,GAAG,CAACqE,MAA1B,CAAP,EAA0CP,IAAtD;AACAhB,QAAAA,MAAM,CAAC,OAAD,EAAU;AAAEzB,UAAAA,KAAK,EAAE,MAAT;AAAiBrB,UAAAA,GAAG,EAAE;AAAE+B,YAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,aAAV;AAAsBqB,YAAAA;AAAtB,WAAtB;AAAqDhC,UAAAA;AAArD,SAAV,CAAN;AACA,YAAIqE,SAAJ,EACIZ,MAAM,CAAC,WAAD,EAAc;AAAEM,UAAAA,MAAM,EAAE,WAAV;AAAuBC,UAAAA,OAAO,EAAE;AAAEI,YAAAA,OAAO,EAAE;AAAEE,cAAAA;AAAF,aAAX;AAAoB5B,YAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,aAA5B;AAAwCqB,YAAAA;AAAxC;AAAhC,SAAd,CAAN;AACJ,eAAOQ,OAAO,CAAC,SAAD,CAAP,CAAmB;AAAEE,UAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,WAAV;AAAsBqB,UAAAA;AAAtB,SAAnB,KAAqD,EAA5D;AACH,OARD,CASA,OAAOiC,CAAP,EAAU;AACN,cAAM,IAAIzE,WAAJ,CAAgB,uBAAhB,EAAyC,oDAAoDyE,CAAC,CAACC,OAA/F,CAAN;AACH;AACJ,KAvEI;;AAwEL,UAAMe,WAAN,CAAkB;AAAExB,MAAAA,MAAF;AAAUL,MAAAA,WAAV;AAAuBZ,MAAAA;AAAvB,KAAlB,EAAoD;AAAE4B,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAAqB;AAAED,QAAAA,SAAS,EAAE,KAAb;AAAoBC,QAAAA,GAAG,EAAE;AAAzB,OAAhC;AAAkE5B,MAAAA,MAAlE;AAA0EV,MAAAA,KAAK,GAAG;AAAlF,KAApD,EAA8I;AAC1I,UAAI;AACA,cAAMrB,GAAG,GAAG+B,MAAM,IAAI,EAAtB;AACA,cAAMrD,WAAW,GAAG,MAAMS,eAAe,CAACsD,WAAD,CAAzC;AACA,YAAIpD,KAAK,GAAG,CAAC,MAAMX,WAAW,CAAC6F,WAAZ,EAAP,EAAkCT,IAA9C;AACAhB,QAAAA,MAAM,CAAC,OAAD,EAAU;AAAEzB,UAAAA,KAAK,EAAE,QAAT;AAAmBrB,UAAAA,GAAG,EAAE;AAAE+B,YAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,aAAV;AAAsBqB,YAAAA;AAAtB,WAAxB;AAAuDhC,UAAAA;AAAvD,SAAV,CAAN;AACA,YAAIqE,SAAJ,EACIZ,MAAM,CAAC,WAAD,EAAc;AAAEM,UAAAA,MAAM,EAAE,aAAV;AAAyBC,UAAAA,OAAO,EAAE;AAAEI,YAAAA,OAAO,EAAE;AAAEE,cAAAA;AAAF,aAAX;AAAoB5B,YAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,aAA5B;AAAwCqB,YAAAA;AAAxC;AAAlC,SAAd,CAAN;AACJ,eAAOQ,OAAO,CAAC,WAAD,CAAP,CAAqB;AAAEE,UAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,WAAV;AAAsBqB,UAAAA;AAAtB,SAArB,KAAuD,EAA9D;AACH,OARD,CASA,OAAOiC,CAAP,EAAU;AACN,cAAM,IAAIzE,WAAJ,CAAgB,yBAAhB,EAA2C,oDAAoDyE,CAAC,CAACC,OAAjG,CAAN;AACH;AACJ,KArFI;;AAsFL,UAAMiB,cAAN,CAAqB;AAAE1B,MAAAA,MAAF;AAAUL,MAAAA,WAAV;AAAuBZ,MAAAA;AAAvB,KAArB,EAAuD;AAAE4B,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAAqB;AAAED,QAAAA,SAAS,EAAE,KAAb;AAAoBC,QAAAA,GAAG,EAAE;AAAzB,OAAhC;AAAkE5B,MAAAA,MAAlE;AAA0EV,MAAAA,KAAK,GAAG;AAAlF,KAAvD,EAAiJ;AAC7I,UAAI;AACA,cAAMrB,GAAG,GAAG+B,MAAM,IAAI,EAAtB;AACA,cAAMrD,WAAW,GAAG,MAAMS,eAAe,CAACsD,WAAD,CAAzC;AACA,YAAIpD,KAAK,GAAG,CAAC,MAAMX,WAAW,CAAC+F,cAAZ,EAAP,EAAqCX,IAAjD;AACAhB,QAAAA,MAAM,CAAC,OAAD,EAAU;AAAEzB,UAAAA,KAAK,EAAE,WAAT;AAAsBrB,UAAAA,GAAG,EAAE;AAAE+B,YAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,aAAV;AAAsBqB,YAAAA;AAAtB,WAA3B;AAA0DhC,UAAAA;AAA1D,SAAV,CAAN;AACA,YAAIqE,SAAJ,EACIZ,MAAM,CAAC,WAAD,EAAc;AAAEM,UAAAA,MAAM,EAAE,gBAAV;AAA4BC,UAAAA,OAAO,EAAE;AAAEI,YAAAA,OAAO,EAAE;AAAEE,cAAAA;AAAF,aAAX;AAAoB5B,YAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,aAA5B;AAAwCqB,YAAAA;AAAxC;AAArC,SAAd,CAAN;AACJ,eAAOQ,OAAO,CAAC,cAAD,CAAP,CAAwB;AAAEE,UAAAA,MAAM,EAAE,EAAE,GAAG/B;AAAL,WAAV;AAAsBqB,UAAAA;AAAtB,SAAxB,KAA0D,EAAjE;AACH,OARD,CASA,OAAOiC,CAAP,EAAU;AACN,cAAM,IAAIzE,WAAJ,CAAgB,4BAAhB,EAA8C,oDAAoDyE,CAAC,CAACC,OAApG,CAAN;AACH;AACJ,KAnGI;;AAoGL,UAAMmB,yBAAN,CAAgC;AAAEjC,MAAAA;AAAF,KAAhC,EAAiD;AAAEpD,MAAAA,KAAF;AAASsF,MAAAA,GAAG,GAAG,EAAf;AAAmBC,MAAAA,IAAI,GAAG;AAA1B,KAAjD,EAAiF;AAC7E,UAAI;AACA,cAAMnG,QAAQ,GAAG,MAAMO,YAAY,CAACyD,WAAD,CAAnC;AACA,cAAMoC,GAAG,GAAG,MAAMpG,QAAQ,CAACqG,qBAAT,CAA+BzF,KAA/B,CAAlB;AACA,cAAM0F,MAAM,GAAG,MAAMtG,QAAQ,CAACuG,gBAAT,CAA0B,CAACH,GAAD,CAA1B,EAAiC;AAAEF,UAAAA,GAAG,EAAE;AAAEM,YAAAA,MAAM,EAAEN,GAAV;AACrDO,YAAAA,GAAG,EAAE;AADgD,WAAP;AAC7BN,UAAAA;AAD6B,SAAjC,CAArB;AAEA,eAAOG,MAAP;AACH,OAND,CAOA,OAAOzB,CAAP,EAAU;AACN,YAAIA,CAAC,IAAI3E,kBAAT,EAA6B;AACzB,gBAAM,IAAIE,WAAJ,CAAgB,qCAAhB,EAAuD,0DAAvD,CAAN;AACH,SAFD,MAGK;AACD,gBAAM,IAAIA,WAAJ,CAAgB,qCAAhB,EAAuD,6BAA6ByE,CAAC,CAACC,OAAtF,CAAN;AACH;AACJ;AACJ,KApHI;;AAqHL,UAAM4B,iBAAN,CAAwB;AAAE1C,MAAAA;AAAF,KAAxB,EAAyC;AAAEpD,MAAAA,KAAF;AAASsF,MAAAA,GAAG,GAAG,EAAf;AAAmBC,MAAAA,IAAI,GAAG;AAA1B,KAAzC,EAAyE;AACrE,UAAI;AACA,cAAMnG,QAAQ,GAAG,MAAMO,YAAY,CAACyD,WAAD,CAAnC;AACA,cAAMoC,GAAG,GAAG,MAAMpG,QAAQ,CAAC2G,aAAT,CAAuB/F,KAAvB,CAAlB;AACA,cAAM0F,MAAM,GAAG,MAAMtG,QAAQ,CAACuG,gBAAT,CAA0B,CAACH,GAAD,CAA1B,EAAiC;AAAEF,UAAAA,GAAG,EAAE;AAAEM,YAAAA,MAAM,EAAEN,GAAV;AACrDO,YAAAA,GAAG,EAAE;AADgD,WAAP;AAC7BN,UAAAA;AAD6B,SAAjC,CAArB;AAEA,eAAOG,MAAP;AACH,OAND,CAOA,OAAOzB,CAAP,EAAU;AACN,YAAIA,CAAC,IAAI3E,kBAAT,EAA6B;AACzB,gBAAM,IAAIE,WAAJ,CAAgB,6BAAhB,EAA+C,0DAA/C,CAAN;AACH,SAFD,MAGK;AACD,gBAAM,IAAIA,WAAJ,CAAgB,6BAAhB,EAA+C,6BAA6ByE,CAAC,CAACC,OAA9E,CAAN;AACH;AACJ;AACJ,KArII;;AAsIL,UAAM8B,gBAAN,CAAuB;AAAE5C,MAAAA;AAAF,KAAvB,EAAwC;AAAEpD,MAAAA,KAAF;AAASsF,MAAAA,GAAG,GAAG,EAAf;AAAmBC,MAAAA,IAAI,GAAG;AAA1B,KAAxC,EAAwE;AACpE,UAAI;AACA,cAAMnG,QAAQ,GAAG,MAAMO,YAAY,CAACyD,WAAD,CAAnC;AACA,cAAMoC,GAAG,GAAG,MAAMpG,QAAQ,CAAC6G,YAAT,CAAsBjG,KAAtB,CAAlB;AACA,cAAM0F,MAAM,GAAG,MAAMtG,QAAQ,CAACuG,gBAAT,CAA0B,CAACH,GAAD,CAA1B,EAAiC;AAAEF,UAAAA,GAAG,EAAE;AAAEM,YAAAA,MAAM,EAAEN,GAAV;AACrDO,YAAAA,GAAG,EAAE;AADgD,WAAP;AAC7BN,UAAAA;AAD6B,SAAjC,CAArB;AAEA,eAAOG,MAAP;AACH,OAND,CAOA,OAAOzB,CAAP,EAAU;AACN,YAAIA,CAAC,IAAI3E,kBAAT,EAA6B;AACzB,gBAAM,IAAIE,WAAJ,CAAgB,4BAAhB,EAA8C,0DAA9C,CAAN;AACH,SAFD,MAGK;AACD,gBAAM,IAAIA,WAAJ,CAAgB,4BAAhB,EAA8C,6BAA6ByE,CAAC,CAACC,OAA7E,CAAN;AACH;AACJ;AACJ,KAtJI;;AAuJL,UAAMgC,gBAAN,CAAuB;AAAE9C,MAAAA;AAAF,KAAvB,EAAwC;AAAEpD,MAAAA,KAAF;AAASsF,MAAAA,GAAG,GAAG,EAAf;AAAmBC,MAAAA,IAAI,GAAG;AAA1B,KAAxC,EAAwE;AACpE,UAAI;AACA,cAAMnG,QAAQ,GAAG,MAAMO,YAAY,CAACyD,WAAD,CAAnC;AACA,cAAMoC,GAAG,GAAG,MAAMpG,QAAQ,CAAC+G,YAAT,CAAsBnG,KAAtB,CAAlB;AACA,cAAM0F,MAAM,GAAG,MAAMtG,QAAQ,CAACuG,gBAAT,CAA0B,CAACH,GAAD,CAA1B,EAAiC;AAAEF,UAAAA,GAAG,EAAE;AAAEM,YAAAA,MAAM,EAAEN,GAAV;AACrDO,YAAAA,GAAG,EAAE;AADgD,WAAP;AAC7BN,UAAAA;AAD6B,SAAjC,CAArB;AAEA,eAAOG,MAAP;AACH,OAND,CAOA,OAAOzB,CAAP,EAAU;AACN,YAAIA,CAAC,IAAI3E,kBAAT,EAA6B;AACzB,gBAAM,IAAIE,WAAJ,CAAgB,4BAAhB,EAA8C,0DAA9C,CAAN;AACH,SAFD,MAGK;AACD,gBAAM,IAAIA,WAAJ,CAAgB,4BAAhB,EAA8C,6BAA6ByE,CAAC,CAACC,OAA7E,CAAN;AACH;AACJ;AACJ,KAvKI;;AAwKL,UAAMkC,gBAAN,CAAuB;AAAEhD,MAAAA;AAAF,KAAvB,EAAwC;AAAEpD,MAAAA,KAAF;AAASsF,MAAAA,GAAG,GAAG,EAAf;AAAmBC,MAAAA,IAAI,GAAG;AAA1B,KAAxC,EAAwE;AACpE,UAAI;AACA,cAAMnG,QAAQ,GAAG,MAAMO,YAAY,CAACyD,WAAD,CAAnC;AACA,cAAMoC,GAAG,GAAG,MAAMpG,QAAQ,CAACiH,YAAT,CAAsBrG,KAAtB,CAAlB;AACA,cAAM0F,MAAM,GAAG,MAAMtG,QAAQ,CAACuG,gBAAT,CAA0B,CAACH,GAAD,CAA1B,EAAiC;AAAEF,UAAAA,GAAG,EAAE;AAAEM,YAAAA,MAAM,EAAEN,GAAV;AACrDO,YAAAA,GAAG,EAAE;AADgD,WAAP;AAC7BN,UAAAA;AAD6B,SAAjC,CAArB;AAEA,eAAOG,MAAP;AACH,OAND,CAOA,OAAOzB,CAAP,EAAU;AACN,YAAIA,CAAC,IAAI3E,kBAAT,EAA6B;AACzB,gBAAM,IAAIE,WAAJ,CAAgB,4BAAhB,EAA8C,0DAA9C,CAAN;AACH,SAFD,MAGK;AACD,gBAAM,IAAIA,WAAJ,CAAgB,4BAAhB,EAA8C,6BAA6ByE,CAAC,CAACC,OAA7E,CAAN;AACH;AACJ;AACJ,KAxLI;;AAyLL,UAAMoC,qBAAN,CAA4B;AAAElD,MAAAA;AAAF,KAA5B,EAA6C;AAAEpD,MAAAA;AAAF,KAA7C,EAAwD;AACpD,UAAI;AACA,cAAMZ,QAAQ,GAAG,MAAMO,YAAY,CAACyD,WAAD,CAAnC;AACA,cAAMoC,GAAG,GAAG,MAAMpG,QAAQ,CAACqG,qBAAT,CAA+BzF,KAA/B,CAAlB;AACA,eAAOwF,GAAP;AACH,OAJD,CAKA,OAAOvB,CAAP,EAAU;AACN,YAAIA,CAAC,IAAI3E,kBAAT,EAA6B;AACzB,gBAAM,IAAIE,WAAJ,CAAgB,qCAAhB,EAAuD,0DAAvD,CAAN;AACH,SAFD,MAGK;AACD,gBAAM,IAAIA,WAAJ,CAAgB,uCAAhB,EAAyD,+BAA+ByE,CAAC,CAACC,OAA1F,CAAN;AACH;AACJ;AACJ,KAvMI;;AAwML,UAAMqC,aAAN,CAAoB;AAAEnD,MAAAA;AAAF,KAApB,EAAqC;AAAEpD,MAAAA;AAAF,KAArC,EAAgD;AAC5C,UAAI;AACA,cAAMZ,QAAQ,GAAG,MAAMO,YAAY,CAACyD,WAAD,CAAnC;AACA,cAAMoC,GAAG,GAAG,MAAMpG,QAAQ,CAAC2G,aAAT,CAAuB/F,KAAvB,CAAlB;AACA,eAAOwF,GAAP;AACH,OAJD,CAKA,OAAOvB,CAAP,EAAU;AACN,YAAIA,CAAC,IAAI3E,kBAAT,EAA6B;AACzB,gBAAM,IAAIE,WAAJ,CAAgB,6BAAhB,EAA+C,0DAA/C,CAAN;AACH,SAFD,MAGK;AACD,gBAAM,IAAIA,WAAJ,CAAgB,+BAAhB,EAAiD,+BAA+ByE,CAAC,CAACC,OAAlF,CAAN;AACH;AACJ;AACJ,KAtNI;;AAuNL,UAAMsC,YAAN,CAAmB;AAAEpD,MAAAA;AAAF,KAAnB,EAAoC;AAAEpD,MAAAA;AAAF,KAApC,EAA+C;AAC3C,UAAI;AACA,cAAMZ,QAAQ,GAAG,MAAMO,YAAY,CAACyD,WAAD,CAAnC;AACA,cAAMoC,GAAG,GAAG,MAAMpG,QAAQ,CAAC6G,YAAT,CAAsBjG,KAAtB,CAAlB;AACA,eAAOwF,GAAP;AACH,OAJD,CAKA,OAAOvB,CAAP,EAAU;AACN,YAAIA,CAAC,IAAI3E,kBAAT,EAA6B;AACzB,gBAAM,IAAIE,WAAJ,CAAgB,4BAAhB,EAA8C,0DAA9C,CAAN;AACH,SAFD,MAGK;AACD,gBAAM,IAAIA,WAAJ,CAAgB,8BAAhB,EAAgD,+BAA+ByE,CAAC,CAACC,OAAjF,CAAN;AACH;AACJ;AACJ,KArOI;;AAsOL,UAAMuC,YAAN,CAAmB;AAAErD,MAAAA;AAAF,KAAnB,EAAoC;AAAEpD,MAAAA;AAAF,KAApC,EAA+C;AAC3C,UAAI;AACA,cAAMZ,QAAQ,GAAG,MAAMO,YAAY,CAACyD,WAAD,CAAnC;AACA,cAAMoC,GAAG,GAAG,MAAMpG,QAAQ,CAAC+G,YAAT,CAAsBnG,KAAtB,CAAlB;AACA,eAAOwF,GAAP;AACH,OAJD,CAKA,OAAOvB,CAAP,EAAU;AACN,YAAIA,CAAC,IAAI3E,kBAAT,EAA6B;AACzB,gBAAM,IAAIE,WAAJ,CAAgB,4BAAhB,EAA8C,0DAA9C,CAAN;AACH,SAFD,MAGK;AACD,gBAAM,IAAIA,WAAJ,CAAgB,8BAAhB,EAAgD,+BAA+ByE,CAAC,CAACC,OAAjF,CAAN;AACH;AACJ;AACJ,KApPI;;AAqPL,UAAMwC,YAAN,CAAmB;AAAEtD,MAAAA;AAAF,KAAnB,EAAoC;AAAEpD,MAAAA;AAAF,KAApC,EAA+C;AAC3C,UAAI;AACA,cAAMZ,QAAQ,GAAG,MAAMO,YAAY,CAACyD,WAAD,CAAnC;AACA,cAAMoC,GAAG,GAAG,MAAMpG,QAAQ,CAACiH,YAAT,CAAsBrG,KAAtB,CAAlB;AACA,eAAOwF,GAAP;AACH,OAJD,CAKA,OAAOvB,CAAP,EAAU;AACN,YAAIA,CAAC,IAAI3E,kBAAT,EAA6B;AACzB,gBAAM,IAAIE,WAAJ,CAAgB,4BAAhB,EAA8C,0DAA9C,CAAN;AACH,SAFD,MAGK;AACD,gBAAM,IAAIA,WAAJ,CAAgB,8BAAhB,EAAgD,+BAA+ByE,CAAC,CAACC,OAAjF,CAAN;AACH;AACJ;AACJ;;AAnQI;AAvDE,CAAf","sourcesContent":["import { txClient, queryClient, MissingWalletError, registry } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { Token } from \"./module/types/token/token\";\nimport { Params } from \"./module/types/token/token\";\nexport { Token, Params };\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction mergeResults(value, next_values) {\n    for (let prop of Object.keys(next_values)) {\n        if (Array.isArray(next_values[prop])) {\n            value[prop] = [...value[prop], ...next_values[prop]];\n        }\n        else {\n            value[prop] = next_values[prop];\n        }\n    }\n    return value;\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        Token: {},\n        Tokens: {},\n        Fees: {},\n        Params: {},\n        TotalBurn: {},\n        _Structure: {\n            Token: getStructure(Token.fromPartial({})),\n            Params: getStructure(Params.fromPartial({})),\n        },\n        _Registry: registry,\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(JSON.stringify(subscription));\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(JSON.stringify(subscription));\n        }\n    },\n    getters: {\n        getToken: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Token[JSON.stringify(params)] ?? {};\n        },\n        getTokens: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Tokens[JSON.stringify(params)] ?? {};\n        },\n        getFees: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Fees[JSON.stringify(params)] ?? {};\n        },\n        getParams: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Params[JSON.stringify(params)] ?? {};\n        },\n        getTotalBurn: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.TotalBurn[JSON.stringify(params)] ?? {};\n        },\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        },\n        getRegistry: (state) => {\n            return state._Registry;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('Vuex module: alice.checkers.token initialized!');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach(async (subscription) => {\n                try {\n                    const sub = JSON.parse(subscription);\n                    await dispatch(sub.action, sub.payload);\n                }\n                catch (e) {\n                    throw new SpVuexError('Subscriptions: ' + e.message);\n                }\n            });\n        },\n        async QueryToken({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryToken(key.denom)).data;\n                commit('QUERY', { query: 'Token', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryToken', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getToken']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryToken', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryTokens({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryTokens(query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryTokens({ ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'Tokens', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryTokens', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getTokens']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryTokens', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryFees({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryFees(key.symbol)).data;\n                commit('QUERY', { query: 'Fees', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryFees', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getFees']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryFees', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryParams({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryParams()).data;\n                commit('QUERY', { query: 'Params', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryParams', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getParams']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryTotalBurn({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryTotalBurn()).data;\n                commit('QUERY', { query: 'TotalBurn', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryTotalBurn', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getTotalBurn']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryTotalBurn', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async sendMsgTransferTokenOwner({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgTransferTokenOwner(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgTransferTokenOwner:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgTransferTokenOwner:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgIssueToken({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgIssueToken(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgIssueToken:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgIssueToken:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgMintToken({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgMintToken(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgMintToken:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgMintToken:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgEditToken({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgEditToken(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgEditToken:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgEditToken:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgBurnToken({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgBurnToken(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgBurnToken:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgBurnToken:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async MsgTransferTokenOwner({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgTransferTokenOwner(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgTransferTokenOwner:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgTransferTokenOwner:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgIssueToken({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgIssueToken(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgIssueToken:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgIssueToken:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgMintToken({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgMintToken(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgMintToken:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgMintToken:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgEditToken({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgEditToken(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgEditToken:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgEditToken:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgBurnToken({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgBurnToken(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgBurnToken:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgBurnToken:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n    }\n};\n"]},"metadata":{},"sourceType":"module"}