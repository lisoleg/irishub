{"ast":null,"code":"import { txClient, queryClient, MissingWalletError, registry } from './module'; // @ts-ignore\n\nimport { SpVuexError } from '@starport/vuex';\nimport { Leaderboard } from \"./module/types/checkers/leaderboard\";\nimport { NextGame } from \"./module/types/checkers/next_game\";\nimport { Params } from \"./module/types/checkers/params\";\nimport { PlayerInfo } from \"./module/types/checkers/player_info\";\nimport { StoredGame } from \"./module/types/checkers/stored_game\";\nimport { WinningPlayer } from \"./module/types/checkers/winning_player\";\nexport { Leaderboard, NextGame, Params, PlayerInfo, StoredGame, WinningPlayer };\n\nasync function initTxClient(vuexGetters) {\n  return await txClient(vuexGetters['common/wallet/signer'], {\n    addr: vuexGetters['common/env/apiTendermint']\n  });\n}\n\nasync function initQueryClient(vuexGetters) {\n  return await queryClient({\n    addr: vuexGetters['common/env/apiCosmos']\n  });\n}\n\nfunction mergeResults(value, next_values) {\n  for (let prop of Object.keys(next_values)) {\n    if (Array.isArray(next_values[prop])) {\n      value[prop] = [...value[prop], ...next_values[prop]];\n    } else {\n      value[prop] = next_values[prop];\n    }\n  }\n\n  return value;\n}\n\nfunction getStructure(template) {\n  let structure = {\n    fields: []\n  };\n\n  for (const [key, value] of Object.entries(template)) {\n    let field = {};\n    field.name = key;\n    field.type = typeof value;\n    structure.fields.push(field);\n  }\n\n  return structure;\n}\n\nconst getDefaultState = () => {\n  return {\n    Params: {},\n    NextGame: {},\n    StoredGame: {},\n    StoredGameAll: {},\n    CanPlayMove: {},\n    PlayerInfo: {},\n    PlayerInfoAll: {},\n    Leaderboard: {},\n    Token: {},\n    Posts: {},\n    _Structure: {\n      Leaderboard: getStructure(Leaderboard.fromPartial({})),\n      NextGame: getStructure(NextGame.fromPartial({})),\n      Params: getStructure(Params.fromPartial({})),\n      PlayerInfo: getStructure(PlayerInfo.fromPartial({})),\n      StoredGame: getStructure(StoredGame.fromPartial({})),\n      WinningPlayer: getStructure(WinningPlayer.fromPartial({}))\n    },\n    _Registry: registry,\n    _Subscriptions: new Set()\n  };\n}; // initial state\n\n\nconst state = getDefaultState();\nexport default {\n  namespaced: true,\n  state,\n  mutations: {\n    RESET_STATE(state) {\n      Object.assign(state, getDefaultState());\n    },\n\n    QUERY(state, {\n      query,\n      key,\n      value\n    }) {\n      state[query][JSON.stringify(key)] = value;\n    },\n\n    SUBSCRIBE(state, subscription) {\n      state._Subscriptions.add(JSON.stringify(subscription));\n    },\n\n    UNSUBSCRIBE(state, subscription) {\n      state._Subscriptions.delete(JSON.stringify(subscription));\n    }\n\n  },\n  getters: {\n    getParams: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Params[JSON.stringify(params)] ?? {};\n    },\n    getNextGame: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.NextGame[JSON.stringify(params)] ?? {};\n    },\n    getStoredGame: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.StoredGame[JSON.stringify(params)] ?? {};\n    },\n    getStoredGameAll: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.StoredGameAll[JSON.stringify(params)] ?? {};\n    },\n    getCanPlayMove: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.CanPlayMove[JSON.stringify(params)] ?? {};\n    },\n    getPlayerInfo: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.PlayerInfo[JSON.stringify(params)] ?? {};\n    },\n    getPlayerInfoAll: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.PlayerInfoAll[JSON.stringify(params)] ?? {};\n    },\n    getLeaderboard: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Leaderboard[JSON.stringify(params)] ?? {};\n    },\n    getToken: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Token[JSON.stringify(params)] ?? {};\n    },\n    getPosts: state => (params = {\n      params: {}\n    }) => {\n      if (!params.query) {\n        params.query = null;\n      }\n\n      return state.Posts[JSON.stringify(params)] ?? {};\n    },\n    getTypeStructure: state => type => {\n      return state._Structure[type].fields;\n    },\n    getRegistry: state => {\n      return state._Registry;\n    }\n  },\n  actions: {\n    init({\n      dispatch,\n      rootGetters\n    }) {\n      console.log('Vuex module: alice.checkers.checkers initialized!');\n\n      if (rootGetters['common/env/client']) {\n        rootGetters['common/env/client'].on('newblock', () => {\n          dispatch('StoreUpdate');\n        });\n      }\n    },\n\n    resetState({\n      commit\n    }) {\n      commit('RESET_STATE');\n    },\n\n    unsubscribe({\n      commit\n    }, subscription) {\n      commit('UNSUBSCRIBE', subscription);\n    },\n\n    async StoreUpdate({\n      state,\n      dispatch\n    }) {\n      state._Subscriptions.forEach(async subscription => {\n        try {\n          const sub = JSON.parse(subscription);\n          await dispatch(sub.action, sub.payload);\n        } catch (e) {\n          throw new SpVuexError('Subscriptions: ' + e.message);\n        }\n      });\n    },\n\n    async QueryParams({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryParams()).data;\n        commit('QUERY', {\n          query: 'Params',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryParams',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getParams']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryNextGame({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryNextGame()).data;\n        commit('QUERY', {\n          query: 'NextGame',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryNextGame',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getNextGame']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryNextGame', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryStoredGame({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryStoredGame(key.index)).data;\n        commit('QUERY', {\n          query: 'StoredGame',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryStoredGame',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getStoredGame']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryStoredGame', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryStoredGameAll({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryStoredGameAll(query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryStoredGameAll({ ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'StoredGameAll',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryStoredGameAll',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getStoredGameAll']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryStoredGameAll', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryCanPlayMove({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryCanPlayMove(key.idValue, key.player, key.fromX, key.fromY, key.toX, key.toY)).data;\n        commit('QUERY', {\n          query: 'CanPlayMove',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryCanPlayMove',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getCanPlayMove']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryCanPlayMove', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryPlayerInfo({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryPlayerInfo(key.index)).data;\n        commit('QUERY', {\n          query: 'PlayerInfo',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryPlayerInfo',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getPlayerInfo']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryPlayerInfo', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryPlayerInfoAll({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryPlayerInfoAll(query)).data;\n\n        while (all && value.pagination && value.pagination.next_key != null) {\n          let next_values = (await queryClient.queryPlayerInfoAll({ ...query,\n            'pagination.key': value.pagination.next_key\n          })).data;\n          value = mergeResults(value, next_values);\n        }\n\n        commit('QUERY', {\n          query: 'PlayerInfoAll',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryPlayerInfoAll',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getPlayerInfoAll']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryPlayerInfoAll', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryLeaderboard({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryLeaderboard()).data;\n        commit('QUERY', {\n          query: 'Leaderboard',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryLeaderboard',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getLeaderboard']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryLeaderboard', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryToken({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryToken(key.tokens)).data;\n        commit('QUERY', {\n          query: 'Token',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryToken',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getToken']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryToken', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async QueryPosts({\n      commit,\n      rootGetters,\n      getters\n    }, {\n      options: {\n        subscribe,\n        all\n      } = {\n        subscribe: false,\n        all: false\n      },\n      params,\n      query = null\n    }) {\n      try {\n        const key = params ?? {};\n        const queryClient = await initQueryClient(rootGetters);\n        let value = (await queryClient.queryPosts()).data;\n        commit('QUERY', {\n          query: 'Posts',\n          key: {\n            params: { ...key\n            },\n            query\n          },\n          value\n        });\n        if (subscribe) commit('SUBSCRIBE', {\n          action: 'QueryPosts',\n          payload: {\n            options: {\n              all\n            },\n            params: { ...key\n            },\n            query\n          }\n        });\n        return getters['getPosts']({\n          params: { ...key\n          },\n          query\n        }) ?? {};\n      } catch (e) {\n        throw new SpVuexError('QueryClient:QueryPosts', 'API Node Unavailable. Could not perform query: ' + e.message);\n      }\n    },\n\n    async sendMsgCreateGame({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgCreateGame(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgCreateGame:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgCreateGame:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgPlayMove({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgPlayMove(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgPlayMove:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgPlayMove:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async sendMsgRejectGame({\n      rootGetters\n    }, {\n      value,\n      fee = [],\n      memo = ''\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgRejectGame(value);\n        const result = await txClient.signAndBroadcast([msg], {\n          fee: {\n            amount: fee,\n            gas: \"200000\"\n          },\n          memo\n        });\n        return result;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgRejectGame:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgRejectGame:Send', 'Could not broadcast Tx: ' + e.message);\n        }\n      }\n    },\n\n    async MsgCreateGame({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgCreateGame(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgCreateGame:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgCreateGame:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgPlayMove({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgPlayMove(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgPlayMove:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgPlayMove:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    },\n\n    async MsgRejectGame({\n      rootGetters\n    }, {\n      value\n    }) {\n      try {\n        const txClient = await initTxClient(rootGetters);\n        const msg = await txClient.msgRejectGame(value);\n        return msg;\n      } catch (e) {\n        if (e == MissingWalletError) {\n          throw new SpVuexError('TxClient:MsgRejectGame:Init', 'Could not initialize signing client. Wallet is required.');\n        } else {\n          throw new SpVuexError('TxClient:MsgRejectGame:Create', 'Could not create message: ' + e.message);\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/lisoleg/cosmos/irisnet/irishub/vue/src/store/generated/alice/checkers/alice.checkers.checkers/index.js"],"names":["txClient","queryClient","MissingWalletError","registry","SpVuexError","Leaderboard","NextGame","Params","PlayerInfo","StoredGame","WinningPlayer","initTxClient","vuexGetters","addr","initQueryClient","mergeResults","value","next_values","prop","Object","keys","Array","isArray","getStructure","template","structure","fields","key","entries","field","name","type","push","getDefaultState","StoredGameAll","CanPlayMove","PlayerInfoAll","Token","Posts","_Structure","fromPartial","_Registry","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","delete","getters","getParams","params","getNextGame","getStoredGame","getStoredGameAll","getCanPlayMove","getPlayerInfo","getPlayerInfoAll","getLeaderboard","getToken","getPosts","getTypeStructure","getRegistry","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","sub","parse","action","payload","e","message","QueryParams","options","subscribe","all","queryParams","data","QueryNextGame","queryNextGame","QueryStoredGame","queryStoredGame","index","QueryStoredGameAll","queryStoredGameAll","pagination","next_key","QueryCanPlayMove","queryCanPlayMove","idValue","player","fromX","fromY","toX","toY","QueryPlayerInfo","queryPlayerInfo","QueryPlayerInfoAll","queryPlayerInfoAll","QueryLeaderboard","queryLeaderboard","QueryToken","queryToken","tokens","QueryPosts","queryPosts","sendMsgCreateGame","fee","memo","msg","msgCreateGame","result","signAndBroadcast","amount","gas","sendMsgPlayMove","msgPlayMove","sendMsgRejectGame","msgRejectGame","MsgCreateGame","MsgPlayMove","MsgRejectGame"],"mappings":"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","sourcesContent":["import { txClient, queryClient, MissingWalletError, registry } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { Leaderboard } from \"./module/types/checkers/leaderboard\";\nimport { NextGame } from \"./module/types/checkers/next_game\";\nimport { Params } from \"./module/types/checkers/params\";\nimport { PlayerInfo } from \"./module/types/checkers/player_info\";\nimport { StoredGame } from \"./module/types/checkers/stored_game\";\nimport { WinningPlayer } from \"./module/types/checkers/winning_player\";\nexport { Leaderboard, NextGame, Params, PlayerInfo, StoredGame, WinningPlayer };\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction mergeResults(value, next_values) {\n    for (let prop of Object.keys(next_values)) {\n        if (Array.isArray(next_values[prop])) {\n            value[prop] = [...value[prop], ...next_values[prop]];\n        }\n        else {\n            value[prop] = next_values[prop];\n        }\n    }\n    return value;\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        Params: {},\n        NextGame: {},\n        StoredGame: {},\n        StoredGameAll: {},\n        CanPlayMove: {},\n        PlayerInfo: {},\n        PlayerInfoAll: {},\n        Leaderboard: {},\n        Token: {},\n        Posts: {},\n        _Structure: {\n            Leaderboard: getStructure(Leaderboard.fromPartial({})),\n            NextGame: getStructure(NextGame.fromPartial({})),\n            Params: getStructure(Params.fromPartial({})),\n            PlayerInfo: getStructure(PlayerInfo.fromPartial({})),\n            StoredGame: getStructure(StoredGame.fromPartial({})),\n            WinningPlayer: getStructure(WinningPlayer.fromPartial({})),\n        },\n        _Registry: registry,\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(JSON.stringify(subscription));\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(JSON.stringify(subscription));\n        }\n    },\n    getters: {\n        getParams: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Params[JSON.stringify(params)] ?? {};\n        },\n        getNextGame: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.NextGame[JSON.stringify(params)] ?? {};\n        },\n        getStoredGame: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.StoredGame[JSON.stringify(params)] ?? {};\n        },\n        getStoredGameAll: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.StoredGameAll[JSON.stringify(params)] ?? {};\n        },\n        getCanPlayMove: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.CanPlayMove[JSON.stringify(params)] ?? {};\n        },\n        getPlayerInfo: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.PlayerInfo[JSON.stringify(params)] ?? {};\n        },\n        getPlayerInfoAll: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.PlayerInfoAll[JSON.stringify(params)] ?? {};\n        },\n        getLeaderboard: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Leaderboard[JSON.stringify(params)] ?? {};\n        },\n        getToken: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Token[JSON.stringify(params)] ?? {};\n        },\n        getPosts: (state) => (params = { params: {} }) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Posts[JSON.stringify(params)] ?? {};\n        },\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        },\n        getRegistry: (state) => {\n            return state._Registry;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('Vuex module: alice.checkers.checkers initialized!');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach(async (subscription) => {\n                try {\n                    const sub = JSON.parse(subscription);\n                    await dispatch(sub.action, sub.payload);\n                }\n                catch (e) {\n                    throw new SpVuexError('Subscriptions: ' + e.message);\n                }\n            });\n        },\n        async QueryParams({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryParams()).data;\n                commit('QUERY', { query: 'Params', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryParams', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getParams']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryNextGame({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryNextGame()).data;\n                commit('QUERY', { query: 'NextGame', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryNextGame', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getNextGame']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryNextGame', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryStoredGame({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryStoredGame(key.index)).data;\n                commit('QUERY', { query: 'StoredGame', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryStoredGame', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getStoredGame']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryStoredGame', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryStoredGameAll({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryStoredGameAll(query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryStoredGameAll({ ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'StoredGameAll', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryStoredGameAll', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getStoredGameAll']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryStoredGameAll', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryCanPlayMove({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryCanPlayMove(key.idValue, key.player, key.fromX, key.fromY, key.toX, key.toY)).data;\n                commit('QUERY', { query: 'CanPlayMove', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryCanPlayMove', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getCanPlayMove']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryCanPlayMove', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryPlayerInfo({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryPlayerInfo(key.index)).data;\n                commit('QUERY', { query: 'PlayerInfo', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryPlayerInfo', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getPlayerInfo']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryPlayerInfo', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryPlayerInfoAll({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryPlayerInfoAll(query)).data;\n                while (all && value.pagination && value.pagination.next_key != null) {\n                    let next_values = (await queryClient.queryPlayerInfoAll({ ...query, 'pagination.key': value.pagination.next_key })).data;\n                    value = mergeResults(value, next_values);\n                }\n                commit('QUERY', { query: 'PlayerInfoAll', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryPlayerInfoAll', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getPlayerInfoAll']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryPlayerInfoAll', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryLeaderboard({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryLeaderboard()).data;\n                commit('QUERY', { query: 'Leaderboard', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryLeaderboard', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getLeaderboard']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryLeaderboard', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryToken({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryToken(key.tokens)).data;\n                commit('QUERY', { query: 'Token', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryToken', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getToken']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryToken', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async QueryPosts({ commit, rootGetters, getters }, { options: { subscribe, all } = { subscribe: false, all: false }, params, query = null }) {\n            try {\n                const key = params ?? {};\n                const queryClient = await initQueryClient(rootGetters);\n                let value = (await queryClient.queryPosts()).data;\n                commit('QUERY', { query: 'Posts', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryPosts', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getPosts']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                throw new SpVuexError('QueryClient:QueryPosts', 'API Node Unavailable. Could not perform query: ' + e.message);\n            }\n        },\n        async sendMsgCreateGame({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgCreateGame(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgCreateGame:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateGame:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgPlayMove({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgPlayMove(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgPlayMove:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgPlayMove:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async sendMsgRejectGame({ rootGetters }, { value, fee = [], memo = '' }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgRejectGame(value);\n                const result = await txClient.signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgRejectGame:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgRejectGame:Send', 'Could not broadcast Tx: ' + e.message);\n                }\n            }\n        },\n        async MsgCreateGame({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgCreateGame(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgCreateGame:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateGame:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgPlayMove({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgPlayMove(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgPlayMove:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgPlayMove:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n        async MsgRejectGame({ rootGetters }, { value }) {\n            try {\n                const txClient = await initTxClient(rootGetters);\n                const msg = await txClient.msgRejectGame(value);\n                return msg;\n            }\n            catch (e) {\n                if (e == MissingWalletError) {\n                    throw new SpVuexError('TxClient:MsgRejectGame:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgRejectGame:Create', 'Could not create message: ' + e.message);\n                }\n            }\n        },\n    }\n};\n"]},"metadata":{},"sourceType":"module"}