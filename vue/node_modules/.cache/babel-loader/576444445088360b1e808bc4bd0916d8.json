{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// THIS FILE IS GENERATED AUTOMATICALLY. DO NOT MODIFY.\nimport { SigningStargateClient } from \"@cosmjs/stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { Api } from \"./rest\";\nimport { MsgIssueToken } from \"./types/token/tx\";\nimport { MsgMintToken } from \"./types/token/tx\";\nimport { MsgTransferTokenOwner } from \"./types/token/tx\";\nimport { MsgBurnToken } from \"./types/token/tx\";\nimport { MsgEditToken } from \"./types/token/tx\";\nconst types = [[\"/irismod.token.MsgIssueToken\", MsgIssueToken], [\"/irismod.token.MsgMintToken\", MsgMintToken], [\"/irismod.token.MsgTransferTokenOwner\", MsgTransferTokenOwner], [\"/irismod.token.MsgBurnToken\", MsgBurnToken], [\"/irismod.token.MsgEditToken\", MsgEditToken]];\nexport const MissingWalletError = new Error(\"wallet is required\");\nexport const registry = new Registry(types);\nconst defaultFee = {\n  amount: [],\n  gas: \"200000\"\n};\n\nconst txClient = async (wallet, {\n  addr: addr\n} = {\n  addr: \"http://localhost:26657\"\n}) => {\n  if (!wallet) throw MissingWalletError;\n  let client;\n\n  if (addr) {\n    client = await SigningStargateClient.connectWithSigner(addr, wallet, {\n      registry\n    });\n  } else {\n    client = await SigningStargateClient.offline(wallet, {\n      registry\n    });\n  }\n\n  const {\n    address\n  } = (await wallet.getAccounts())[0];\n  return {\n    signAndBroadcast: (msgs, {\n      fee,\n      memo\n    } = {\n      fee: defaultFee,\n      memo: \"\"\n    }) => client.signAndBroadcast(address, msgs, fee, memo),\n    msgIssueToken: data => ({\n      typeUrl: \"/irismod.token.MsgIssueToken\",\n      value: MsgIssueToken.fromPartial(data)\n    }),\n    msgMintToken: data => ({\n      typeUrl: \"/irismod.token.MsgMintToken\",\n      value: MsgMintToken.fromPartial(data)\n    }),\n    msgTransferTokenOwner: data => ({\n      typeUrl: \"/irismod.token.MsgTransferTokenOwner\",\n      value: MsgTransferTokenOwner.fromPartial(data)\n    }),\n    msgBurnToken: data => ({\n      typeUrl: \"/irismod.token.MsgBurnToken\",\n      value: MsgBurnToken.fromPartial(data)\n    }),\n    msgEditToken: data => ({\n      typeUrl: \"/irismod.token.MsgEditToken\",\n      value: MsgEditToken.fromPartial(data)\n    })\n  };\n};\n\nconst queryClient = async ({\n  addr: addr\n} = {\n  addr: \"http://localhost:1317\"\n}) => {\n  return new Api({\n    baseUrl: addr\n  });\n};\n\nexport { txClient, queryClient };","map":{"version":3,"sources":["/home/lisoleg/cosmos/checkers/vue/src/store/generated/alice/checkers/irismod.token/module/index.js"],"names":["SigningStargateClient","Registry","Api","MsgIssueToken","MsgMintToken","MsgTransferTokenOwner","MsgBurnToken","MsgEditToken","types","MissingWalletError","Error","registry","defaultFee","amount","gas","txClient","wallet","addr","client","connectWithSigner","offline","address","getAccounts","signAndBroadcast","msgs","fee","memo","msgIssueToken","data","typeUrl","value","fromPartial","msgMintToken","msgTransferTokenOwner","msgBurnToken","msgEditToken","queryClient","baseUrl"],"mappings":";AAAA;AACA,SAASA,qBAAT,QAAsC,kBAAtC;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,qBAAT,QAAsC,kBAAtC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,MAAMC,KAAK,GAAG,CACV,CAAC,8BAAD,EAAiCL,aAAjC,CADU,EAEV,CAAC,6BAAD,EAAgCC,YAAhC,CAFU,EAGV,CAAC,sCAAD,EAAyCC,qBAAzC,CAHU,EAIV,CAAC,6BAAD,EAAgCC,YAAhC,CAJU,EAKV,CAAC,6BAAD,EAAgCC,YAAhC,CALU,CAAd;AAOA,OAAO,MAAME,kBAAkB,GAAG,IAAIC,KAAJ,CAAU,oBAAV,CAA3B;AACP,OAAO,MAAMC,QAAQ,GAAG,IAAIV,QAAJ,CAAaO,KAAb,CAAjB;AACP,MAAMI,UAAU,GAAG;AACfC,EAAAA,MAAM,EAAE,EADO;AAEfC,EAAAA,GAAG,EAAE;AAFU,CAAnB;;AAIA,MAAMC,QAAQ,GAAG,OAAOC,MAAP,EAAe;AAAEC,EAAAA,IAAI,EAAEA;AAAR,IAAiB;AAAEA,EAAAA,IAAI,EAAE;AAAR,CAAhC,KAAuE;AACpF,MAAI,CAACD,MAAL,EACI,MAAMP,kBAAN;AACJ,MAAIS,MAAJ;;AACA,MAAID,IAAJ,EAAU;AACNC,IAAAA,MAAM,GAAG,MAAMlB,qBAAqB,CAACmB,iBAAtB,CAAwCF,IAAxC,EAA8CD,MAA9C,EAAsD;AAAEL,MAAAA;AAAF,KAAtD,CAAf;AACH,GAFD,MAGK;AACDO,IAAAA,MAAM,GAAG,MAAMlB,qBAAqB,CAACoB,OAAtB,CAA8BJ,MAA9B,EAAsC;AAAEL,MAAAA;AAAF,KAAtC,CAAf;AACH;;AACD,QAAM;AAAEU,IAAAA;AAAF,MAAc,CAAC,MAAML,MAAM,CAACM,WAAP,EAAP,EAA6B,CAA7B,CAApB;AACA,SAAO;AACHC,IAAAA,gBAAgB,EAAE,CAACC,IAAD,EAAO;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAgB;AAAED,MAAAA,GAAG,EAAEb,UAAP;AAAmBc,MAAAA,IAAI,EAAE;AAAzB,KAAvB,KAAyDR,MAAM,CAACK,gBAAP,CAAwBF,OAAxB,EAAiCG,IAAjC,EAAuCC,GAAvC,EAA4CC,IAA5C,CADxE;AAEHC,IAAAA,aAAa,EAAGC,IAAD,KAAW;AAAEC,MAAAA,OAAO,EAAE,8BAAX;AAA2CC,MAAAA,KAAK,EAAE3B,aAAa,CAAC4B,WAAd,CAA0BH,IAA1B;AAAlD,KAAX,CAFZ;AAGHI,IAAAA,YAAY,EAAGJ,IAAD,KAAW;AAAEC,MAAAA,OAAO,EAAE,6BAAX;AAA0CC,MAAAA,KAAK,EAAE1B,YAAY,CAAC2B,WAAb,CAAyBH,IAAzB;AAAjD,KAAX,CAHX;AAIHK,IAAAA,qBAAqB,EAAGL,IAAD,KAAW;AAAEC,MAAAA,OAAO,EAAE,sCAAX;AAAmDC,MAAAA,KAAK,EAAEzB,qBAAqB,CAAC0B,WAAtB,CAAkCH,IAAlC;AAA1D,KAAX,CAJpB;AAKHM,IAAAA,YAAY,EAAGN,IAAD,KAAW;AAAEC,MAAAA,OAAO,EAAE,6BAAX;AAA0CC,MAAAA,KAAK,EAAExB,YAAY,CAACyB,WAAb,CAAyBH,IAAzB;AAAjD,KAAX,CALX;AAMHO,IAAAA,YAAY,EAAGP,IAAD,KAAW;AAAEC,MAAAA,OAAO,EAAE,6BAAX;AAA0CC,MAAAA,KAAK,EAAEvB,YAAY,CAACwB,WAAb,CAAyBH,IAAzB;AAAjD,KAAX;AANX,GAAP;AAQH,CAnBD;;AAoBA,MAAMQ,WAAW,GAAG,OAAO;AAAEnB,EAAAA,IAAI,EAAEA;AAAR,IAAiB;AAAEA,EAAAA,IAAI,EAAE;AAAR,CAAxB,KAA8D;AAC9E,SAAO,IAAIf,GAAJ,CAAQ;AAAEmC,IAAAA,OAAO,EAAEpB;AAAX,GAAR,CAAP;AACH,CAFD;;AAGA,SAASF,QAAT,EAAmBqB,WAAnB","sourcesContent":["// THIS FILE IS GENERATED AUTOMATICALLY. DO NOT MODIFY.\nimport { SigningStargateClient } from \"@cosmjs/stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { Api } from \"./rest\";\nimport { MsgIssueToken } from \"./types/token/tx\";\nimport { MsgMintToken } from \"./types/token/tx\";\nimport { MsgTransferTokenOwner } from \"./types/token/tx\";\nimport { MsgBurnToken } from \"./types/token/tx\";\nimport { MsgEditToken } from \"./types/token/tx\";\nconst types = [\n    [\"/irismod.token.MsgIssueToken\", MsgIssueToken],\n    [\"/irismod.token.MsgMintToken\", MsgMintToken],\n    [\"/irismod.token.MsgTransferTokenOwner\", MsgTransferTokenOwner],\n    [\"/irismod.token.MsgBurnToken\", MsgBurnToken],\n    [\"/irismod.token.MsgEditToken\", MsgEditToken],\n];\nexport const MissingWalletError = new Error(\"wallet is required\");\nexport const registry = new Registry(types);\nconst defaultFee = {\n    amount: [],\n    gas: \"200000\",\n};\nconst txClient = async (wallet, { addr: addr } = { addr: \"http://localhost:26657\" }) => {\n    if (!wallet)\n        throw MissingWalletError;\n    let client;\n    if (addr) {\n        client = await SigningStargateClient.connectWithSigner(addr, wallet, { registry });\n    }\n    else {\n        client = await SigningStargateClient.offline(wallet, { registry });\n    }\n    const { address } = (await wallet.getAccounts())[0];\n    return {\n        signAndBroadcast: (msgs, { fee, memo } = { fee: defaultFee, memo: \"\" }) => client.signAndBroadcast(address, msgs, fee, memo),\n        msgIssueToken: (data) => ({ typeUrl: \"/irismod.token.MsgIssueToken\", value: MsgIssueToken.fromPartial(data) }),\n        msgMintToken: (data) => ({ typeUrl: \"/irismod.token.MsgMintToken\", value: MsgMintToken.fromPartial(data) }),\n        msgTransferTokenOwner: (data) => ({ typeUrl: \"/irismod.token.MsgTransferTokenOwner\", value: MsgTransferTokenOwner.fromPartial(data) }),\n        msgBurnToken: (data) => ({ typeUrl: \"/irismod.token.MsgBurnToken\", value: MsgBurnToken.fromPartial(data) }),\n        msgEditToken: (data) => ({ typeUrl: \"/irismod.token.MsgEditToken\", value: MsgEditToken.fromPartial(data) }),\n    };\n};\nconst queryClient = async ({ addr: addr } = { addr: \"http://localhost:1317\" }) => {\n    return new Api({ baseUrl: addr });\n};\nexport { txClient, queryClient, };\n"]},"metadata":{},"sourceType":"module"}