{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// THIS FILE IS GENERATED AUTOMATICALLY. DO NOT MODIFY.\nimport { SigningStargateClient } from \"@cosmjs/stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { Api } from \"./rest\";\nimport { MsgCreateGame } from \"./types/checkers/tx\";\nimport { MsgPlayMove } from \"./types/checkers/tx\";\nimport { MsgRejectGame } from \"./types/checkers/tx\";\nconst types = [[\"/alice.checkers.checkers.MsgCreateGame\", MsgCreateGame], [\"/alice.checkers.checkers.MsgPlayMove\", MsgPlayMove], [\"/alice.checkers.checkers.MsgRejectGame\", MsgRejectGame]];\nexport const MissingWalletError = new Error(\"wallet is required\");\nexport const registry = new Registry(types);\nconst defaultFee = {\n  amount: [],\n  gas: \"200000\"\n};\n\nconst txClient = async (wallet, {\n  addr: addr\n} = {\n  addr: \"http://localhost:26657\"\n}) => {\n  if (!wallet) throw MissingWalletError;\n  let client;\n\n  if (addr) {\n    client = await SigningStargateClient.connectWithSigner(addr, wallet, {\n      registry\n    });\n  } else {\n    client = await SigningStargateClient.offline(wallet, {\n      registry\n    });\n  }\n\n  const {\n    address\n  } = (await wallet.getAccounts())[0];\n  return {\n    signAndBroadcast: (msgs, {\n      fee,\n      memo\n    } = {\n      fee: defaultFee,\n      memo: \"\"\n    }) => client.signAndBroadcast(address, msgs, fee, memo),\n    msgCreateGame: data => ({\n      typeUrl: \"/alice.checkers.checkers.MsgCreateGame\",\n      value: MsgCreateGame.fromPartial(data)\n    }),\n    msgPlayMove: data => ({\n      typeUrl: \"/alice.checkers.checkers.MsgPlayMove\",\n      value: MsgPlayMove.fromPartial(data)\n    }),\n    msgRejectGame: data => ({\n      typeUrl: \"/alice.checkers.checkers.MsgRejectGame\",\n      value: MsgRejectGame.fromPartial(data)\n    })\n  };\n};\n\nconst queryClient = async ({\n  addr: addr\n} = {\n  addr: \"http://localhost:1317\"\n}) => {\n  return new Api({\n    baseUrl: addr\n  });\n};\n\nexport { txClient, queryClient };","map":{"version":3,"sources":["/home/lisoleg/checkers/vue/src/store/generated/alice/checkers/alice.checkers.checkers/module/index.js"],"names":["SigningStargateClient","Registry","Api","MsgCreateGame","MsgPlayMove","MsgRejectGame","types","MissingWalletError","Error","registry","defaultFee","amount","gas","txClient","wallet","addr","client","connectWithSigner","offline","address","getAccounts","signAndBroadcast","msgs","fee","memo","msgCreateGame","data","typeUrl","value","fromPartial","msgPlayMove","msgRejectGame","queryClient","baseUrl"],"mappings":";AAAA;AACA,SAASA,qBAAT,QAAsC,kBAAtC;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,MAAMC,KAAK,GAAG,CACV,CAAC,wCAAD,EAA2CH,aAA3C,CADU,EAEV,CAAC,sCAAD,EAAyCC,WAAzC,CAFU,EAGV,CAAC,wCAAD,EAA2CC,aAA3C,CAHU,CAAd;AAKA,OAAO,MAAME,kBAAkB,GAAG,IAAIC,KAAJ,CAAU,oBAAV,CAA3B;AACP,OAAO,MAAMC,QAAQ,GAAG,IAAIR,QAAJ,CAAaK,KAAb,CAAjB;AACP,MAAMI,UAAU,GAAG;AACfC,EAAAA,MAAM,EAAE,EADO;AAEfC,EAAAA,GAAG,EAAE;AAFU,CAAnB;;AAIA,MAAMC,QAAQ,GAAG,OAAOC,MAAP,EAAe;AAAEC,EAAAA,IAAI,EAAEA;AAAR,IAAiB;AAAEA,EAAAA,IAAI,EAAE;AAAR,CAAhC,KAAuE;AACpF,MAAI,CAACD,MAAL,EACI,MAAMP,kBAAN;AACJ,MAAIS,MAAJ;;AACA,MAAID,IAAJ,EAAU;AACNC,IAAAA,MAAM,GAAG,MAAMhB,qBAAqB,CAACiB,iBAAtB,CAAwCF,IAAxC,EAA8CD,MAA9C,EAAsD;AAAEL,MAAAA;AAAF,KAAtD,CAAf;AACH,GAFD,MAGK;AACDO,IAAAA,MAAM,GAAG,MAAMhB,qBAAqB,CAACkB,OAAtB,CAA8BJ,MAA9B,EAAsC;AAAEL,MAAAA;AAAF,KAAtC,CAAf;AACH;;AACD,QAAM;AAAEU,IAAAA;AAAF,MAAc,CAAC,MAAML,MAAM,CAACM,WAAP,EAAP,EAA6B,CAA7B,CAApB;AACA,SAAO;AACHC,IAAAA,gBAAgB,EAAE,CAACC,IAAD,EAAO;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAgB;AAAED,MAAAA,GAAG,EAAEb,UAAP;AAAmBc,MAAAA,IAAI,EAAE;AAAzB,KAAvB,KAAyDR,MAAM,CAACK,gBAAP,CAAwBF,OAAxB,EAAiCG,IAAjC,EAAuCC,GAAvC,EAA4CC,IAA5C,CADxE;AAEHC,IAAAA,aAAa,EAAGC,IAAD,KAAW;AAAEC,MAAAA,OAAO,EAAE,wCAAX;AAAqDC,MAAAA,KAAK,EAAEzB,aAAa,CAAC0B,WAAd,CAA0BH,IAA1B;AAA5D,KAAX,CAFZ;AAGHI,IAAAA,WAAW,EAAGJ,IAAD,KAAW;AAAEC,MAAAA,OAAO,EAAE,sCAAX;AAAmDC,MAAAA,KAAK,EAAExB,WAAW,CAACyB,WAAZ,CAAwBH,IAAxB;AAA1D,KAAX,CAHV;AAIHK,IAAAA,aAAa,EAAGL,IAAD,KAAW;AAAEC,MAAAA,OAAO,EAAE,wCAAX;AAAqDC,MAAAA,KAAK,EAAEvB,aAAa,CAACwB,WAAd,CAA0BH,IAA1B;AAA5D,KAAX;AAJZ,GAAP;AAMH,CAjBD;;AAkBA,MAAMM,WAAW,GAAG,OAAO;AAAEjB,EAAAA,IAAI,EAAEA;AAAR,IAAiB;AAAEA,EAAAA,IAAI,EAAE;AAAR,CAAxB,KAA8D;AAC9E,SAAO,IAAIb,GAAJ,CAAQ;AAAE+B,IAAAA,OAAO,EAAElB;AAAX,GAAR,CAAP;AACH,CAFD;;AAGA,SAASF,QAAT,EAAmBmB,WAAnB","sourcesContent":["// THIS FILE IS GENERATED AUTOMATICALLY. DO NOT MODIFY.\nimport { SigningStargateClient } from \"@cosmjs/stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { Api } from \"./rest\";\nimport { MsgCreateGame } from \"./types/checkers/tx\";\nimport { MsgPlayMove } from \"./types/checkers/tx\";\nimport { MsgRejectGame } from \"./types/checkers/tx\";\nconst types = [\n    [\"/alice.checkers.checkers.MsgCreateGame\", MsgCreateGame],\n    [\"/alice.checkers.checkers.MsgPlayMove\", MsgPlayMove],\n    [\"/alice.checkers.checkers.MsgRejectGame\", MsgRejectGame],\n];\nexport const MissingWalletError = new Error(\"wallet is required\");\nexport const registry = new Registry(types);\nconst defaultFee = {\n    amount: [],\n    gas: \"200000\",\n};\nconst txClient = async (wallet, { addr: addr } = { addr: \"http://localhost:26657\" }) => {\n    if (!wallet)\n        throw MissingWalletError;\n    let client;\n    if (addr) {\n        client = await SigningStargateClient.connectWithSigner(addr, wallet, { registry });\n    }\n    else {\n        client = await SigningStargateClient.offline(wallet, { registry });\n    }\n    const { address } = (await wallet.getAccounts())[0];\n    return {\n        signAndBroadcast: (msgs, { fee, memo } = { fee: defaultFee, memo: \"\" }) => client.signAndBroadcast(address, msgs, fee, memo),\n        msgCreateGame: (data) => ({ typeUrl: \"/alice.checkers.checkers.MsgCreateGame\", value: MsgCreateGame.fromPartial(data) }),\n        msgPlayMove: (data) => ({ typeUrl: \"/alice.checkers.checkers.MsgPlayMove\", value: MsgPlayMove.fromPartial(data) }),\n        msgRejectGame: (data) => ({ typeUrl: \"/alice.checkers.checkers.MsgRejectGame\", value: MsgRejectGame.fromPartial(data) }),\n    };\n};\nconst queryClient = async ({ addr: addr } = { addr: \"http://localhost:1317\" }) => {\n    return new Api({ baseUrl: addr });\n};\nexport { txClient, queryClient, };\n"]},"metadata":{},"sourceType":"module"}