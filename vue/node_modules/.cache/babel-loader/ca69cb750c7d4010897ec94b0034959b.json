{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareChannelHandshake = exports.prepareConnectionHandshake = exports.buildCreateClientArgs = exports.IbcClient = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n\nconst stargate_1 = require(\"@cosmjs/stargate\");\n\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst cloneDeep_1 = __importDefault(require(\"lodash/cloneDeep\"));\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst tx_1 = require(\"../codec/ibc/applications/transfer/v1/tx\");\n\nconst channel_1 = require(\"../codec/ibc/core/channel/v1/channel\");\n\nconst tx_2 = require(\"../codec/ibc/core/channel/v1/tx\");\n\nconst client_1 = require(\"../codec/ibc/core/client/v1/client\");\n\nconst tx_3 = require(\"../codec/ibc/core/client/v1/tx\");\n\nconst tx_4 = require(\"../codec/ibc/core/connection/v1/tx\");\n\nconst tendermint_1 = require(\"../codec/ibc/lightclients/tendermint/v1/tendermint\");\n\nconst types_1 = require(\"../codec/tendermint/types/types\");\n\nconst validator_1 = require(\"../codec/tendermint/types/validator\");\n\nconst logger_1 = require(\"./logger\");\n\nconst ibc_1 = require(\"./queries/ibc\");\n\nconst utils_2 = require(\"./utils\");\n\nfunction deepCloneAndMutate(object, mutateFn) {\n  const deepClonedObject = cloneDeep_1.default(object);\n  mutateFn(deepClonedObject);\n  return deepClonedObject;\n}\n\nfunction toBase64AsAny(...input) {\n  return encoding_1.toBase64(...input); // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n/**** These are needed to bootstrap the endpoints */\n\n/* Some of them are hardcoded various places, which should we make configurable? */\n// const DefaultTrustLevel = '1/3';\n// const MaxClockDrift = 10; // 10 seconds\n// const upgradePath = ['upgrade', 'upgradedIBCState'];\n// const allowUpgradeAfterExpiry = false;\n// const allowUpgradeAfterMisbehavior = false;\n// these are from the cosmos sdk implementation\n\n\nconst defaultMerklePrefix = {\n  keyPrefix: encoding_1.toAscii('ibc')\n};\nconst defaultConnectionVersion = {\n  identifier: '1',\n  features: ['ORDER_ORDERED', 'ORDER_UNORDERED']\n}; // this is a sane default, but we can revisit it\n\nconst defaultDelayPeriod = new long_1.default(0);\n\nfunction ibcRegistry() {\n  return new proto_signing_1.Registry([...stargate_1.defaultRegistryTypes, ['/ibc.core.client.v1.MsgCreateClient', tx_3.MsgCreateClient], ['/ibc.core.client.v1.MsgUpdateClient', tx_3.MsgUpdateClient], ['/ibc.core.connection.v1.MsgConnectionOpenInit', tx_4.MsgConnectionOpenInit], ['/ibc.core.connection.v1.MsgConnectionOpenTry', tx_4.MsgConnectionOpenTry], ['/ibc.core.connection.v1.MsgConnectionOpenAck', tx_4.MsgConnectionOpenAck], ['/ibc.core.connection.v1.MsgConnectionOpenConfirm', tx_4.MsgConnectionOpenConfirm], ['/ibc.core.channel.v1.MsgChannelOpenInit', tx_2.MsgChannelOpenInit], ['/ibc.core.channel.v1.MsgChannelOpenTry', tx_2.MsgChannelOpenTry], ['/ibc.core.channel.v1.MsgChannelOpenAck', tx_2.MsgChannelOpenAck], ['/ibc.core.channel.v1.MsgChannelOpenConfirm', tx_2.MsgChannelOpenConfirm], ['/ibc.core.channel.v1.MsgRecvPacket', tx_2.MsgRecvPacket], ['/ibc.core.channel.v1.MsgAcknowledgement', tx_2.MsgAcknowledgement], ['/ibc.core.channel.v1.MsgTimeout', tx_2.MsgTimeout], ['/ibc.applications.transfer.v1.MsgTransfer', tx_1.MsgTransfer]]);\n}\n\nconst defaultGasPrice = stargate_1.GasPrice.fromString('0.025ucosm');\nconst defaultGasLimits = {\n  bankSend: 200000,\n  initClient: 150000,\n  updateClient: 600000,\n  initConnection: 150000,\n  connectionHandshake: 300000,\n  initChannel: 150000,\n  channelHandshake: 300000,\n  receivePacket: 300000,\n  ackPacket: 300000,\n  timeoutPacket: 300000,\n  transfer: 180000\n};\n\nclass IbcClient {\n  constructor(signingClient, tmClient, senderAddress, chainId, options) {\n    this.sign = signingClient;\n    this.tm = tmClient;\n    this.query = stargate_1.QueryClient.withExtensions(tmClient, stargate_1.setupAuthExtension, stargate_1.setupBankExtension, ibc_1.setupIbcExtension, stargate_1.setupStakingExtension);\n    this.senderAddress = senderAddress;\n    this.chainId = chainId;\n    this.revisionNumber = utils_2.parseRevisionNumber(chainId);\n    const {\n      gasPrice = defaultGasPrice,\n      gasLimits = {},\n      logger\n    } = options;\n    this.gasPrice = gasPrice; // we must do this explicitly, not\n    //   this.limits = { ...defaultGasLimits, ...gasLimits };\n    // so undefined in gasLimits don't overwrite defaults\n\n    this.limits = {\n      bankSend: gasLimits.bankSend || defaultGasLimits.bankSend,\n      initClient: gasLimits.initClient || defaultGasLimits.initClient,\n      updateClient: gasLimits.updateClient || defaultGasLimits.updateClient,\n      initConnection: gasLimits.initConnection || defaultGasLimits.initConnection,\n      connectionHandshake: gasLimits.connectionHandshake || defaultGasLimits.connectionHandshake,\n      initChannel: gasLimits.initChannel || defaultGasLimits.initChannel,\n      channelHandshake: gasLimits.channelHandshake || defaultGasLimits.channelHandshake,\n      receivePacket: gasLimits.receivePacket || defaultGasLimits.receivePacket,\n      ackPacket: gasLimits.ackPacket || defaultGasLimits.ackPacket,\n      timeoutPacket: gasLimits.timeoutPacket || defaultGasLimits.timeoutPacket,\n      transfer: gasLimits.transfer || defaultGasLimits.transfer\n    };\n    this.logger = logger !== null && logger !== void 0 ? logger : new logger_1.NoopLogger();\n  }\n\n  static connectWithSigner(endpoint, signer, senderAddress, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // override any registry setup, use the other options\n      const mergedOptions = Object.assign(Object.assign({}, options), {\n        registry: ibcRegistry()\n      });\n      const signingClient = yield stargate_1.SigningStargateClient.connectWithSigner(endpoint, signer, mergedOptions);\n      const tmClient = yield tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n      const chainId = yield signingClient.getChainId();\n      return new IbcClient(signingClient, tmClient, senderAddress, chainId, options);\n    });\n  }\n\n  revisionHeight(height) {\n    return client_1.Height.fromPartial({\n      revisionHeight: new long_1.default(height),\n      revisionNumber: this.revisionNumber\n    });\n  }\n\n  ensureRevisionHeight(height) {\n    if (typeof height === 'number') {\n      return client_1.Height.fromPartial({\n        revisionHeight: long_1.default.fromNumber(height),\n        revisionNumber: this.revisionNumber\n      });\n    }\n\n    if (height.revisionNumber.toNumber() !== this.revisionNumber.toNumber()) {\n      throw new Error(`Using incorrect revisionNumber ${height.revisionNumber} on chain with ${this.revisionNumber}`);\n    }\n\n    return height;\n  }\n\n  timeoutHeight(blocksInFuture) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const header = yield this.latestHeader();\n      return this.revisionHeight(header.height + blocksInFuture);\n    });\n  }\n\n  getChainId() {\n    this.logger.verbose('Get chain ID');\n    return this.sign.getChainId();\n  }\n\n  header(height) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.verbose(`Get header for height ${height}`); // TODO: expose header method on tmClient and use that\n\n      const resp = yield this.tm.blockchain(height, height);\n      return resp.blockMetas[0].header;\n    });\n  }\n\n  latestHeader() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: expose header method on tmClient and use that\n      const block = yield this.tm.block();\n      return block.block.header;\n    });\n  }\n\n  currentTime() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // const status = await this.tm.status();\n      // return status.syncInfo.latestBlockTime;\n      return (yield this.latestHeader()).time;\n    });\n  }\n\n  currentHeight() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const status = yield this.tm.status();\n      return status.syncInfo.latestBlockHeight;\n    });\n  }\n\n  currentRevision() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const block = yield this.currentHeight();\n      return this.revisionHeight(block);\n    });\n  }\n\n  waitOneBlock() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // ensure this works\n      const start = yield this.currentHeight();\n      let end;\n\n      do {\n        yield utils_1.sleep(500);\n        end = yield this.currentHeight();\n      } while (end === start); // TODO: this works but only for websocket connections, is there some code that falls back to polling in cosmjs?\n      // await firstEvent(this.tm.subscribeNewBlockHeader());\n\n    });\n  } // we may have to wait a bit before a tx returns and making queries on the event log\n\n\n  waitForIndexer() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield utils_1.sleep(50);\n    });\n  }\n\n  getCommit(height) {\n    this.logger.verbose(height === undefined ? 'Get latest commit' : `Get commit for height ${height}`);\n    return this.tm.commit(height);\n  }\n  /** Returns the unbonding period in seconds */\n\n\n  getUnbondingPeriod() {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        params\n      } = yield this.query.staking.params();\n      const seconds = (_b = (_a = params === null || params === void 0 ? void 0 : params.unbondingTime) === null || _a === void 0 ? void 0 : _a.seconds) === null || _b === void 0 ? void 0 : _b.toNumber();\n\n      if (!seconds) {\n        throw new Error('No unbonding period found');\n      }\n\n      this.logger.verbose('Queried unbonding period', {\n        seconds\n      });\n      return seconds;\n    });\n  }\n\n  getSignedHeader(height) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        header: rpcHeader,\n        commit: rpcCommit\n      } = yield this.getCommit(height);\n      const header = types_1.Header.fromPartial(Object.assign(Object.assign({}, rpcHeader), {\n        version: {\n          block: new long_1.default(rpcHeader.version.block)\n        },\n        height: new long_1.default(rpcHeader.height),\n        time: utils_2.timestampFromDateNanos(rpcHeader.time),\n        lastBlockId: {\n          hash: (_a = rpcHeader.lastBlockId) === null || _a === void 0 ? void 0 : _a.hash,\n          partSetHeader: (_b = rpcHeader.lastBlockId) === null || _b === void 0 ? void 0 : _b.parts\n        }\n      }));\n      const signatures = rpcCommit.signatures.map(sig => Object.assign(Object.assign({}, sig), {\n        timestamp: sig.timestamp && utils_2.timestampFromDateNanos(sig.timestamp),\n        blockIdFlag: types_1.blockIDFlagFromJSON(sig.blockIdFlag)\n      }));\n      const commit = types_1.Commit.fromPartial({\n        height: new long_1.default(rpcCommit.height),\n        round: rpcCommit.round,\n        blockId: {\n          hash: rpcCommit.blockId.hash,\n          partSetHeader: rpcCommit.blockId.parts\n        },\n        signatures\n      }); // For the vote sign bytes, it checks (from the commit):\n      //   Height, Round, BlockId, TimeStamp, ChainID\n\n      return {\n        header,\n        commit\n      };\n    });\n  }\n\n  getValidatorSet(height) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.verbose(`Get validator set for height ${height}`); // we need to query the header to find out who the proposer was, and pull them out\n\n      const {\n        proposerAddress\n      } = yield this.header(height);\n      const validators = yield this.tm.validatorsAll(height);\n      const mappedValidators = validators.validators.map(val => ({\n        address: val.address,\n        pubKey: utils_2.mapRpcPubKeyToProto(val.pubkey),\n        votingPower: new long_1.default(val.votingPower),\n        proposerPriority: val.proposerPriority ? new long_1.default(val.proposerPriority) : undefined\n      }));\n      const totalPower = validators.validators.reduce((x, v) => x + v.votingPower, 0);\n      const proposer = mappedValidators.find(val => utils_1.arrayContentEquals(val.address, proposerAddress));\n      return validator_1.ValidatorSet.fromPartial({\n        validators: mappedValidators,\n        totalVotingPower: new long_1.default(totalPower),\n        proposer\n      });\n    });\n  } // this builds a header to update a remote client.\n  // you must pass the last known height on the remote side so we can properly generate it.\n  // it will update to the latest state of this chain.\n  //\n  // This is the logic that validates the returned struct:\n  // ibc check: https://github.com/cosmos/cosmos-sdk/blob/v0.41.0/x/ibc/light-clients/07-tendermint/types/update.go#L87-L167\n  // tendermint check: https://github.com/tendermint/tendermint/blob/v0.34.3/light/verifier.go#L19-L79\n  // sign bytes: https://github.com/tendermint/tendermint/blob/v0.34.3/types/validator_set.go#L762-L821\n  //   * https://github.com/tendermint/tendermint/blob/v0.34.3/types/validator_set.go#L807-L810\n  //   * https://github.com/tendermint/tendermint/blob/v0.34.3/types/block.go#L780-L809\n  //   * https://github.com/tendermint/tendermint/blob/bf9e36d02d2eb22f6fe8961d0d7d3d34307ba38e/types/canonical.go#L54-L65\n  //\n  // For the vote sign bytes, it checks (from the commit):\n  //   Height, Round, BlockId, TimeStamp, ChainID\n\n\n  buildHeader(lastHeight) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signedHeader = yield this.getSignedHeader(); // \"assert that trustedVals is NextValidators of last trusted header\"\n      // https://github.com/cosmos/cosmos-sdk/blob/v0.41.0/x/ibc/light-clients/07-tendermint/types/update.go#L74\n\n      const validatorHeight = lastHeight + 1;\n      /* eslint @typescript-eslint/no-non-null-assertion: \"off\" */\n\n      const curHeight = signedHeader.header.height.toNumber();\n      return tendermint_1.Header.fromPartial({\n        signedHeader,\n        validatorSet: yield this.getValidatorSet(curHeight),\n        trustedHeight: this.revisionHeight(lastHeight),\n        trustedValidators: yield this.getValidatorSet(validatorHeight)\n      });\n    });\n  } // trustedHeight must be proven by the client on the destination chain\n  // and include a proof for the connOpenInit (eg. must be 1 or more blocks after the\n  // block connOpenInit Tx was in).\n  //\n  // pass a header height that was previously updated to on the remote chain using updateClient.\n  // note: the queries will be for the block before this header, so the proofs match up (appHash is on H+1)\n\n\n  getConnectionProof(clientId, connectionId, headerHeight) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const proofHeight = this.ensureRevisionHeight(headerHeight);\n      const queryHeight = utils_2.subtractBlock(proofHeight, 1);\n      const {\n        clientState,\n        proof: proofClient // proofHeight,\n\n      } = yield this.query.ibc.proof.client.state(clientId, queryHeight); // This is the most recent state we have on this chain of the other\n\n      const {\n        latestHeight: consensusHeight\n      } = yield this.query.ibc.client.stateTm(clientId);\n      utils_1.assert(consensusHeight); // get the init proof\n\n      const {\n        proof: proofConnection\n      } = yield this.query.ibc.proof.connection.connection(connectionId, queryHeight); // get the consensus proof\n\n      const {\n        proof: proofConsensus\n      } = yield this.query.ibc.proof.client.consensusState(clientId, consensusHeight, queryHeight);\n      return {\n        clientId,\n        clientState,\n        connectionId,\n        proofHeight,\n        proofConnection,\n        proofClient,\n        proofConsensus,\n        consensusHeight\n      };\n    });\n  } // trustedHeight must be proven by the client on the destination chain\n  // and include a proof for the connOpenInit (eg. must be 1 or more blocks after the\n  // block connOpenInit Tx was in).\n  //\n  // pass a header height that was previously updated to on the remote chain using updateClient.\n  // note: the queries will be for the block before this header, so the proofs match up (appHash is on H+1)\n\n\n  getChannelProof(id, headerHeight) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const proofHeight = this.ensureRevisionHeight(headerHeight);\n      const queryHeight = utils_2.subtractBlock(proofHeight, 1);\n      const {\n        proof\n      } = yield this.query.ibc.proof.channel.channel(id.portId, id.channelId, queryHeight);\n      return {\n        id,\n        proofHeight,\n        proof\n      };\n    });\n  }\n\n  getPacketProof(packet, headerHeight) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const proofHeight = this.ensureRevisionHeight(headerHeight);\n      const queryHeight = utils_2.subtractBlock(proofHeight, 1);\n      const {\n        proof\n      } = yield this.query.ibc.proof.channel.packetCommitment(packet.sourcePort, packet.sourceChannel, packet.sequence, queryHeight);\n      return proof;\n    });\n  }\n\n  getAckProof({\n    originalPacket\n  }, headerHeight) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const proofHeight = this.ensureRevisionHeight(headerHeight);\n      const queryHeight = utils_2.subtractBlock(proofHeight, 1);\n      const res = yield this.query.ibc.proof.channel.packetAcknowledgement(originalPacket.destinationPort, originalPacket.destinationChannel, originalPacket.sequence.toNumber(), queryHeight);\n      const {\n        proof\n      } = res;\n      return proof;\n    });\n  }\n\n  getTimeoutProof({\n    originalPacket\n  }, headerHeight) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const proofHeight = this.ensureRevisionHeight(headerHeight);\n      const queryHeight = utils_2.subtractBlock(proofHeight, 1);\n      const proof = yield this.query.ibc.proof.channel.receiptProof(originalPacket.destinationPort, originalPacket.destinationChannel, originalPacket.sequence.toNumber(), queryHeight);\n      return proof;\n    });\n  }\n  /*\n  These are helpers to query, build data and submit a message\n  Currently all prefixed with doXxx, but please look for better naming\n  */\n  // Updates existing client on this chain with data from src chain.\n  // Returns the height that was updated to.\n\n\n  doUpdateClient(clientId, src) {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        latestHeight\n      } = yield this.query.ibc.client.stateTm(clientId);\n      const header = yield src.buildHeader(utils_2.toIntHeight(latestHeight));\n      yield this.updateTendermintClient(clientId, header);\n      const height = (_d = (_c = (_b = (_a = header.signedHeader) === null || _a === void 0 ? void 0 : _a.header) === null || _b === void 0 ? void 0 : _b.height) === null || _c === void 0 ? void 0 : _c.toNumber()) !== null && _d !== void 0 ? _d : 0;\n      return src.revisionHeight(height);\n    });\n  }\n  /***** These are all direct wrappers around message constructors ********/\n\n\n  sendTokens(recipientAddress, transferAmount, memo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.verbose(`Send tokens to ${recipientAddress}`);\n      this.logger.debug('Send tokens:', {\n        senderAddress: this.senderAddress,\n        recipientAddress,\n        transferAmount,\n        memo\n      });\n      const result = yield this.sign.sendTokens(this.senderAddress, recipientAddress, transferAmount, stargate_1.calculateFee(this.limits.bankSend, this.gasPrice), memo);\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height\n      };\n    });\n  }\n  /* Send any number of messages, you are responsible for encoding them */\n\n\n  sendMultiMsg(msgs, gasLimit) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.verbose(`Broadcast multiple msgs`);\n      this.logger.debug(`Multiple msgs:`, {\n        msgs,\n        gasLimit\n      });\n      const senderAddress = this.senderAddress;\n      const fee = stargate_1.calculateFee(gasLimit, this.gasPrice);\n      const result = yield this.sign.signAndBroadcast(senderAddress, msgs, fee);\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height\n      };\n    });\n  }\n\n  createTendermintClient(clientState, consensusState) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.verbose(`Create Tendermint client`);\n      const senderAddress = this.senderAddress;\n      const createMsg = {\n        typeUrl: '/ibc.core.client.v1.MsgCreateClient',\n        value: tx_3.MsgCreateClient.fromPartial({\n          signer: senderAddress,\n          clientState: {\n            typeUrl: '/ibc.lightclients.tendermint.v1.ClientState',\n            value: tendermint_1.ClientState.encode(clientState).finish()\n          },\n          consensusState: {\n            typeUrl: '/ibc.lightclients.tendermint.v1.ConsensusState',\n            value: tendermint_1.ConsensusState.encode(consensusState).finish()\n          }\n        })\n      };\n      this.logger.debug('MsgCreateClient', createMsg);\n      const result = yield this.sign.signAndBroadcast(senderAddress, [createMsg], stargate_1.calculateFee(this.limits.initClient, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      const clientId = stargate_1.logs.findAttribute(parsedLogs, 'create_client', 'client_id').value;\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height,\n        clientId\n      };\n    });\n  }\n\n  updateTendermintClient(clientId, header) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.verbose(`Update Tendermint client ${clientId}`);\n      const senderAddress = this.senderAddress;\n      const updateMsg = {\n        typeUrl: '/ibc.core.client.v1.MsgUpdateClient',\n        value: tx_3.MsgUpdateClient.fromPartial({\n          signer: senderAddress,\n          clientId,\n          header: {\n            typeUrl: '/ibc.lightclients.tendermint.v1.Header',\n            value: tendermint_1.Header.encode(header).finish()\n          }\n        })\n      };\n      this.logger.debug(`MsgUpdateClient`, deepCloneAndMutate(updateMsg, mutableMsg => {\n        var _a;\n\n        if ((_a = mutableMsg.value.header) === null || _a === void 0 ? void 0 : _a.value) {\n          mutableMsg.value.header.value = toBase64AsAny(mutableMsg.value.header.value);\n        }\n      }));\n      const result = yield this.sign.signAndBroadcast(senderAddress, [updateMsg], stargate_1.calculateFee(this.limits.updateClient, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height\n      };\n    });\n  }\n\n  connOpenInit(clientId, remoteClientId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.info(`Connection open init: ${clientId} => ${remoteClientId}`);\n      const senderAddress = this.senderAddress;\n      const msg = {\n        typeUrl: '/ibc.core.connection.v1.MsgConnectionOpenInit',\n        value: tx_4.MsgConnectionOpenInit.fromPartial({\n          clientId,\n          counterparty: {\n            clientId: remoteClientId,\n            prefix: defaultMerklePrefix\n          },\n          version: defaultConnectionVersion,\n          delayPeriod: defaultDelayPeriod,\n          signer: senderAddress\n        })\n      };\n      this.logger.debug(`MsgConnectionOpenInit`, msg);\n      const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.initConnection, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      const connectionId = stargate_1.logs.findAttribute(parsedLogs, 'connection_open_init', 'connection_id').value;\n      this.logger.debug(`Connection open init successful: ${connectionId}`);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height,\n        connectionId\n      };\n    });\n  }\n\n  connOpenTry(myClientId, proof) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.info(`Connection open try: ${myClientId} => ${proof.clientId} (${proof.connectionId})`);\n      const senderAddress = this.senderAddress;\n      const {\n        clientId,\n        connectionId,\n        clientState,\n        proofHeight,\n        proofConnection: proofInit,\n        proofClient,\n        proofConsensus,\n        consensusHeight\n      } = proof;\n      const msg = {\n        typeUrl: '/ibc.core.connection.v1.MsgConnectionOpenTry',\n        value: tx_4.MsgConnectionOpenTry.fromPartial({\n          clientId: myClientId,\n          counterparty: {\n            clientId,\n            connectionId,\n            prefix: defaultMerklePrefix\n          },\n          delayPeriod: defaultDelayPeriod,\n          counterpartyVersions: [defaultConnectionVersion],\n          signer: senderAddress,\n          clientState,\n          proofHeight,\n          proofInit,\n          proofClient,\n          proofConsensus,\n          consensusHeight\n        })\n      };\n      this.logger.debug('MsgConnectionOpenTry', deepCloneAndMutate(msg, mutableMsg => {\n        mutableMsg.value.proofClient = toBase64AsAny(mutableMsg.value.proofClient);\n        mutableMsg.value.proofConsensus = toBase64AsAny(mutableMsg.value.proofConsensus);\n        mutableMsg.value.proofInit = toBase64AsAny(mutableMsg.value.proofInit);\n      }));\n      const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.connectionHandshake, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      const myConnectionId = stargate_1.logs.findAttribute(parsedLogs, 'connection_open_try', 'connection_id').value;\n      this.logger.debug(`Connection open try successful: ${myConnectionId} => ${connectionId}`);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height,\n        connectionId: myConnectionId\n      };\n    });\n  }\n\n  connOpenAck(myConnectionId, proof) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.info(`Connection open ack: ${myConnectionId} => ${proof.connectionId}`);\n      const senderAddress = this.senderAddress;\n      const {\n        connectionId,\n        clientState,\n        proofHeight,\n        proofConnection: proofTry,\n        proofClient,\n        proofConsensus,\n        consensusHeight\n      } = proof;\n      const msg = {\n        typeUrl: '/ibc.core.connection.v1.MsgConnectionOpenAck',\n        value: tx_4.MsgConnectionOpenAck.fromPartial({\n          connectionId: myConnectionId,\n          counterpartyConnectionId: connectionId,\n          version: defaultConnectionVersion,\n          signer: senderAddress,\n          clientState,\n          proofHeight,\n          proofTry,\n          proofClient,\n          proofConsensus,\n          consensusHeight\n        })\n      };\n      this.logger.debug('MsgConnectionOpenAck', deepCloneAndMutate(msg, mutableMsg => {\n        mutableMsg.value.proofConsensus = toBase64AsAny(mutableMsg.value.proofConsensus);\n        mutableMsg.value.proofTry = toBase64AsAny(mutableMsg.value.proofTry);\n        mutableMsg.value.proofClient = toBase64AsAny(mutableMsg.value.proofClient);\n      }));\n      const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.connectionHandshake, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height\n      };\n    });\n  }\n\n  connOpenConfirm(myConnectionId, proof) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.info(`Connection open confirm: ${myConnectionId}`);\n      const senderAddress = this.senderAddress;\n      const {\n        proofHeight,\n        proofConnection: proofAck\n      } = proof;\n      const msg = {\n        typeUrl: '/ibc.core.connection.v1.MsgConnectionOpenConfirm',\n        value: tx_4.MsgConnectionOpenConfirm.fromPartial({\n          connectionId: myConnectionId,\n          signer: senderAddress,\n          proofHeight,\n          proofAck\n        })\n      };\n      this.logger.debug('MsgConnectionOpenConfirm', deepCloneAndMutate(msg, mutableMsg => {\n        mutableMsg.value.proofAck = toBase64AsAny(mutableMsg.value.proofAck);\n      }));\n      const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.connectionHandshake, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height\n      };\n    });\n  }\n\n  channelOpenInit(portId, remotePortId, ordering, connectionId, version) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.verbose(`Channel open init: ${portId} => ${remotePortId} (${connectionId})`);\n      const senderAddress = this.senderAddress;\n      const msg = {\n        typeUrl: '/ibc.core.channel.v1.MsgChannelOpenInit',\n        value: tx_2.MsgChannelOpenInit.fromPartial({\n          portId,\n          channel: {\n            state: channel_1.State.STATE_INIT,\n            ordering,\n            counterparty: {\n              portId: remotePortId\n            },\n            connectionHops: [connectionId],\n            version\n          },\n          signer: senderAddress\n        })\n      };\n      this.logger.debug('MsgChannelOpenInit', msg);\n      const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.initChannel, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      const channelId = stargate_1.logs.findAttribute(parsedLogs, 'channel_open_init', 'channel_id').value;\n      this.logger.debug(`Channel open init successful: ${channelId}`);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height,\n        channelId\n      };\n    });\n  }\n\n  channelOpenTry(portId, remote, ordering, connectionId, version, counterpartyVersion, proof) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.verbose(`Channel open try: ${portId} => ${remote.portId} (${remote.channelId})`);\n      const senderAddress = this.senderAddress;\n      const {\n        proofHeight,\n        proof: proofInit\n      } = proof;\n      const msg = {\n        typeUrl: '/ibc.core.channel.v1.MsgChannelOpenTry',\n        value: tx_2.MsgChannelOpenTry.fromPartial({\n          portId,\n          counterpartyVersion,\n          channel: {\n            state: channel_1.State.STATE_TRYOPEN,\n            ordering,\n            counterparty: remote,\n            connectionHops: [connectionId],\n            version\n          },\n          proofInit,\n          proofHeight,\n          signer: senderAddress\n        })\n      };\n      this.logger.debug('MsgChannelOpenTry', deepCloneAndMutate(msg, mutableMsg => {\n        mutableMsg.value.proofInit = toBase64AsAny(mutableMsg.value.proofInit);\n      }));\n      const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.channelHandshake, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      const channelId = stargate_1.logs.findAttribute(parsedLogs, 'channel_open_try', 'channel_id').value;\n      this.logger.debug(`Channel open try successful: ${channelId} => ${remote.channelId})`);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height,\n        channelId\n      };\n    });\n  }\n\n  channelOpenAck(portId, channelId, counterpartyChannelId, counterpartyVersion, proof) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.verbose(`Channel open ack for port ${portId}: ${channelId} => ${counterpartyChannelId}`);\n      const senderAddress = this.senderAddress;\n      const {\n        proofHeight,\n        proof: proofTry\n      } = proof;\n      const msg = {\n        typeUrl: '/ibc.core.channel.v1.MsgChannelOpenAck',\n        value: tx_2.MsgChannelOpenAck.fromPartial({\n          portId,\n          channelId,\n          counterpartyChannelId,\n          counterpartyVersion,\n          proofTry,\n          proofHeight,\n          signer: senderAddress\n        })\n      };\n      this.logger.debug('MsgChannelOpenAck', deepCloneAndMutate(msg, mutableMsg => {\n        mutableMsg.value.proofTry = toBase64AsAny(mutableMsg.value.proofTry);\n      }));\n      const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.channelHandshake, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height\n      };\n    });\n  }\n\n  channelOpenConfirm(portId, channelId, proof) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.verbose(`Chanel open confirm for port ${portId}: ${channelId} => ${proof.id.channelId}`);\n      const senderAddress = this.senderAddress;\n      const {\n        proofHeight,\n        proof: proofAck\n      } = proof;\n      const msg = {\n        typeUrl: '/ibc.core.channel.v1.MsgChannelOpenConfirm',\n        value: tx_2.MsgChannelOpenConfirm.fromPartial({\n          portId,\n          channelId,\n          proofAck,\n          proofHeight,\n          signer: senderAddress\n        })\n      };\n      this.logger.debug('MsgChannelOpenConfirm', deepCloneAndMutate(msg, mutableMsg => {\n        mutableMsg.value.proofAck = toBase64AsAny(mutableMsg.value.proofAck);\n      }));\n      const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.channelHandshake, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height\n      };\n    });\n  }\n\n  receivePacket(packet, proofCommitment, proofHeight) {\n    return this.receivePackets([packet], [proofCommitment], proofHeight);\n  }\n\n  receivePackets(packets, proofCommitments, proofHeight) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.verbose(`Receive ${packets.length} packets..`);\n\n      if (packets.length !== proofCommitments.length) {\n        throw new Error(`Have ${packets.length} packets, but ${proofCommitments.length} proofs`);\n      }\n\n      if (packets.length === 0) {\n        throw new Error('Must submit at least 1 packet');\n      }\n\n      const senderAddress = this.senderAddress;\n      const msgs = [];\n\n      for (const i in packets) {\n        const packet = packets[i];\n        this.logger.verbose(`Sending packet #${packet.sequence.toNumber()} from ${this.chainId}:${packet.sourceChannel}`, utils_2.presentPacketData(packet.data));\n        const msg = {\n          typeUrl: '/ibc.core.channel.v1.MsgRecvPacket',\n          value: tx_2.MsgRecvPacket.fromPartial({\n            packet,\n            proofCommitment: proofCommitments[i],\n            proofHeight,\n            signer: senderAddress\n          })\n        };\n        msgs.push(msg);\n      }\n\n      this.logger.debug('MsgRecvPacket(s)', {\n        msgs: msgs.map(msg => deepCloneAndMutate(msg, mutableMsg => {\n          var _a;\n\n          mutableMsg.value.proofCommitment = toBase64AsAny(mutableMsg.value.proofCommitment);\n\n          if ((_a = mutableMsg.value.packet) === null || _a === void 0 ? void 0 : _a.data) {\n            mutableMsg.value.packet.data = toBase64AsAny(mutableMsg.value.packet.data);\n          }\n        }))\n      });\n      const result = yield this.sign.signAndBroadcast(senderAddress, msgs, stargate_1.calculateFee(this.limits.receivePacket * msgs.length, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height\n      };\n    });\n  }\n\n  acknowledgePacket(ack, proofAcked, proofHeight) {\n    return this.acknowledgePackets([ack], [proofAcked], proofHeight);\n  }\n\n  acknowledgePackets(acks, proofAckeds, proofHeight) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.verbose(`Acknowledge ${acks.length} packets...`);\n\n      if (acks.length !== proofAckeds.length) {\n        throw new Error(`Have ${acks.length} acks, but ${proofAckeds.length} proofs`);\n      }\n\n      if (acks.length === 0) {\n        throw new Error('Must submit at least 1 ack');\n      }\n\n      const senderAddress = this.senderAddress;\n      const msgs = [];\n\n      for (const i in acks) {\n        const packet = acks[i].originalPacket;\n        const acknowledgement = acks[i].acknowledgement;\n        this.logger.verbose(`Ack packet #${packet.sequence.toNumber()} from ${this.chainId}:${packet.sourceChannel}`, {\n          packet: utils_2.presentPacketData(packet.data),\n          ack: utils_2.presentPacketData(acknowledgement)\n        });\n        const msg = {\n          typeUrl: '/ibc.core.channel.v1.MsgAcknowledgement',\n          value: tx_2.MsgAcknowledgement.fromPartial({\n            packet,\n            acknowledgement,\n            proofAcked: proofAckeds[i],\n            proofHeight,\n            signer: senderAddress\n          })\n        };\n        msgs.push(msg);\n      }\n\n      this.logger.debug('MsgAcknowledgement(s)', {\n        msgs: msgs.map(msg => deepCloneAndMutate(msg, mutableMsg => {\n          var _a;\n\n          mutableMsg.value.acknowledgement = toBase64AsAny(mutableMsg.value.acknowledgement);\n          mutableMsg.value.proofAcked = toBase64AsAny(mutableMsg.value.proofAcked);\n\n          if ((_a = mutableMsg.value.packet) === null || _a === void 0 ? void 0 : _a.data) {\n            mutableMsg.value.packet.data = toBase64AsAny(mutableMsg.value.packet.data);\n          }\n        }))\n      });\n      const result = yield this.sign.signAndBroadcast(senderAddress, msgs, stargate_1.calculateFee(this.limits.ackPacket * msgs.length, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height\n      };\n    });\n  }\n\n  timeoutPacket(packet, proofUnreceived, nextSequenceRecv, proofHeight) {\n    return this.timeoutPackets([packet], [proofUnreceived], [nextSequenceRecv], proofHeight);\n  }\n\n  timeoutPackets(packets, proofsUnreceived, nextSequenceRecv, proofHeight) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (packets.length !== proofsUnreceived.length) {\n        throw new Error('Packets and proofs must be same length');\n      }\n\n      if (packets.length !== nextSequenceRecv.length) {\n        throw new Error('Packets and sequences must be same length');\n      }\n\n      this.logger.verbose(`Timeout ${packets.length} packets...`);\n      const senderAddress = this.senderAddress;\n      const msgs = [];\n\n      for (const i in packets) {\n        const packet = packets[i];\n        this.logger.verbose(`Timeout packet #${packet.sequence.toNumber()} from ${this.chainId}:${packet.sourceChannel}`, utils_2.presentPacketData(packet.data));\n        const msg = {\n          typeUrl: '/ibc.core.channel.v1.MsgTimeout',\n          value: tx_2.MsgTimeout.fromPartial({\n            packet,\n            proofUnreceived: proofsUnreceived[i],\n            nextSequenceRecv: nextSequenceRecv[i],\n            proofHeight,\n            signer: senderAddress\n          })\n        };\n        msgs.push(msg);\n      }\n\n      this.logger.debug('MsgTimeout', {\n        msgs: msgs.map(msg => deepCloneAndMutate(msg, mutableMsg => {\n          var _a;\n\n          if ((_a = mutableMsg.value.packet) === null || _a === void 0 ? void 0 : _a.data) {\n            mutableMsg.value.packet.data = toBase64AsAny(mutableMsg.value.packet.data);\n          }\n\n          mutableMsg.value.proofUnreceived = toBase64AsAny(mutableMsg.value.proofUnreceived);\n        }))\n      });\n      const result = yield this.sign.signAndBroadcast(senderAddress, msgs, stargate_1.calculateFee(this.limits.timeoutPacket * msgs.length, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height\n      };\n    });\n  }\n\n  transferTokens(sourcePort, sourceChannel, token, receiver, timeoutHeight,\n  /** timeout in seconds (SigningStargateClient converts to nanoseconds) */\n  timeoutTime) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.verbose(`Transfer tokens to ${receiver}`);\n      const result = yield this.sign.sendIbcTokens(this.senderAddress, receiver, token, sourcePort, sourceChannel, timeoutHeight, timeoutTime, stargate_1.calculateFee(this.limits.transfer, this.gasPrice));\n\n      if (stargate_1.isBroadcastTxFailure(result)) {\n        throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n      }\n\n      const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n      return {\n        logs: parsedLogs,\n        transactionHash: result.transactionHash,\n        height: result.height\n      };\n    });\n  }\n\n}\n\nexports.IbcClient = IbcClient; // this will query for the unbonding period.\n// if the trusting period is not set, it will use 2/3 of the unbonding period\n\nfunction buildCreateClientArgs(src, trustPeriodSec) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const header = yield src.latestHeader();\n    const consensusState = utils_2.buildConsensusState(header);\n    const unbondingPeriodSec = yield src.getUnbondingPeriod();\n\n    if (trustPeriodSec === undefined || trustPeriodSec === null) {\n      trustPeriodSec = Math.floor(unbondingPeriodSec * 2 / 3);\n    }\n\n    const clientState = utils_2.buildClientState(src.chainId, unbondingPeriodSec, trustPeriodSec, src.revisionHeight(header.height));\n    return {\n      consensusState,\n      clientState\n    };\n  });\n}\n\nexports.buildCreateClientArgs = buildCreateClientArgs;\n\nfunction prepareConnectionHandshake(src, dest, clientIdSrc, clientIdDest, connIdSrc) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // ensure the last transaction was committed to the header (one block after it was included)\n    yield src.waitOneBlock(); // update client on dest\n\n    const headerHeight = yield dest.doUpdateClient(clientIdDest, src); // get a proof (for the proven height)\n\n    const proof = yield src.getConnectionProof(clientIdSrc, connIdSrc, headerHeight);\n    return proof;\n  });\n}\n\nexports.prepareConnectionHandshake = prepareConnectionHandshake;\n\nfunction prepareChannelHandshake(src, dest, clientIdDest, portId, channelId) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // ensure the last transaction was committed to the header (one block after it was included)\n    yield src.waitOneBlock(); // update client on dest\n\n    const headerHeight = yield dest.doUpdateClient(clientIdDest, src); // get a proof (for the proven height)\n\n    const proof = yield src.getChannelProof({\n      portId,\n      channelId\n    }, headerHeight);\n    return proof;\n  });\n}\n\nexports.prepareChannelHandshake = prepareChannelHandshake;","map":{"version":3,"sources":["../../src/lib/ibcclient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepareChannelHandshake = exports.prepareConnectionHandshake = exports.buildCreateClientArgs = exports.IbcClient = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst stargate_1 = require(\"@cosmjs/stargate\");\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst cloneDeep_1 = __importDefault(require(\"lodash/cloneDeep\"));\nconst long_1 = __importDefault(require(\"long\"));\nconst tx_1 = require(\"../codec/ibc/applications/transfer/v1/tx\");\nconst channel_1 = require(\"../codec/ibc/core/channel/v1/channel\");\nconst tx_2 = require(\"../codec/ibc/core/channel/v1/tx\");\nconst client_1 = require(\"../codec/ibc/core/client/v1/client\");\nconst tx_3 = require(\"../codec/ibc/core/client/v1/tx\");\nconst tx_4 = require(\"../codec/ibc/core/connection/v1/tx\");\nconst tendermint_1 = require(\"../codec/ibc/lightclients/tendermint/v1/tendermint\");\nconst types_1 = require(\"../codec/tendermint/types/types\");\nconst validator_1 = require(\"../codec/tendermint/types/validator\");\nconst logger_1 = require(\"./logger\");\nconst ibc_1 = require(\"./queries/ibc\");\nconst utils_2 = require(\"./utils\");\nfunction deepCloneAndMutate(object, mutateFn) {\n    const deepClonedObject = cloneDeep_1.default(object);\n    mutateFn(deepClonedObject);\n    return deepClonedObject;\n}\nfunction toBase64AsAny(...input) {\n    return encoding_1.toBase64(...input); // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n/**** These are needed to bootstrap the endpoints */\n/* Some of them are hardcoded various places, which should we make configurable? */\n// const DefaultTrustLevel = '1/3';\n// const MaxClockDrift = 10; // 10 seconds\n// const upgradePath = ['upgrade', 'upgradedIBCState'];\n// const allowUpgradeAfterExpiry = false;\n// const allowUpgradeAfterMisbehavior = false;\n// these are from the cosmos sdk implementation\nconst defaultMerklePrefix = {\n    keyPrefix: encoding_1.toAscii('ibc'),\n};\nconst defaultConnectionVersion = {\n    identifier: '1',\n    features: ['ORDER_ORDERED', 'ORDER_UNORDERED'],\n};\n// this is a sane default, but we can revisit it\nconst defaultDelayPeriod = new long_1.default(0);\nfunction ibcRegistry() {\n    return new proto_signing_1.Registry([\n        ...stargate_1.defaultRegistryTypes,\n        ['/ibc.core.client.v1.MsgCreateClient', tx_3.MsgCreateClient],\n        ['/ibc.core.client.v1.MsgUpdateClient', tx_3.MsgUpdateClient],\n        ['/ibc.core.connection.v1.MsgConnectionOpenInit', tx_4.MsgConnectionOpenInit],\n        ['/ibc.core.connection.v1.MsgConnectionOpenTry', tx_4.MsgConnectionOpenTry],\n        ['/ibc.core.connection.v1.MsgConnectionOpenAck', tx_4.MsgConnectionOpenAck],\n        [\n            '/ibc.core.connection.v1.MsgConnectionOpenConfirm',\n            tx_4.MsgConnectionOpenConfirm,\n        ],\n        ['/ibc.core.channel.v1.MsgChannelOpenInit', tx_2.MsgChannelOpenInit],\n        ['/ibc.core.channel.v1.MsgChannelOpenTry', tx_2.MsgChannelOpenTry],\n        ['/ibc.core.channel.v1.MsgChannelOpenAck', tx_2.MsgChannelOpenAck],\n        ['/ibc.core.channel.v1.MsgChannelOpenConfirm', tx_2.MsgChannelOpenConfirm],\n        ['/ibc.core.channel.v1.MsgRecvPacket', tx_2.MsgRecvPacket],\n        ['/ibc.core.channel.v1.MsgAcknowledgement', tx_2.MsgAcknowledgement],\n        ['/ibc.core.channel.v1.MsgTimeout', tx_2.MsgTimeout],\n        ['/ibc.applications.transfer.v1.MsgTransfer', tx_1.MsgTransfer],\n    ]);\n}\nconst defaultGasPrice = stargate_1.GasPrice.fromString('0.025ucosm');\nconst defaultGasLimits = {\n    bankSend: 200000,\n    initClient: 150000,\n    updateClient: 600000,\n    initConnection: 150000,\n    connectionHandshake: 300000,\n    initChannel: 150000,\n    channelHandshake: 300000,\n    receivePacket: 300000,\n    ackPacket: 300000,\n    timeoutPacket: 300000,\n    transfer: 180000,\n};\nclass IbcClient {\n    constructor(signingClient, tmClient, senderAddress, chainId, options) {\n        this.sign = signingClient;\n        this.tm = tmClient;\n        this.query = stargate_1.QueryClient.withExtensions(tmClient, stargate_1.setupAuthExtension, stargate_1.setupBankExtension, ibc_1.setupIbcExtension, stargate_1.setupStakingExtension);\n        this.senderAddress = senderAddress;\n        this.chainId = chainId;\n        this.revisionNumber = utils_2.parseRevisionNumber(chainId);\n        const { gasPrice = defaultGasPrice, gasLimits = {}, logger } = options;\n        this.gasPrice = gasPrice;\n        // we must do this explicitly, not\n        //   this.limits = { ...defaultGasLimits, ...gasLimits };\n        // so undefined in gasLimits don't overwrite defaults\n        this.limits = {\n            bankSend: gasLimits.bankSend || defaultGasLimits.bankSend,\n            initClient: gasLimits.initClient || defaultGasLimits.initClient,\n            updateClient: gasLimits.updateClient || defaultGasLimits.updateClient,\n            initConnection: gasLimits.initConnection || defaultGasLimits.initConnection,\n            connectionHandshake: gasLimits.connectionHandshake || defaultGasLimits.connectionHandshake,\n            initChannel: gasLimits.initChannel || defaultGasLimits.initChannel,\n            channelHandshake: gasLimits.channelHandshake || defaultGasLimits.channelHandshake,\n            receivePacket: gasLimits.receivePacket || defaultGasLimits.receivePacket,\n            ackPacket: gasLimits.ackPacket || defaultGasLimits.ackPacket,\n            timeoutPacket: gasLimits.timeoutPacket || defaultGasLimits.timeoutPacket,\n            transfer: gasLimits.transfer || defaultGasLimits.transfer,\n        };\n        this.logger = logger !== null && logger !== void 0 ? logger : new logger_1.NoopLogger();\n    }\n    static connectWithSigner(endpoint, signer, senderAddress, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // override any registry setup, use the other options\n            const mergedOptions = Object.assign(Object.assign({}, options), { registry: ibcRegistry() });\n            const signingClient = yield stargate_1.SigningStargateClient.connectWithSigner(endpoint, signer, mergedOptions);\n            const tmClient = yield tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n            const chainId = yield signingClient.getChainId();\n            return new IbcClient(signingClient, tmClient, senderAddress, chainId, options);\n        });\n    }\n    revisionHeight(height) {\n        return client_1.Height.fromPartial({\n            revisionHeight: new long_1.default(height),\n            revisionNumber: this.revisionNumber,\n        });\n    }\n    ensureRevisionHeight(height) {\n        if (typeof height === 'number') {\n            return client_1.Height.fromPartial({\n                revisionHeight: long_1.default.fromNumber(height),\n                revisionNumber: this.revisionNumber,\n            });\n        }\n        if (height.revisionNumber.toNumber() !== this.revisionNumber.toNumber()) {\n            throw new Error(`Using incorrect revisionNumber ${height.revisionNumber} on chain with ${this.revisionNumber}`);\n        }\n        return height;\n    }\n    timeoutHeight(blocksInFuture) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const header = yield this.latestHeader();\n            return this.revisionHeight(header.height + blocksInFuture);\n        });\n    }\n    getChainId() {\n        this.logger.verbose('Get chain ID');\n        return this.sign.getChainId();\n    }\n    header(height) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.verbose(`Get header for height ${height}`);\n            // TODO: expose header method on tmClient and use that\n            const resp = yield this.tm.blockchain(height, height);\n            return resp.blockMetas[0].header;\n        });\n    }\n    latestHeader() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: expose header method on tmClient and use that\n            const block = yield this.tm.block();\n            return block.block.header;\n        });\n    }\n    currentTime() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // const status = await this.tm.status();\n            // return status.syncInfo.latestBlockTime;\n            return (yield this.latestHeader()).time;\n        });\n    }\n    currentHeight() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const status = yield this.tm.status();\n            return status.syncInfo.latestBlockHeight;\n        });\n    }\n    currentRevision() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const block = yield this.currentHeight();\n            return this.revisionHeight(block);\n        });\n    }\n    waitOneBlock() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // ensure this works\n            const start = yield this.currentHeight();\n            let end;\n            do {\n                yield utils_1.sleep(500);\n                end = yield this.currentHeight();\n            } while (end === start);\n            // TODO: this works but only for websocket connections, is there some code that falls back to polling in cosmjs?\n            // await firstEvent(this.tm.subscribeNewBlockHeader());\n        });\n    }\n    // we may have to wait a bit before a tx returns and making queries on the event log\n    waitForIndexer() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield utils_1.sleep(50);\n        });\n    }\n    getCommit(height) {\n        this.logger.verbose(height === undefined\n            ? 'Get latest commit'\n            : `Get commit for height ${height}`);\n        return this.tm.commit(height);\n    }\n    /** Returns the unbonding period in seconds */\n    getUnbondingPeriod() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { params } = yield this.query.staking.params();\n            const seconds = (_b = (_a = params === null || params === void 0 ? void 0 : params.unbondingTime) === null || _a === void 0 ? void 0 : _a.seconds) === null || _b === void 0 ? void 0 : _b.toNumber();\n            if (!seconds) {\n                throw new Error('No unbonding period found');\n            }\n            this.logger.verbose('Queried unbonding period', { seconds });\n            return seconds;\n        });\n    }\n    getSignedHeader(height) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { header: rpcHeader, commit: rpcCommit } = yield this.getCommit(height);\n            const header = types_1.Header.fromPartial(Object.assign(Object.assign({}, rpcHeader), { version: {\n                    block: new long_1.default(rpcHeader.version.block),\n                }, height: new long_1.default(rpcHeader.height), time: utils_2.timestampFromDateNanos(rpcHeader.time), lastBlockId: {\n                    hash: (_a = rpcHeader.lastBlockId) === null || _a === void 0 ? void 0 : _a.hash,\n                    partSetHeader: (_b = rpcHeader.lastBlockId) === null || _b === void 0 ? void 0 : _b.parts,\n                } }));\n            const signatures = rpcCommit.signatures.map((sig) => (Object.assign(Object.assign({}, sig), { timestamp: sig.timestamp && utils_2.timestampFromDateNanos(sig.timestamp), blockIdFlag: types_1.blockIDFlagFromJSON(sig.blockIdFlag) })));\n            const commit = types_1.Commit.fromPartial({\n                height: new long_1.default(rpcCommit.height),\n                round: rpcCommit.round,\n                blockId: {\n                    hash: rpcCommit.blockId.hash,\n                    partSetHeader: rpcCommit.blockId.parts,\n                },\n                signatures,\n            });\n            // For the vote sign bytes, it checks (from the commit):\n            //   Height, Round, BlockId, TimeStamp, ChainID\n            return { header, commit };\n        });\n    }\n    getValidatorSet(height) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.verbose(`Get validator set for height ${height}`);\n            // we need to query the header to find out who the proposer was, and pull them out\n            const { proposerAddress } = yield this.header(height);\n            const validators = yield this.tm.validatorsAll(height);\n            const mappedValidators = validators.validators.map((val) => ({\n                address: val.address,\n                pubKey: utils_2.mapRpcPubKeyToProto(val.pubkey),\n                votingPower: new long_1.default(val.votingPower),\n                proposerPriority: val.proposerPriority\n                    ? new long_1.default(val.proposerPriority)\n                    : undefined,\n            }));\n            const totalPower = validators.validators.reduce((x, v) => x + v.votingPower, 0);\n            const proposer = mappedValidators.find((val) => utils_1.arrayContentEquals(val.address, proposerAddress));\n            return validator_1.ValidatorSet.fromPartial({\n                validators: mappedValidators,\n                totalVotingPower: new long_1.default(totalPower),\n                proposer,\n            });\n        });\n    }\n    // this builds a header to update a remote client.\n    // you must pass the last known height on the remote side so we can properly generate it.\n    // it will update to the latest state of this chain.\n    //\n    // This is the logic that validates the returned struct:\n    // ibc check: https://github.com/cosmos/cosmos-sdk/blob/v0.41.0/x/ibc/light-clients/07-tendermint/types/update.go#L87-L167\n    // tendermint check: https://github.com/tendermint/tendermint/blob/v0.34.3/light/verifier.go#L19-L79\n    // sign bytes: https://github.com/tendermint/tendermint/blob/v0.34.3/types/validator_set.go#L762-L821\n    //   * https://github.com/tendermint/tendermint/blob/v0.34.3/types/validator_set.go#L807-L810\n    //   * https://github.com/tendermint/tendermint/blob/v0.34.3/types/block.go#L780-L809\n    //   * https://github.com/tendermint/tendermint/blob/bf9e36d02d2eb22f6fe8961d0d7d3d34307ba38e/types/canonical.go#L54-L65\n    //\n    // For the vote sign bytes, it checks (from the commit):\n    //   Height, Round, BlockId, TimeStamp, ChainID\n    buildHeader(lastHeight) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const signedHeader = yield this.getSignedHeader();\n            // \"assert that trustedVals is NextValidators of last trusted header\"\n            // https://github.com/cosmos/cosmos-sdk/blob/v0.41.0/x/ibc/light-clients/07-tendermint/types/update.go#L74\n            const validatorHeight = lastHeight + 1;\n            /* eslint @typescript-eslint/no-non-null-assertion: \"off\" */\n            const curHeight = signedHeader.header.height.toNumber();\n            return tendermint_1.Header.fromPartial({\n                signedHeader,\n                validatorSet: yield this.getValidatorSet(curHeight),\n                trustedHeight: this.revisionHeight(lastHeight),\n                trustedValidators: yield this.getValidatorSet(validatorHeight),\n            });\n        });\n    }\n    // trustedHeight must be proven by the client on the destination chain\n    // and include a proof for the connOpenInit (eg. must be 1 or more blocks after the\n    // block connOpenInit Tx was in).\n    //\n    // pass a header height that was previously updated to on the remote chain using updateClient.\n    // note: the queries will be for the block before this header, so the proofs match up (appHash is on H+1)\n    getConnectionProof(clientId, connectionId, headerHeight) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const proofHeight = this.ensureRevisionHeight(headerHeight);\n            const queryHeight = utils_2.subtractBlock(proofHeight, 1);\n            const { clientState, proof: proofClient,\n            // proofHeight,\n             } = yield this.query.ibc.proof.client.state(clientId, queryHeight);\n            // This is the most recent state we have on this chain of the other\n            const { latestHeight: consensusHeight } = yield this.query.ibc.client.stateTm(clientId);\n            utils_1.assert(consensusHeight);\n            // get the init proof\n            const { proof: proofConnection } = yield this.query.ibc.proof.connection.connection(connectionId, queryHeight);\n            // get the consensus proof\n            const { proof: proofConsensus } = yield this.query.ibc.proof.client.consensusState(clientId, consensusHeight, queryHeight);\n            return {\n                clientId,\n                clientState,\n                connectionId,\n                proofHeight,\n                proofConnection,\n                proofClient,\n                proofConsensus,\n                consensusHeight,\n            };\n        });\n    }\n    // trustedHeight must be proven by the client on the destination chain\n    // and include a proof for the connOpenInit (eg. must be 1 or more blocks after the\n    // block connOpenInit Tx was in).\n    //\n    // pass a header height that was previously updated to on the remote chain using updateClient.\n    // note: the queries will be for the block before this header, so the proofs match up (appHash is on H+1)\n    getChannelProof(id, headerHeight) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const proofHeight = this.ensureRevisionHeight(headerHeight);\n            const queryHeight = utils_2.subtractBlock(proofHeight, 1);\n            const { proof } = yield this.query.ibc.proof.channel.channel(id.portId, id.channelId, queryHeight);\n            return {\n                id,\n                proofHeight,\n                proof,\n            };\n        });\n    }\n    getPacketProof(packet, headerHeight) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const proofHeight = this.ensureRevisionHeight(headerHeight);\n            const queryHeight = utils_2.subtractBlock(proofHeight, 1);\n            const { proof } = yield this.query.ibc.proof.channel.packetCommitment(packet.sourcePort, packet.sourceChannel, packet.sequence, queryHeight);\n            return proof;\n        });\n    }\n    getAckProof({ originalPacket }, headerHeight) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const proofHeight = this.ensureRevisionHeight(headerHeight);\n            const queryHeight = utils_2.subtractBlock(proofHeight, 1);\n            const res = yield this.query.ibc.proof.channel.packetAcknowledgement(originalPacket.destinationPort, originalPacket.destinationChannel, originalPacket.sequence.toNumber(), queryHeight);\n            const { proof } = res;\n            return proof;\n        });\n    }\n    getTimeoutProof({ originalPacket }, headerHeight) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const proofHeight = this.ensureRevisionHeight(headerHeight);\n            const queryHeight = utils_2.subtractBlock(proofHeight, 1);\n            const proof = yield this.query.ibc.proof.channel.receiptProof(originalPacket.destinationPort, originalPacket.destinationChannel, originalPacket.sequence.toNumber(), queryHeight);\n            return proof;\n        });\n    }\n    /*\n    These are helpers to query, build data and submit a message\n    Currently all prefixed with doXxx, but please look for better naming\n    */\n    // Updates existing client on this chain with data from src chain.\n    // Returns the height that was updated to.\n    doUpdateClient(clientId, src) {\n        var _a, _b, _c, _d;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { latestHeight } = yield this.query.ibc.client.stateTm(clientId);\n            const header = yield src.buildHeader(utils_2.toIntHeight(latestHeight));\n            yield this.updateTendermintClient(clientId, header);\n            const height = (_d = (_c = (_b = (_a = header.signedHeader) === null || _a === void 0 ? void 0 : _a.header) === null || _b === void 0 ? void 0 : _b.height) === null || _c === void 0 ? void 0 : _c.toNumber()) !== null && _d !== void 0 ? _d : 0;\n            return src.revisionHeight(height);\n        });\n    }\n    /***** These are all direct wrappers around message constructors ********/\n    sendTokens(recipientAddress, transferAmount, memo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.verbose(`Send tokens to ${recipientAddress}`);\n            this.logger.debug('Send tokens:', {\n                senderAddress: this.senderAddress,\n                recipientAddress,\n                transferAmount,\n                memo,\n            });\n            const result = yield this.sign.sendTokens(this.senderAddress, recipientAddress, transferAmount, stargate_1.calculateFee(this.limits.bankSend, this.gasPrice), memo);\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n            };\n        });\n    }\n    /* Send any number of messages, you are responsible for encoding them */\n    sendMultiMsg(msgs, gasLimit) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.verbose(`Broadcast multiple msgs`);\n            this.logger.debug(`Multiple msgs:`, {\n                msgs,\n                gasLimit,\n            });\n            const senderAddress = this.senderAddress;\n            const fee = stargate_1.calculateFee(gasLimit, this.gasPrice);\n            const result = yield this.sign.signAndBroadcast(senderAddress, msgs, fee);\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n            };\n        });\n    }\n    createTendermintClient(clientState, consensusState) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.verbose(`Create Tendermint client`);\n            const senderAddress = this.senderAddress;\n            const createMsg = {\n                typeUrl: '/ibc.core.client.v1.MsgCreateClient',\n                value: tx_3.MsgCreateClient.fromPartial({\n                    signer: senderAddress,\n                    clientState: {\n                        typeUrl: '/ibc.lightclients.tendermint.v1.ClientState',\n                        value: tendermint_1.ClientState.encode(clientState).finish(),\n                    },\n                    consensusState: {\n                        typeUrl: '/ibc.lightclients.tendermint.v1.ConsensusState',\n                        value: tendermint_1.ConsensusState.encode(consensusState).finish(),\n                    },\n                }),\n            };\n            this.logger.debug('MsgCreateClient', createMsg);\n            const result = yield this.sign.signAndBroadcast(senderAddress, [createMsg], stargate_1.calculateFee(this.limits.initClient, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            const clientId = stargate_1.logs.findAttribute(parsedLogs, 'create_client', 'client_id').value;\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n                clientId,\n            };\n        });\n    }\n    updateTendermintClient(clientId, header) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.verbose(`Update Tendermint client ${clientId}`);\n            const senderAddress = this.senderAddress;\n            const updateMsg = {\n                typeUrl: '/ibc.core.client.v1.MsgUpdateClient',\n                value: tx_3.MsgUpdateClient.fromPartial({\n                    signer: senderAddress,\n                    clientId,\n                    header: {\n                        typeUrl: '/ibc.lightclients.tendermint.v1.Header',\n                        value: tendermint_1.Header.encode(header).finish(),\n                    },\n                }),\n            };\n            this.logger.debug(`MsgUpdateClient`, deepCloneAndMutate(updateMsg, (mutableMsg) => {\n                var _a;\n                if ((_a = mutableMsg.value.header) === null || _a === void 0 ? void 0 : _a.value) {\n                    mutableMsg.value.header.value = toBase64AsAny(mutableMsg.value.header.value);\n                }\n            }));\n            const result = yield this.sign.signAndBroadcast(senderAddress, [updateMsg], stargate_1.calculateFee(this.limits.updateClient, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n            };\n        });\n    }\n    connOpenInit(clientId, remoteClientId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.info(`Connection open init: ${clientId} => ${remoteClientId}`);\n            const senderAddress = this.senderAddress;\n            const msg = {\n                typeUrl: '/ibc.core.connection.v1.MsgConnectionOpenInit',\n                value: tx_4.MsgConnectionOpenInit.fromPartial({\n                    clientId,\n                    counterparty: {\n                        clientId: remoteClientId,\n                        prefix: defaultMerklePrefix,\n                    },\n                    version: defaultConnectionVersion,\n                    delayPeriod: defaultDelayPeriod,\n                    signer: senderAddress,\n                }),\n            };\n            this.logger.debug(`MsgConnectionOpenInit`, msg);\n            const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.initConnection, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            const connectionId = stargate_1.logs.findAttribute(parsedLogs, 'connection_open_init', 'connection_id').value;\n            this.logger.debug(`Connection open init successful: ${connectionId}`);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n                connectionId,\n            };\n        });\n    }\n    connOpenTry(myClientId, proof) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.info(`Connection open try: ${myClientId} => ${proof.clientId} (${proof.connectionId})`);\n            const senderAddress = this.senderAddress;\n            const { clientId, connectionId, clientState, proofHeight, proofConnection: proofInit, proofClient, proofConsensus, consensusHeight, } = proof;\n            const msg = {\n                typeUrl: '/ibc.core.connection.v1.MsgConnectionOpenTry',\n                value: tx_4.MsgConnectionOpenTry.fromPartial({\n                    clientId: myClientId,\n                    counterparty: {\n                        clientId,\n                        connectionId,\n                        prefix: defaultMerklePrefix,\n                    },\n                    delayPeriod: defaultDelayPeriod,\n                    counterpartyVersions: [defaultConnectionVersion],\n                    signer: senderAddress,\n                    clientState,\n                    proofHeight,\n                    proofInit,\n                    proofClient,\n                    proofConsensus,\n                    consensusHeight,\n                }),\n            };\n            this.logger.debug('MsgConnectionOpenTry', deepCloneAndMutate(msg, (mutableMsg) => {\n                mutableMsg.value.proofClient = toBase64AsAny(mutableMsg.value.proofClient);\n                mutableMsg.value.proofConsensus = toBase64AsAny(mutableMsg.value.proofConsensus);\n                mutableMsg.value.proofInit = toBase64AsAny(mutableMsg.value.proofInit);\n            }));\n            const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.connectionHandshake, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            const myConnectionId = stargate_1.logs.findAttribute(parsedLogs, 'connection_open_try', 'connection_id').value;\n            this.logger.debug(`Connection open try successful: ${myConnectionId} => ${connectionId}`);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n                connectionId: myConnectionId,\n            };\n        });\n    }\n    connOpenAck(myConnectionId, proof) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.info(`Connection open ack: ${myConnectionId} => ${proof.connectionId}`);\n            const senderAddress = this.senderAddress;\n            const { connectionId, clientState, proofHeight, proofConnection: proofTry, proofClient, proofConsensus, consensusHeight, } = proof;\n            const msg = {\n                typeUrl: '/ibc.core.connection.v1.MsgConnectionOpenAck',\n                value: tx_4.MsgConnectionOpenAck.fromPartial({\n                    connectionId: myConnectionId,\n                    counterpartyConnectionId: connectionId,\n                    version: defaultConnectionVersion,\n                    signer: senderAddress,\n                    clientState,\n                    proofHeight,\n                    proofTry,\n                    proofClient,\n                    proofConsensus,\n                    consensusHeight,\n                }),\n            };\n            this.logger.debug('MsgConnectionOpenAck', deepCloneAndMutate(msg, (mutableMsg) => {\n                mutableMsg.value.proofConsensus = toBase64AsAny(mutableMsg.value.proofConsensus);\n                mutableMsg.value.proofTry = toBase64AsAny(mutableMsg.value.proofTry);\n                mutableMsg.value.proofClient = toBase64AsAny(mutableMsg.value.proofClient);\n            }));\n            const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.connectionHandshake, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n            };\n        });\n    }\n    connOpenConfirm(myConnectionId, proof) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.info(`Connection open confirm: ${myConnectionId}`);\n            const senderAddress = this.senderAddress;\n            const { proofHeight, proofConnection: proofAck } = proof;\n            const msg = {\n                typeUrl: '/ibc.core.connection.v1.MsgConnectionOpenConfirm',\n                value: tx_4.MsgConnectionOpenConfirm.fromPartial({\n                    connectionId: myConnectionId,\n                    signer: senderAddress,\n                    proofHeight,\n                    proofAck,\n                }),\n            };\n            this.logger.debug('MsgConnectionOpenConfirm', deepCloneAndMutate(msg, (mutableMsg) => {\n                mutableMsg.value.proofAck = toBase64AsAny(mutableMsg.value.proofAck);\n            }));\n            const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.connectionHandshake, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n            };\n        });\n    }\n    channelOpenInit(portId, remotePortId, ordering, connectionId, version) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.verbose(`Channel open init: ${portId} => ${remotePortId} (${connectionId})`);\n            const senderAddress = this.senderAddress;\n            const msg = {\n                typeUrl: '/ibc.core.channel.v1.MsgChannelOpenInit',\n                value: tx_2.MsgChannelOpenInit.fromPartial({\n                    portId,\n                    channel: {\n                        state: channel_1.State.STATE_INIT,\n                        ordering,\n                        counterparty: {\n                            portId: remotePortId,\n                        },\n                        connectionHops: [connectionId],\n                        version,\n                    },\n                    signer: senderAddress,\n                }),\n            };\n            this.logger.debug('MsgChannelOpenInit', msg);\n            const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.initChannel, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            const channelId = stargate_1.logs.findAttribute(parsedLogs, 'channel_open_init', 'channel_id').value;\n            this.logger.debug(`Channel open init successful: ${channelId}`);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n                channelId,\n            };\n        });\n    }\n    channelOpenTry(portId, remote, ordering, connectionId, version, counterpartyVersion, proof) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.verbose(`Channel open try: ${portId} => ${remote.portId} (${remote.channelId})`);\n            const senderAddress = this.senderAddress;\n            const { proofHeight, proof: proofInit } = proof;\n            const msg = {\n                typeUrl: '/ibc.core.channel.v1.MsgChannelOpenTry',\n                value: tx_2.MsgChannelOpenTry.fromPartial({\n                    portId,\n                    counterpartyVersion,\n                    channel: {\n                        state: channel_1.State.STATE_TRYOPEN,\n                        ordering,\n                        counterparty: remote,\n                        connectionHops: [connectionId],\n                        version,\n                    },\n                    proofInit,\n                    proofHeight,\n                    signer: senderAddress,\n                }),\n            };\n            this.logger.debug('MsgChannelOpenTry', deepCloneAndMutate(msg, (mutableMsg) => {\n                mutableMsg.value.proofInit = toBase64AsAny(mutableMsg.value.proofInit);\n            }));\n            const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.channelHandshake, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            const channelId = stargate_1.logs.findAttribute(parsedLogs, 'channel_open_try', 'channel_id').value;\n            this.logger.debug(`Channel open try successful: ${channelId} => ${remote.channelId})`);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n                channelId,\n            };\n        });\n    }\n    channelOpenAck(portId, channelId, counterpartyChannelId, counterpartyVersion, proof) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.verbose(`Channel open ack for port ${portId}: ${channelId} => ${counterpartyChannelId}`);\n            const senderAddress = this.senderAddress;\n            const { proofHeight, proof: proofTry } = proof;\n            const msg = {\n                typeUrl: '/ibc.core.channel.v1.MsgChannelOpenAck',\n                value: tx_2.MsgChannelOpenAck.fromPartial({\n                    portId,\n                    channelId,\n                    counterpartyChannelId,\n                    counterpartyVersion,\n                    proofTry,\n                    proofHeight,\n                    signer: senderAddress,\n                }),\n            };\n            this.logger.debug('MsgChannelOpenAck', deepCloneAndMutate(msg, (mutableMsg) => {\n                mutableMsg.value.proofTry = toBase64AsAny(mutableMsg.value.proofTry);\n            }));\n            const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.channelHandshake, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n            };\n        });\n    }\n    channelOpenConfirm(portId, channelId, proof) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.verbose(`Chanel open confirm for port ${portId}: ${channelId} => ${proof.id.channelId}`);\n            const senderAddress = this.senderAddress;\n            const { proofHeight, proof: proofAck } = proof;\n            const msg = {\n                typeUrl: '/ibc.core.channel.v1.MsgChannelOpenConfirm',\n                value: tx_2.MsgChannelOpenConfirm.fromPartial({\n                    portId,\n                    channelId,\n                    proofAck,\n                    proofHeight,\n                    signer: senderAddress,\n                }),\n            };\n            this.logger.debug('MsgChannelOpenConfirm', deepCloneAndMutate(msg, (mutableMsg) => {\n                mutableMsg.value.proofAck = toBase64AsAny(mutableMsg.value.proofAck);\n            }));\n            const result = yield this.sign.signAndBroadcast(senderAddress, [msg], stargate_1.calculateFee(this.limits.channelHandshake, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n            };\n        });\n    }\n    receivePacket(packet, proofCommitment, proofHeight) {\n        return this.receivePackets([packet], [proofCommitment], proofHeight);\n    }\n    receivePackets(packets, proofCommitments, proofHeight) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.verbose(`Receive ${packets.length} packets..`);\n            if (packets.length !== proofCommitments.length) {\n                throw new Error(`Have ${packets.length} packets, but ${proofCommitments.length} proofs`);\n            }\n            if (packets.length === 0) {\n                throw new Error('Must submit at least 1 packet');\n            }\n            const senderAddress = this.senderAddress;\n            const msgs = [];\n            for (const i in packets) {\n                const packet = packets[i];\n                this.logger.verbose(`Sending packet #${packet.sequence.toNumber()} from ${this.chainId}:${packet.sourceChannel}`, utils_2.presentPacketData(packet.data));\n                const msg = {\n                    typeUrl: '/ibc.core.channel.v1.MsgRecvPacket',\n                    value: tx_2.MsgRecvPacket.fromPartial({\n                        packet,\n                        proofCommitment: proofCommitments[i],\n                        proofHeight,\n                        signer: senderAddress,\n                    }),\n                };\n                msgs.push(msg);\n            }\n            this.logger.debug('MsgRecvPacket(s)', {\n                msgs: msgs.map((msg) => deepCloneAndMutate(msg, (mutableMsg) => {\n                    var _a;\n                    mutableMsg.value.proofCommitment = toBase64AsAny(mutableMsg.value.proofCommitment);\n                    if ((_a = mutableMsg.value.packet) === null || _a === void 0 ? void 0 : _a.data) {\n                        mutableMsg.value.packet.data = toBase64AsAny(mutableMsg.value.packet.data);\n                    }\n                })),\n            });\n            const result = yield this.sign.signAndBroadcast(senderAddress, msgs, stargate_1.calculateFee(this.limits.receivePacket * msgs.length, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n            };\n        });\n    }\n    acknowledgePacket(ack, proofAcked, proofHeight) {\n        return this.acknowledgePackets([ack], [proofAcked], proofHeight);\n    }\n    acknowledgePackets(acks, proofAckeds, proofHeight) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.verbose(`Acknowledge ${acks.length} packets...`);\n            if (acks.length !== proofAckeds.length) {\n                throw new Error(`Have ${acks.length} acks, but ${proofAckeds.length} proofs`);\n            }\n            if (acks.length === 0) {\n                throw new Error('Must submit at least 1 ack');\n            }\n            const senderAddress = this.senderAddress;\n            const msgs = [];\n            for (const i in acks) {\n                const packet = acks[i].originalPacket;\n                const acknowledgement = acks[i].acknowledgement;\n                this.logger.verbose(`Ack packet #${packet.sequence.toNumber()} from ${this.chainId}:${packet.sourceChannel}`, {\n                    packet: utils_2.presentPacketData(packet.data),\n                    ack: utils_2.presentPacketData(acknowledgement),\n                });\n                const msg = {\n                    typeUrl: '/ibc.core.channel.v1.MsgAcknowledgement',\n                    value: tx_2.MsgAcknowledgement.fromPartial({\n                        packet,\n                        acknowledgement,\n                        proofAcked: proofAckeds[i],\n                        proofHeight,\n                        signer: senderAddress,\n                    }),\n                };\n                msgs.push(msg);\n            }\n            this.logger.debug('MsgAcknowledgement(s)', {\n                msgs: msgs.map((msg) => deepCloneAndMutate(msg, (mutableMsg) => {\n                    var _a;\n                    mutableMsg.value.acknowledgement = toBase64AsAny(mutableMsg.value.acknowledgement);\n                    mutableMsg.value.proofAcked = toBase64AsAny(mutableMsg.value.proofAcked);\n                    if ((_a = mutableMsg.value.packet) === null || _a === void 0 ? void 0 : _a.data) {\n                        mutableMsg.value.packet.data = toBase64AsAny(mutableMsg.value.packet.data);\n                    }\n                })),\n            });\n            const result = yield this.sign.signAndBroadcast(senderAddress, msgs, stargate_1.calculateFee(this.limits.ackPacket * msgs.length, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n            };\n        });\n    }\n    timeoutPacket(packet, proofUnreceived, nextSequenceRecv, proofHeight) {\n        return this.timeoutPackets([packet], [proofUnreceived], [nextSequenceRecv], proofHeight);\n    }\n    timeoutPackets(packets, proofsUnreceived, nextSequenceRecv, proofHeight) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (packets.length !== proofsUnreceived.length) {\n                throw new Error('Packets and proofs must be same length');\n            }\n            if (packets.length !== nextSequenceRecv.length) {\n                throw new Error('Packets and sequences must be same length');\n            }\n            this.logger.verbose(`Timeout ${packets.length} packets...`);\n            const senderAddress = this.senderAddress;\n            const msgs = [];\n            for (const i in packets) {\n                const packet = packets[i];\n                this.logger.verbose(`Timeout packet #${packet.sequence.toNumber()} from ${this.chainId}:${packet.sourceChannel}`, utils_2.presentPacketData(packet.data));\n                const msg = {\n                    typeUrl: '/ibc.core.channel.v1.MsgTimeout',\n                    value: tx_2.MsgTimeout.fromPartial({\n                        packet,\n                        proofUnreceived: proofsUnreceived[i],\n                        nextSequenceRecv: nextSequenceRecv[i],\n                        proofHeight,\n                        signer: senderAddress,\n                    }),\n                };\n                msgs.push(msg);\n            }\n            this.logger.debug('MsgTimeout', {\n                msgs: msgs.map((msg) => deepCloneAndMutate(msg, (mutableMsg) => {\n                    var _a;\n                    if ((_a = mutableMsg.value.packet) === null || _a === void 0 ? void 0 : _a.data) {\n                        mutableMsg.value.packet.data = toBase64AsAny(mutableMsg.value.packet.data);\n                    }\n                    mutableMsg.value.proofUnreceived = toBase64AsAny(mutableMsg.value.proofUnreceived);\n                })),\n            });\n            const result = yield this.sign.signAndBroadcast(senderAddress, msgs, stargate_1.calculateFee(this.limits.timeoutPacket * msgs.length, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n            };\n        });\n    }\n    transferTokens(sourcePort, sourceChannel, token, receiver, timeoutHeight, \n    /** timeout in seconds (SigningStargateClient converts to nanoseconds) */\n    timeoutTime) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.verbose(`Transfer tokens to ${receiver}`);\n            const result = yield this.sign.sendIbcTokens(this.senderAddress, receiver, token, sourcePort, sourceChannel, timeoutHeight, timeoutTime, stargate_1.calculateFee(this.limits.transfer, this.gasPrice));\n            if (stargate_1.isBroadcastTxFailure(result)) {\n                throw new Error(utils_2.createBroadcastTxErrorMessage(result));\n            }\n            const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n            return {\n                logs: parsedLogs,\n                transactionHash: result.transactionHash,\n                height: result.height,\n            };\n        });\n    }\n}\nexports.IbcClient = IbcClient;\n// this will query for the unbonding period.\n// if the trusting period is not set, it will use 2/3 of the unbonding period\nfunction buildCreateClientArgs(src, trustPeriodSec) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const header = yield src.latestHeader();\n        const consensusState = utils_2.buildConsensusState(header);\n        const unbondingPeriodSec = yield src.getUnbondingPeriod();\n        if (trustPeriodSec === undefined || trustPeriodSec === null) {\n            trustPeriodSec = Math.floor((unbondingPeriodSec * 2) / 3);\n        }\n        const clientState = utils_2.buildClientState(src.chainId, unbondingPeriodSec, trustPeriodSec, src.revisionHeight(header.height));\n        return { consensusState, clientState };\n    });\n}\nexports.buildCreateClientArgs = buildCreateClientArgs;\nfunction prepareConnectionHandshake(src, dest, clientIdSrc, clientIdDest, connIdSrc) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // ensure the last transaction was committed to the header (one block after it was included)\n        yield src.waitOneBlock();\n        // update client on dest\n        const headerHeight = yield dest.doUpdateClient(clientIdDest, src);\n        // get a proof (for the proven height)\n        const proof = yield src.getConnectionProof(clientIdSrc, connIdSrc, headerHeight);\n        return proof;\n    });\n}\nexports.prepareConnectionHandshake = prepareConnectionHandshake;\nfunction prepareChannelHandshake(src, dest, clientIdDest, portId, channelId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // ensure the last transaction was committed to the header (one block after it was included)\n        yield src.waitOneBlock();\n        // update client on dest\n        const headerHeight = yield dest.doUpdateClient(clientIdDest, src);\n        // get a proof (for the proven height)\n        const proof = yield src.getChannelProof({ portId, channelId }, headerHeight);\n        return proof;\n    });\n}\nexports.prepareChannelHandshake = prepareChannelHandshake;\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}